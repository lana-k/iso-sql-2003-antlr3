// $ANTLR 3.2 Sep 23, 2009 12:02:23 /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g 2011-04-27 21:43:39

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

public class sql2003Lexer extends Lexer {
    public static final int FUNCTION=166;
    public static final int CASCADED=98;
    public static final int CONST=368;
    public static final int PRECISION=238;
    public static final int UNDO=294;
    public static final int Percent=46;
    public static final int CONSTRAINT_CATALOG=364;
    public static final int FINAL=409;
    public static final int ARE=80;
    public static final int TIMEZONE_MINUTE=286;
    public static final int Yi_Radicals=686;
    public static final int OctalDigit=42;
    public static final int PRECEDING=499;
    public static final int RETURN=251;
    public static final int GET=168;
    public static final int USER_DEFINED_TYPE_SCHEMA=592;
    public static final int General_Punctuation=706;
    public static final int CHARACTER_SET_CATALOG=342;
    public static final int D=19;
    public static final int Ogham=650;
    public static final int E=20;
    public static final int F=21;
    public static final int G=22;
    public static final int SUBCLASS_ORIGIN=562;
    public static final int A=16;
    public static final int B=17;
    public static final int ASC=321;
    public static final int C=18;
    public static final int GROUPING=171;
    public static final int PARAMETER_NAME=482;
    public static final int L=27;
    public static final int M=28;
    public static final int STATIC=277;
    public static final int N=29;
    public static final int O=30;
    public static final int TRANSACTION=573;
    public static final int H=23;
    public static final int I=24;
    public static final int J=25;
    public static final int K=26;
    public static final int U=36;
    public static final int T=35;
    public static final int W=38;
    public static final int V=37;
    public static final int CATALOG=335;
    public static final int INT=189;
    public static final int Q=32;
    public static final int P=31;
    public static final int S=34;
    public static final int R=33;
    public static final int TRANSLATE=576;
    public static final int LEADING=197;
    public static final int Y=40;
    public static final int Superscripts_and_Subscripts=664;
    public static final int X=39;
    public static final int Z=41;
    public static final int Greater_Than_Operator=61;
    public static final int GROUP=172;
    public static final int Private_Use_Area=691;
    public static final int CURRENT_ROLE=121;
    public static final int USER=300;
    public static final int Left_Paren=49;
    public static final int LOWER=446;
    public static final int GO=420;
    public static final int Thai=641;
    public static final int CONSTRAINT=111;
    public static final int TIMEZONE_HOUR=285;
    public static final int Regex_Non_Escaped_Unicode=729;
    public static final int Simple_Latin_Letter=11;
    public static final int DYNAMIC_FUNCTION=399;
    public static final int NCHAR=215;
    public static final int CURRENT_USER=125;
    public static final int MySQL_Identifier_Start=764;
    public static final int Thaana=630;
    public static final int FLOAT=412;
    public static final int Back_Quote=608;
    public static final int Hangul_Syllables=687;
    public static final int AT=86;
    public static final int AS=84;
    public static final int Signed_Float=73;
    public static final int Unicode_Character_Without_Quotes=726;
    public static final int REGR_AVGY=507;
    public static final int Buhid=654;
    public static final int REGR_AVGX=506;
    public static final int AVG=327;
    public static final int ROW_COUNT=529;
    public static final int Character_Set=746;
    public static final int Letterlike_Symbols=667;
    public static final int COLLATION_NAME=352;
    public static final int Concatenation_Operator=604;
    public static final int CONNECTION_NAME=362;
    public static final int RETURNS=250;
    public static final int LIKE=199;
    public static final int Telugu=637;
    public static final int BY=95;
    public static final int SERIALIZABLE=542;
    public static final int RIGHT=253;
    public static final int EXEC=154;
    public static final int SESSION=544;
    public static final int CJK_Compatibility_Forms=697;
    public static final int Currency_Symbols=665;
    public static final int SQL92_Identifier=754;
    public static final int USER_DEFINED_TYPE_CODE=590;
    public static final int DAYS=381;
    public static final int Miscellaneous_Symbols=715;
    public static final int ROWS=256;
    public static final int CHARACTER_SET_NAME=343;
    public static final int SCOPE_NAME=535;
    public static final int NATURAL=213;
    public static final int LONG=443;
    public static final int HOURS=423;
    public static final int OPTIONS=473;
    public static final int Miscellaneous_Technical=709;
    public static final int LN=444;
    public static final int REGR_SYY=514;
    public static final int MODIFIES=208;
    public static final int COUNT=372;
    public static final int OVERRIDING=478;
    public static final int ESCAPE=151;
    public static final int PATH=489;
    public static final int Unsigned_Float=72;
    public static final int Combining_Diacritical_Marks=622;
    public static final int String_Literal=753;
    public static final int COMMENT=7;
    public static final int ARRAY=81;
    public static final int Tilde=609;
    public static final int EXCEPTION=403;
    public static final int EXIT=156;
    public static final int COALESCE=348;
    public static final int DYNAMIC_FUNCTION_CODE=400;
    public static final int ROLE=524;
    public static final int SECTION=537;
    public static final int Arrows=707;
    public static final int MySQL_Identifier_Part=765;
    public static final int NO=221;
    public static final int EVERY=402;
    public static final int ON=227;
    public static final int Khmer_Symbols=660;
    public static final int COVAR_SAMP=374;
    public static final int SENSITIVE=264;
    public static final int MATCH=203;
    public static final int REGR_SLOPE=511;
    public static final int Colon=57;
    public static final int RETURNED_CARDINALITY=520;
    public static final int OF=224;
    public static final int FLOOR=413;
    public static final int NCHAR_VARYING=214;
    public static final int Back_Slash=614;
    public static final int CUBE=117;
    public static final int NATIONAL=212;
    public static final int CALLED=96;
    public static final int REGR_SXY=513;
    public static final int REGR_SXX=512;
    public static final int OR=230;
    public static final int FILTER=160;
    public static final int INDICATOR_TYPE=427;
    public static final int CATALOG_NAME=334;
    public static final int COLLECT=355;
    public static final int UNBOUNDED=582;
    public static final int CURSOR=127;
    public static final int TIMESTAMP=284;
    public static final int ATOMIC=85;
    public static final int UPPER=587;
    public static final int OTHERS=476;
    public static final int CONSTRAINTS=363;
    public static final int NULLIF=466;
    public static final int MEMBER=204;
    public static final int YEAR=313;
    public static final int MAX=450;
    public static final int Hex_String_Literal=752;
    public static final int DEFERRED=385;
    public static final int CURSOR_NAME=377;
    public static final int CROSS=116;
    public static final int Oracle_Identifier_Start=770;
    public static final int LENGTH=439;
    public static final int Hangul_Compatibility_Jamo=677;
    public static final int BOOLEAN=93;
    public static final int IN=190;
    public static final int Number=743;
    public static final int REFERENCES=246;
    public static final int PARTITION=237;
    public static final int IS=192;
    public static final int Lao=642;
    public static final int DOUBLE_PRECISION=398;
    public static final int NEXT=462;
    public static final int TIES=568;
    public static final int WITH=310;
    public static final int INITIALLY=428;
    public static final int Asterisk=51;
    public static final int TRANSACTIONS_COMMITTED=570;
    public static final int FUSION=417;
    public static final int IPA_Extensions=621;
    public static final int Dollar_Sign=616;
    public static final int VOLATILE=596;
    public static final int End_Comment=5;
    public static final int Tamil=636;
    public static final int DEFAULT=135;
    public static final int SPECIFIC_NAME=553;
    public static final int Ideographic_Description_Characters=672;
    public static final int Khmer=656;
    public static final int PROCEDURE=241;
    public static final int LOCALTIME=201;
    public static final int WRITE=599;
    public static final int DOMAIN=397;
    public static final int Gurmukhi=633;
    public static final int Unicode_Identifier=778;
    public static final int TOP_LEVEL_COUNT=569;
    public static final int Informix_Identifier_Part=768;
    public static final int BAD=780;
    public static final int MAP=447;
    public static final int IMMEDIATE=178;
    public static final int MINUTE=207;
    public static final int INCLUDING=425;
    public static final int Minus_Sign=54;
    public static final int MOD=456;
    public static final int Less_Or_Equals_Operator=603;
    public static final int EXTERN=407;
    public static final int Character_String_Literal=747;
    public static final int Hexit=43;
    public static final int Variation_Selectors=695;
    public static final int TYPE=581;
    public static final int STDDEV_POP=558;
    public static final int Yi_Syllables=685;
    public static final int BEGIN=88;
    public static final int Alphabetic_Presentation_Forms=693;
    public static final int Supplemental_ArrowsB=720;
    public static final int Supplemental_ArrowsA=718;
    public static final int Hiragana=674;
    public static final int HANDLER=173;
    public static final int STDDEV_SAMP=559;
    public static final int Unicode_Forbidden_Identifier_Character=702;
    public static final int BLOB=92;
    public static final int Braille_Patterns=719;
    public static final int KEY=436;
    public static final int DEFINED=386;
    public static final int Syriac=629;
    public static final int Yijing_Hexagram_Symbols=724;
    public static final int ADA=317;
    public static final int NUMBER=468;
    public static final int COMMITTED=359;
    public static final int TRAILING=289;
    public static final int DEFINER=387;
    public static final int RECURSIVE=245;
    public static final int Mongolian=657;
    public static final int ROLLBACK=254;
    public static final int ABS=314;
    public static final int REAL=244;
    public static final int RETURNED_OCTET_LENGTH=522;
    public static final int Hangul_Jamo=646;
    public static final int MORE=457;
    public static final int OUT=233;
    public static final int Geometric_Shapes=714;
    public static final int READ=505;
    public static final int Kannada=638;
    public static final int WITHIN=311;
    public static final int STYLE=561;
    public static final int CALL=97;
    public static final int SIZE=550;
    public static final int Slash=56;
    public static final int DYNAMIC=144;
    public static final int ATTRIBUTES=325;
    public static final int IDENTITY=177;
    public static final int Signed_Large_Integer=71;
    public static final int EXECUTE=153;
    public static final int OCTETS=470;
    public static final int Spacing_Modifier_Letters=705;
    public static final int ASENSITIVE=82;
    public static final int INOUT=181;
    public static final int TIME=287;
    public static final int Hyphen=148;
    public static final int Miscellaneous_Mathematical_SymbolsA=717;
    public static final int Miscellaneous_Mathematical_SymbolsB=721;
    public static final int SQLEXCEPTION=272;
    public static final int NULLABLE=465;
    public static final int COLUMN=107;
    public static final int Start_Comment=4;
    public static final int INSTANTIABLE=430;
    public static final int Teradata_Identifier_Part=762;
    public static final int DATETIME_INTERVAL_CODE=379;
    public static final int ADD=74;
    public static final int INTEGER=185;
    public static final int Right_Bracket_Trigraph=613;
    public static final int NORMALIZED=463;
    public static final int ROUTINE_NAME=526;
    public static final int TO=288;
    public static final int OVERLAPS=234;
    public static final int Tagbanwa=655;
    public static final int Dingbats=716;
    public static final int RELATIVE=515;
    public static final int USER_DEFINED_TYPE_NAME=591;
    public static final int MIN=455;
    public static final int HOUR=176;
    public static final int CURRENT=126;
    public static final int Ampersand=47;
    public static final int NULLS=467;
    public static final int COMMIT=108;
    public static final int Latin_Extended_Additional=662;
    public static final int SqlServer_Identifier_Part=759;
    public static final int CLOSE=105;
    public static final int DECIMAL=132;
    public static final int BIGINT=90;
    public static final int WHEN=307;
    public static final int CHECKED=346;
    public static final int COVAR_POP=373;
    public static final int COMMAND_FUNCTION_CODE=357;
    public static final int DECLARE=133;
    public static final int PARAMETER_MODE=481;
    public static final int ASSIGNMENT=323;
    public static final int Bit_String_Literal=751;
    public static final int BIN=330;
    public static final int BETWEEN=89;
    public static final int FIRST=410;
    public static final int CAST=100;
    public static final int Regular_Identifier=744;
    public static final int PREPARE=239;
    public static final int SIGNED=547;
    public static final int Supplemental_Mathematical_Operators=722;
    public static final int Enclosed_CJK_Letters_and_Months=681;
    public static final int Simple_Latin_Lower_Case_Letter=15;
    public static final int SETS=545;
    public static final int DETERMINISTIC=139;
    public static final int VARYING=305;
    public static final int DISPATCH=395;
    public static final int TRIGGER=292;
    public static final int CURRENT_TIME=123;
    public static final int SPECIFICTYPE=270;
    public static final int CASE=99;
    public static final int DEALLOCATE=131;
    public static final int Box_Drawing=712;
    public static final int CASCADE=333;
    public static final int Combining_Diacritical_Symbol_Marks=666;
    public static final int Question_Mark=62;
    public static final int FULL=165;
    public static final int INSERT=184;
    public static final int Armenian=626;
    public static final int PARAMETER=236;
    public static final int ADMIN=318;
    public static final int SYMMETRIC=279;
    public static final int Arabic=628;
    public static final int CLASS_ORIGIN=347;
    public static final int INTERFACES=431;
    public static final int UNIQUE=296;
    public static final int CODE_UNITS=350;
    public static final int VIEW=595;
    public static final int Exclamation=610;
    public static final int SybaseASA_Identifier_Part=756;
    public static final int ROLLUP=255;
    public static final int CONSTRUCTORS=367;
    public static final int OLD=225;
    public static final int RESTART=517;
    public static final int PRIMARY=240;
    public static final int BERNOULLI=329;
    public static final int Tai_Le=659;
    public static final int DEGREE=388;
    public static final int PASCAL=488;
    public static final int NAMES=459;
    public static final int Double_Colon=606;
    public static final int SEQUENCE=541;
    public static final int Unicode_Allowed_Escape_Chracter=731;
    public static final int Right_Bracket=64;
    public static final int Combining_Half_Marks=696;
    public static final int Number_Forms=668;
    public static final int Bopomofo=676;
    public static final int Tagalog=652;
    public static final int CORR=371;
    public static final int DIAGNOSTICS=394;
    public static final int DATETIME_INTERVAL_PRECISION=380;
    public static final int CEILING=336;
    public static final int ORDER=229;
    public static final int OVERLAY=477;
    public static final int TRIGGER_NAME=578;
    public static final int SQL92_Identifier_Part=777;
    public static final int Small_Form_Variants=698;
    public static final int Teradata_Identifier=763;
    public static final int ATTRIBUTE=324;
    public static final int TRANSFORM=575;
    public static final int SQLSTATE=273;
    public static final int FOR=162;
    public static final int HOLD=175;
    public static final int Unicode_Permitted_Identifier_Character=701;
    public static final int AND=78;
    public static final int FOLLOWING=414;
    public static final int SCROLL=260;
    public static final int Hanunoo=653;
    public static final int HexQuad=740;
    public static final int Myanmar=644;
    public static final int CHARACTERS=340;
    public static final int UNDER=584;
    public static final int CONTINUE=113;
    public static final int OBJECT=469;
    public static final int Mathematical_Operators=708;
    public static final int ALL=76;
    public static final int PLACING=495;
    public static final int CURRENT_TIMESTAMP=122;
    public static final int PARTIAL=487;
    public static final int ISOLATION=191;
    public static final int PERCENT_RANK=492;
    public static final int VALUES=302;
    public static final int Bengali=632;
    public static final int DENSE_RANK=389;
    public static final int Digit=12;
    public static final int SIMILAR=267;
    public static final int CORRESPONDING=114;
    public static final int ANY=79;
    public static final int Basic_Latin_Without_Quotes=617;
    public static final int UNNAMED=585;
    public static final int CONDITION_NUMBER=360;
    public static final int Devanagari=631;
    public static final int LOGICAL=442;
    public static final int MESSAGE_OCTET_LENGTH=452;
    public static final int BINARY=91;
    public static final int HexPair=739;
    public static final int ABSOLUTE=315;
    public static final int Comma=53;
    public static final int METHOD=206;
    public static final int TREAT=291;
    public static final int Interbase_Identifier=775;
    public static final int SMALLINT=268;
    public static final int MULTISET=211;
    public static final int Unsigned_Integer=741;
    public static final int Arabic_Presentation_FormsA=694;
    public static final int Arabic_Presentation_FormsB=699;
    public static final int ROW=257;
    public static final int FIXED=411;
    public static final int SERVER_NAME=543;
    public static final int Georgian=645;
    public static final int Oracle_Identifier_Part=771;
    public static final int EXCEPT=152;
    public static final int CREATE=115;
    public static final int Informix_Identifier_Start=767;
    public static final int Equals_Operator=60;
    public static final int Vertical_Bar=67;
    public static final int Less_Than_Operator=59;
    public static final int ELEMENT=146;
    public static final int MATCHED=448;
    public static final int Greater_Or_Equals_Operator=602;
    public static final int Period=55;
    public static final int Specials=725;
    public static final int PIC=494;
    public static final int Underscore=66;
    public static final int PRESERVE=500;
    public static final int COBOL=349;
    public static final int CHARACTERISTICS=339;
    public static final int POWER=498;
    public static final int VALUE=303;
    public static final int Sinhala=640;
    public static final int DEPTH=390;
    public static final int TABLESAMPLE=565;
    public static final int RESTRICT=518;
    public static final int CARDINALITY=332;
    public static final int INTERSECT=186;
    public static final int GENERAL=418;
    public static final int PACKED=479;
    public static final int FETCH=159;
    public static final int PERCENTILE_CONT=490;
    public static final int Cherokee=648;
    public static final int DESCRIBE=138;
    public static final int SEARCH=261;
    public static final int SYSTEM_USER=280;
    public static final int Right_Brace=69;
    public static final int COMMAND_FUNCTION=358;
    public static final int TRIGGER_CATALOG=577;
    public static final int CONSTRUCTOR=112;
    public static final int ALTER=77;
    public static final int SQL_Special_Character=13;
    public static final int Enclosed_Alphanumerics=669;
    public static final int CLOB=104;
    public static final int TABLE=282;
    public static final int VARCHAR=304;
    public static final int SOURCE=551;
    public static final int SESSION_USER=265;
    public static final int Quote=48;
    public static final int COLLATION_CATALOG=351;
    public static final int SUM=564;
    public static final int Right_Arrow=605;
    public static final int CURRENT_PATH=120;
    public static final int CHAR_LENGTH=345;
    public static final int Space=44;
    public static final int DESCRIPTOR=392;
    public static final int National_Character_String_Literal=748;
    public static final int MAXVALUE=449;
    public static final int LEFT=198;
    public static final int ZONE=600;
    public static final int Gujarati=634;
    public static final int AUTO=326;
    public static final int COLLATE=106;
    public static final int OUTER=231;
    public static final int DEFERRABLE=384;
    public static final int WHENEVER=306;
    public static final int GRANTED=421;
    public static final int MERGE=205;
    public static final int UNCOMMITTED=583;
    public static final int SHORT=546;
    public static final int HAVING=174;
    public static final int MODULE=209;
    public static final int KIND=437;
    public static final int PLI=496;
    public static final int INSTANCE=429;
    public static final int DERIVED=391;
    public static final int ROUTINE=528;
    public static final int LARGE=195;
    public static final int PUBLIC=503;
    public static final int SELF=539;
    public static final int AT_Sign=611;
    public static final int RETURNED_LENGTH=521;
    public static final int NEW=217;
    public static final int CHAR=102;
    public static final int High_Surrogates=688;
    public static final int DAY=130;
    public static final int EQUALS=401;
    public static final int HIERARCHY=422;
    public static final int Escape_Character=738;
    public static final int RELEASE=249;
    public static final int TRIGGER_SCHEMA=579;
    public static final int Teradata_Identifier_Start=761;
    public static final int SYSTEM=281;
    public static final int ALWAYS=320;
    public static final int CONNECT=110;
    public static final int Extended_Control_Characters=733;
    public static final int CURRENT_COLLATION=376;
    public static final int INTERSECTION=432;
    public static final int KEY_MEMBER=434;
    public static final int Not_Equals_Operator=601;
    public static final int DOUBLE=142;
    public static final int EACH=145;
    public static final int Unified_Canadian_Aboriginal=649;
    public static final int SELECT=263;
    public static final int INTO=188;
    public static final int Right_Paren=50;
    public static final int SECOND=262;
    public static final int Cyrillic_Supplementary=625;
    public static final int MUMPS=458;
    public static final int WITHOUT=312;
    public static final int NULL=222;
    public static final int PAD=480;
    public static final int DELETE=136;
    public static final int NUMERIC=223;
    public static final int CHARACTER_SET_SCHEMA=344;
    public static final int Greek_and_Coptic=623;
    public static final int SCALE=531;
    public static final int ORDINALITY=475;
    public static final int SPECIFIC=271;
    public static final int Limbu=658;
    public static final int SQLSTATE_TYPE=554;
    public static final int FALSE=158;
    public static final int OUTPUT=232;
    public static final int Unicode_Character_String_Literal=749;
    public static final int CURRENT_DATE=118;
    public static final int Phonetic_Extensions=661;
    public static final int Unicode_Forbidden_Identifier_Characters=703;
    public static final int WHERE=308;
    public static final int DEC=134;
    public static final int VAR_SAMP=594;
    public static final int SCOPE_SCHEMA=536;
    public static final int REGR_COUNT=508;
    public static final int Left_Bracket=63;
    public static final int White_Space=779;
    public static final int NOTFOUND=219;
    public static final int SQL92_Identifier_Start=776;
    public static final int SPACE=552;
    public static final int Unicode_Identifier_Part=735;
    public static final int USAGE=588;
    public static final int MESSAGE_TEXT=453;
    public static final int LOCATOR=445;
    public static final int SOME=269;
    public static final int Bopomofo_Extended=679;
    public static final int CJK_Unified_Ideographs_ExtensionA=683;
    public static final int SCOPE_CATALOG=534;
    public static final int SUBMULTISET=278;
    public static final int EXCLUDE=404;
    public static final int Hebrew=627;
    public static final int Circumflex=65;
    public static final int Latin1_Supplement=618;
    public static final int Unsigned_Large_Integer=70;
    public static final int GRANT=170;
    public static final int CONVERT=370;
    public static final int DCL=382;
    public static final int Runic=651;
    public static final int SQRT=555;
    public static final int TRANSLATION=290;
    public static final int ROW_NUMBER=530;
    public static final int REF=248;
    public static final int SUBSTRING=563;
    public static final int Kangxi_Radicals=671;
    public static final int Control_Characters=704;
    public static final int PICTURE=493;
    public static final int INCREMENT=426;
    public static final int REPEATABLE=516;
    public static final int Interbase_Identifier_Start=773;
    public static final int Double_Period=607;
    public static final int FOUND=416;
    public static final int LEN=440;
    public static final int WINDOW=309;
    public static final int GLOBAL=169;
    public static final int Kanbun=678;
    public static final int SQL_Terminal_Character=10;
    public static final int CURRENT_TRANSFORM_GROUP_FOR_TYPE=124;
    public static final int COLLATION_SCHEMA=353;
    public static final int CONTAINS=369;
    public static final int CJK_Unified_Ideographs=684;
    public static final int DEREF=137;
    public static final int CONDITION=361;
    public static final int NOT=220;
    public static final int EOF=-1;
    public static final int FOREIGN=161;
    public static final int PARAMETER_ORDINAL_POSITION=483;
    public static final int PRIVILEGES=502;
    public static final int Halfwidth_and_Fullwidth_Forms=700;
    public static final int ACTION=316;
    public static final int MONTH=210;
    public static final int CHARACTER=101;
    public static final int STATEMENT=556;
    public static final int Basic_Latin=728;
    public static final int NESTING=461;
    public static final int USING=301;
    public static final int GOTO=419;
    public static final int Hash_Sign=615;
    public static final int Cyrillic=624;
    public static final int Regex_Escaped_Unicode=730;
    public static final int Double_Quote=45;
    public static final int ELSE=147;
    public static final int REGR_INTERCEPT=509;
    public static final int SEPARATE=540;
    public static final int BREADTH=331;
    public static final int PARAMETER_SPECIFIC_CATALOG=484;
    public static final int MySQL_Identifier=766;
    public static final int LANGUAGE=194;
    public static final int LEVEL=441;
    public static final int INSENSITIVE=183;
    public static final int NONE=218;
    public static final int TRIM=580;
    public static final int COLUMN_NAME=356;
    public static final int Katakana=675;
    public static final int Katakana_Phonetic_Extensions=680;
    public static final int END=150;
    public static final int CHAIN=338;
    public static final int CJK_Symbols_and_Punctuation=673;
    public static final int OPTION=472;
    public static final int PERCENTILE_DISC=491;
    public static final int TRANSFORMS=574;
    public static final int Tibetan=643;
    public static final int ONLY=226;
    public static final int ASSERTION=322;
    public static final int INPUT=182;
    public static final int Unicode_6_Digit_Escape_Value=737;
    public static final int ASYMMETRIC=83;
    public static final int Unicode_Escape_Value=734;
    public static final int Line_Comment=6;
    public static final int Character_Set_Name=745;
    public static final int STRUCTURE=560;
    public static final int NCLOB=216;
    public static final int POSITION=497;
    public static final int FREE=163;
    public static final int RANK=504;
    public static final int THEN=283;
    public static final int Unicode_4_Digit_Escape_Value=736;
    public static final int COLLATION=354;
    public static final int ROUTINE_SCHEMA=527;
    public static final int NORMALIZE=464;
    public static final int EXISTS=155;
    public static final int Bit=750;
    public static final int STATE=557;
    public static final int DISCONNECT=140;
    public static final int SCHEMA_NAME=532;
    public static final int CHARACTER_LENGTH=341;
    public static final int PARAMETER_SPECIFIC_NAME=485;
    public static final int Low_Surrogates=690;
    public static final int SET=266;
    public static final int RESULT=519;
    public static final int UNION=295;
    public static final int SybaseASA_Identifier_Start=755;
    public static final int SqlServer_Identifier_Start=758;
    public static final int USER_DEFINED_TYPE_CATALOG=589;
    public static final int SCHEMA=533;
    public static final int UNSIGNED=586;
    public static final int DROP=143;
    public static final int Block_Elements=713;
    public static final int READS=243;
    public static final int SybaseASA_Identifier=757;
    public static final int Informix_PostgreSQL_Identifier=769;
    public static final int START=276;
    public static final int TRANSACTIONS_ROLLED_BACK=571;
    public static final int Miscellaneous_Symbols_and_Arrows=723;
    public static final int Oracle_Identifier=772;
    public static final int REVOKE=252;
    public static final int Malayalam=639;
    public static final int PRIOR=501;
    public static final int SIGN=548;
    public static final int EXTERNAL=157;
    public static final int ALLOCATE=75;
    public static final int ROUTINE_CATALOG=525;
    public static final int CONSTRAINT_NAME=365;
    public static final int CONSTRAINT_SCHEMA=366;
    public static final int Plus_Sign=52;
    public static final int REGR_R2=510;
    public static final int Extended_Latin_Without_Quotes=727;
    public static final int TABLE_NAME=566;
    public static final int SQL=275;
    public static final int CONNECTION=109;
    public static final int Left_Bracket_Trigraph=612;
    public static final int NAME=460;
    public static final int INVOKER=433;
    public static final int SQLWARNING=274;
    public static final int EXP=406;
    public static final int SAVEPOINT=258;
    public static final int CURRENT_DEFAULT_TRANSFORM_GROUP=119;
    public static final int BOTH=94;
    public static final int IMPLEMENTATION=424;
    public static final int LAST=438;
    public static final int WORK=598;
    public static final int LINE_COMMENT=8;
    public static final int LOCAL=202;
    public static final int MESSAGE_LENGTH=451;
    public static final int EXCLUDING=405;
    public static final int Full_Unicode=732;
    public static final int Oriya=635;
    public static final int DISPLAY=396;
    public static final int VAR_POP=593;
    public static final int Simple_Latin_Upper_Case_Letter=14;
    public static final int CHECK=103;
    public static final int FROM=164;
    public static final int DISTINCT=141;
    public static final int TEMPORARY=567;
    public static final int CUME_DIST=375;
    public static final int UNNEST=298;
    public static final int SqlServer_Identifier=760;
    public static final int SIMPLE=549;
    public static final int Optical_Character_Recognition=711;
    public static final int OVER=235;
    public static final int FORTRAN=415;
    public static final int INNER=180;
    public static final int GENERATED=167;
    public static final int AUTHORIZATION=87;
    public static final int TRANSACTION_ACTIVE=572;
    public static final int CYCLE=128;
    public static final int UPDATE=299;
    public static final int SQL_Language_Character=9;
    public static final int LOCALTIMESTAMP=200;
    public static final int INTERVAL=187;
    public static final int Latin_ExtendedA=619;
    public static final int OCTET_LENGTH=471;
    public static final int RETURNED_SQLSTATE=523;
    public static final int Latin_ExtendedB=620;
    public static final int MINVALUE=454;
    public static final int UNKNOWN=297;
    public static final int SCOPE=259;
    public static final int Greek_Extended=663;
    public static final int High_Private_Use_Surrogates=689;
    public static final int EXTRACT=408;
    public static final int SECURITY=538;
    public static final int LATERAL=196;
    public static final int INDICATOR=179;
    public static final int CJK_Compatibility=682;
    public static final int Ethiopic=647;
    public static final int RANGE=242;
    public static final int Signed_Integer=742;
    public static final int BEFORE=328;
    public static final int END_EXEC=149;
    public static final int AFTER=319;
    public static final int Semicolon=58;
    public static final int TRUE=293;
    public static final int JOIN=193;
    public static final int REFERENCING=247;
    public static final int DEFAULTS=383;
    public static final int OPEN=228;
    public static final int Interbase_Identifier_Part=774;
    public static final int CJK_Radicals_Supplement=670;
    public static final int KEY_TYPE=435;
    public static final int WIDTH_BUCKET=597;
    public static final int ORDERING=474;
    public static final int Left_Brace=68;
    public static final int Control_Pictures=710;
    public static final int CEIL=337;
    public static final int PARAMETER_SPECIFIC_SCHEMA=486;
    public static final int CJK_Compatibility_Ideographs=692;
    public static final int DESC=393;
    public static final int DATE=129;
    public static final int DATA=378;

    // delegates
    // delegators

    public sql2003Lexer() {;} 
    public sql2003Lexer(CharStream input) {
        this(input, new RecognizerSharedState());
    }
    public sql2003Lexer(CharStream input, RecognizerSharedState state) {
        super(input,state);

    }
    public String getGrammarFileName() { return "/Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g"; }

    // $ANTLR start "Start_Comment"
    public final void mStart_Comment() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:74:17: ( '/*' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:74:19: '/*'
            {
            match("/*"); 


            }

        }
        finally {
        }
    }
    // $ANTLR end "Start_Comment"

    // $ANTLR start "End_Comment"
    public final void mEnd_Comment() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:77:17: ( '*/' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:77:19: '*/'
            {
            match("*/"); 


            }

        }
        finally {
        }
    }
    // $ANTLR end "End_Comment"

    // $ANTLR start "Line_Comment"
    public final void mLine_Comment() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:80:17: ( '//' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:80:19: '//'
            {
            match("//"); 


            }

        }
        finally {
        }
    }
    // $ANTLR end "Line_Comment"

    // $ANTLR start "COMMENT"
    public final void mCOMMENT() throws RecognitionException {
        try {
            int _type = COMMENT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:83:5: ( ( Start_Comment ( options {greedy=false; } : . )* End_Comment )+ )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:83:9: ( Start_Comment ( options {greedy=false; } : . )* End_Comment )+
            {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:83:9: ( Start_Comment ( options {greedy=false; } : . )* End_Comment )+
            int cnt2=0;
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0=='/') ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:83:13: Start_Comment ( options {greedy=false; } : . )* End_Comment
            	    {
            	    mStart_Comment(); 
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:83:27: ( options {greedy=false; } : . )*
            	    loop1:
            	    do {
            	        int alt1=2;
            	        int LA1_0 = input.LA(1);

            	        if ( (LA1_0=='*') ) {
            	            int LA1_1 = input.LA(2);

            	            if ( (LA1_1=='/') ) {
            	                alt1=2;
            	            }
            	            else if ( ((LA1_1>='\u0000' && LA1_1<='.')||(LA1_1>='0' && LA1_1<='\uFFFF')) ) {
            	                alt1=1;
            	            }


            	        }
            	        else if ( ((LA1_0>='\u0000' && LA1_0<=')')||(LA1_0>='+' && LA1_0<='\uFFFF')) ) {
            	            alt1=1;
            	        }


            	        switch (alt1) {
            	    	case 1 :
            	    	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:83:55: .
            	    	    {
            	    	    matchAny(); 

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop1;
            	        }
            	    } while (true);

            	    mEnd_Comment(); 

            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        throw eee;
                }
                cnt2++;
            } while (true);


            //			_channel=HIDDEN;
            			SKIP();
            		

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "COMMENT"

    // $ANTLR start "LINE_COMMENT"
    public final void mLINE_COMMENT() throws RecognitionException {
        try {
            int _type = LINE_COMMENT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:91:5: ( ( ( Line_Comment | '--' ) (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )+ )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:91:8: ( ( Line_Comment | '--' ) (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )+
            {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:91:8: ( ( Line_Comment | '--' ) (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )+
            int cnt6=0;
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0=='-'||LA6_0=='/') ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:91:12: ( Line_Comment | '--' ) (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
            	    {
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:91:12: ( Line_Comment | '--' )
            	    int alt3=2;
            	    int LA3_0 = input.LA(1);

            	    if ( (LA3_0=='/') ) {
            	        alt3=1;
            	    }
            	    else if ( (LA3_0=='-') ) {
            	        alt3=2;
            	    }
            	    else {
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 3, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt3) {
            	        case 1 :
            	            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:91:14: Line_Comment
            	            {
            	            mLine_Comment(); 

            	            }
            	            break;
            	        case 2 :
            	            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:91:29: '--'
            	            {
            	            match("--"); 


            	            }
            	            break;

            	    }

            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:91:36: (~ ( '\\n' | '\\r' ) )*
            	    loop4:
            	    do {
            	        int alt4=2;
            	        int LA4_0 = input.LA(1);

            	        if ( ((LA4_0>='\u0000' && LA4_0<='\t')||(LA4_0>='\u000B' && LA4_0<='\f')||(LA4_0>='\u000E' && LA4_0<='\uFFFF')) ) {
            	            alt4=1;
            	        }


            	        switch (alt4) {
            	    	case 1 :
            	    	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:91:36: ~ ( '\\n' | '\\r' )
            	    	    {
            	    	    if ( (input.LA(1)>='\u0000' && input.LA(1)<='\t')||(input.LA(1)>='\u000B' && input.LA(1)<='\f')||(input.LA(1)>='\u000E' && input.LA(1)<='\uFFFF') ) {
            	    	        input.consume();

            	    	    }
            	    	    else {
            	    	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	    	        recover(mse);
            	    	        throw mse;}


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop4;
            	        }
            	    } while (true);

            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:91:50: ( '\\r' )?
            	    int alt5=2;
            	    int LA5_0 = input.LA(1);

            	    if ( (LA5_0=='\r') ) {
            	        alt5=1;
            	    }
            	    switch (alt5) {
            	        case 1 :
            	            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:91:50: '\\r'
            	            {
            	            match('\r'); 

            	            }
            	            break;

            	    }

            	    match('\n'); 

            	    }
            	    break;

            	default :
            	    if ( cnt6 >= 1 ) break loop6;
                        EarlyExitException eee =
                            new EarlyExitException(6, input);
                        throw eee;
                }
                cnt6++;
            } while (true);


            //			_channel=HIDDEN;
            			SKIP();
            		

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "LINE_COMMENT"

    // $ANTLR start "SQL_Terminal_Character"
    public final void mSQL_Terminal_Character() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:100:25: ( SQL_Language_Character )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:100:28: SQL_Language_Character
            {
            mSQL_Language_Character(); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "SQL_Terminal_Character"

    // $ANTLR start "SQL_Language_Character"
    public final void mSQL_Language_Character() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:103:25: ( Simple_Latin_Letter | Digit | SQL_Special_Character )
            int alt7=3;
            switch ( input.LA(1) ) {
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
                {
                alt7=1;
                }
                break;
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
                {
                alt7=2;
                }
                break;
            case ' ':
            case '\"':
            case '%':
            case '&':
            case '\'':
            case '(':
            case ')':
            case '*':
            case '+':
            case ',':
            case '-':
            case '.':
            case '/':
            case ':':
            case ';':
            case '<':
            case '=':
            case '>':
            case '?':
            case '[':
            case ']':
            case '^':
            case '_':
            case '{':
            case '|':
            case '}':
                {
                alt7=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }

            switch (alt7) {
                case 1 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:103:28: Simple_Latin_Letter
                    {
                    mSimple_Latin_Letter(); 

                    }
                    break;
                case 2 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:103:50: Digit
                    {
                    mDigit(); 

                    }
                    break;
                case 3 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:103:58: SQL_Special_Character
                    {
                    mSQL_Special_Character(); 

                    }
                    break;

            }
        }
        finally {
        }
    }
    // $ANTLR end "SQL_Language_Character"

    // $ANTLR start "Simple_Latin_Letter"
    public final void mSimple_Latin_Letter() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:106:22: ( Simple_Latin_Upper_Case_Letter | Simple_Latin_Lower_Case_Letter )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( (input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "Simple_Latin_Letter"

    // $ANTLR start "A"
    public final void mA() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:109:2: ( 'A' | 'a' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='A'||input.LA(1)=='a' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "A"

    // $ANTLR start "B"
    public final void mB() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:112:2: ( 'B' | 'b' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='B'||input.LA(1)=='b' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "B"

    // $ANTLR start "C"
    public final void mC() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:115:2: ( 'C' | 'c' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='C'||input.LA(1)=='c' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "C"

    // $ANTLR start "D"
    public final void mD() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:118:2: ( 'D' | 'd' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='D'||input.LA(1)=='d' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "D"

    // $ANTLR start "E"
    public final void mE() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:121:2: ( 'E' | 'e' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='E'||input.LA(1)=='e' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "E"

    // $ANTLR start "F"
    public final void mF() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:124:2: ( 'F' | 'f' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='F'||input.LA(1)=='f' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "F"

    // $ANTLR start "G"
    public final void mG() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:127:2: ( 'G' | 'g' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='G'||input.LA(1)=='g' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "G"

    // $ANTLR start "H"
    public final void mH() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:130:2: ( 'H' | 'h' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='H'||input.LA(1)=='h' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "H"

    // $ANTLR start "I"
    public final void mI() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:133:2: ( 'I' | 'i' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='I'||input.LA(1)=='i' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "I"

    // $ANTLR start "J"
    public final void mJ() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:136:2: ( 'J' | 'j' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='J'||input.LA(1)=='j' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "J"

    // $ANTLR start "K"
    public final void mK() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:139:2: ( 'K' | 'k' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='K'||input.LA(1)=='k' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "K"

    // $ANTLR start "L"
    public final void mL() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:142:2: ( 'L' | 'l' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='L'||input.LA(1)=='l' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "L"

    // $ANTLR start "M"
    public final void mM() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:145:2: ( 'M' | 'm' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='M'||input.LA(1)=='m' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "M"

    // $ANTLR start "N"
    public final void mN() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:148:2: ( 'N' | 'n' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='N'||input.LA(1)=='n' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "N"

    // $ANTLR start "O"
    public final void mO() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:151:2: ( 'O' | 'o' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='O'||input.LA(1)=='o' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "O"

    // $ANTLR start "P"
    public final void mP() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:154:2: ( 'P' | 'p' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='P'||input.LA(1)=='p' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "P"

    // $ANTLR start "Q"
    public final void mQ() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:157:2: ( 'Q' | 'q' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='Q'||input.LA(1)=='q' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "Q"

    // $ANTLR start "R"
    public final void mR() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:160:2: ( 'R' | 'r' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='R'||input.LA(1)=='r' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "R"

    // $ANTLR start "S"
    public final void mS() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:163:2: ( 'S' | 's' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='S'||input.LA(1)=='s' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "S"

    // $ANTLR start "T"
    public final void mT() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:166:2: ( 'T' | 't' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='T'||input.LA(1)=='t' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "T"

    // $ANTLR start "U"
    public final void mU() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:169:2: ( 'U' | 'u' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='U'||input.LA(1)=='u' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "U"

    // $ANTLR start "V"
    public final void mV() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:172:2: ( 'V' | 'v' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='V'||input.LA(1)=='v' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "V"

    // $ANTLR start "W"
    public final void mW() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:175:2: ( 'W' | 'w' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='W'||input.LA(1)=='w' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "W"

    // $ANTLR start "X"
    public final void mX() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:178:2: ( 'X' | 'x' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='X'||input.LA(1)=='x' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "X"

    // $ANTLR start "Y"
    public final void mY() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:181:2: ( 'Y' | 'y' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='Y'||input.LA(1)=='y' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "Y"

    // $ANTLR start "Z"
    public final void mZ() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:184:2: ( 'Z' | 'z' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='Z'||input.LA(1)=='z' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "Z"

    // $ANTLR start "Simple_Latin_Upper_Case_Letter"
    public final void mSimple_Latin_Upper_Case_Letter() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:187:32: ( 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( (input.LA(1)>='A' && input.LA(1)<='Z') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "Simple_Latin_Upper_Case_Letter"

    // $ANTLR start "Simple_Latin_Lower_Case_Letter"
    public final void mSimple_Latin_Lower_Case_Letter() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:192:32: ( 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( (input.LA(1)>='a' && input.LA(1)<='z') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "Simple_Latin_Lower_Case_Letter"

    // $ANTLR start "Digit"
    public final void mDigit() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:197:8: ( '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( (input.LA(1)>='0' && input.LA(1)<='9') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "Digit"

    // $ANTLR start "OctalDigit"
    public final void mOctalDigit() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:200:13: ( '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( (input.LA(1)>='0' && input.LA(1)<='7') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "OctalDigit"

    // $ANTLR start "Hexit"
    public final void mHexit() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:203:9: ( Digit | A | B | C | D | E | F )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( (input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "Hexit"

    // $ANTLR start "SQL_Special_Character"
    public final void mSQL_Special_Character() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:206:23: ( Space | Double_Quote | Percent | Ampersand | Quote | Left_Paren | Right_Paren | Asterisk | Plus_Sign | Comma | Minus_Sign | Period | Slash | Colon | Semicolon | Less_Than_Operator | Equals_Operator | Greater_Than_Operator | Question_Mark | Left_Bracket | Right_Bracket | Circumflex | Underscore | Vertical_Bar | Left_Brace | Right_Brace )
            int alt8=26;
            switch ( input.LA(1) ) {
            case ' ':
                {
                alt8=1;
                }
                break;
            case '\"':
                {
                alt8=2;
                }
                break;
            case '%':
                {
                alt8=3;
                }
                break;
            case '&':
                {
                alt8=4;
                }
                break;
            case '\'':
                {
                alt8=5;
                }
                break;
            case '(':
                {
                alt8=6;
                }
                break;
            case ')':
                {
                alt8=7;
                }
                break;
            case '*':
                {
                alt8=8;
                }
                break;
            case '+':
                {
                alt8=9;
                }
                break;
            case ',':
                {
                alt8=10;
                }
                break;
            case '-':
                {
                alt8=11;
                }
                break;
            case '.':
                {
                alt8=12;
                }
                break;
            case '/':
                {
                alt8=13;
                }
                break;
            case ':':
                {
                alt8=14;
                }
                break;
            case ';':
                {
                alt8=15;
                }
                break;
            case '<':
                {
                alt8=16;
                }
                break;
            case '=':
                {
                alt8=17;
                }
                break;
            case '>':
                {
                alt8=18;
                }
                break;
            case '?':
                {
                alt8=19;
                }
                break;
            case '[':
                {
                alt8=20;
                }
                break;
            case ']':
                {
                alt8=21;
                }
                break;
            case '^':
                {
                alt8=22;
                }
                break;
            case '_':
                {
                alt8=23;
                }
                break;
            case '|':
                {
                alt8=24;
                }
                break;
            case '{':
                {
                alt8=25;
                }
                break;
            case '}':
                {
                alt8=26;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }

            switch (alt8) {
                case 1 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:207:3: Space
                    {
                    mSpace(); 

                    }
                    break;
                case 2 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:208:4: Double_Quote
                    {
                    mDouble_Quote(); 

                    }
                    break;
                case 3 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:209:4: Percent
                    {
                    mPercent(); 

                    }
                    break;
                case 4 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:210:4: Ampersand
                    {
                    mAmpersand(); 

                    }
                    break;
                case 5 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:211:4: Quote
                    {
                    mQuote(); 

                    }
                    break;
                case 6 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:212:4: Left_Paren
                    {
                    mLeft_Paren(); 

                    }
                    break;
                case 7 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:213:4: Right_Paren
                    {
                    mRight_Paren(); 

                    }
                    break;
                case 8 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:214:4: Asterisk
                    {
                    mAsterisk(); 

                    }
                    break;
                case 9 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:215:4: Plus_Sign
                    {
                    mPlus_Sign(); 

                    }
                    break;
                case 10 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:216:4: Comma
                    {
                    mComma(); 

                    }
                    break;
                case 11 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:217:4: Minus_Sign
                    {
                    mMinus_Sign(); 

                    }
                    break;
                case 12 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:218:4: Period
                    {
                    mPeriod(); 

                    }
                    break;
                case 13 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:219:4: Slash
                    {
                    mSlash(); 

                    }
                    break;
                case 14 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:220:4: Colon
                    {
                    mColon(); 

                    }
                    break;
                case 15 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:221:4: Semicolon
                    {
                    mSemicolon(); 

                    }
                    break;
                case 16 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:222:4: Less_Than_Operator
                    {
                    mLess_Than_Operator(); 

                    }
                    break;
                case 17 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:223:4: Equals_Operator
                    {
                    mEquals_Operator(); 

                    }
                    break;
                case 18 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:224:4: Greater_Than_Operator
                    {
                    mGreater_Than_Operator(); 

                    }
                    break;
                case 19 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:225:4: Question_Mark
                    {
                    mQuestion_Mark(); 

                    }
                    break;
                case 20 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:226:4: Left_Bracket
                    {
                    mLeft_Bracket(); 

                    }
                    break;
                case 21 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:227:4: Right_Bracket
                    {
                    mRight_Bracket(); 

                    }
                    break;
                case 22 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:228:4: Circumflex
                    {
                    mCircumflex(); 

                    }
                    break;
                case 23 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:229:4: Underscore
                    {
                    mUnderscore(); 

                    }
                    break;
                case 24 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:230:4: Vertical_Bar
                    {
                    mVertical_Bar(); 

                    }
                    break;
                case 25 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:231:4: Left_Brace
                    {
                    mLeft_Brace(); 

                    }
                    break;
                case 26 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:232:4: Right_Brace
                    {
                    mRight_Brace(); 

                    }
                    break;

            }
        }
        finally {
        }
    }
    // $ANTLR end "SQL_Special_Character"

    // $ANTLR start "Unsigned_Large_Integer"
    public final void mUnsigned_Large_Integer() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:237:2: ()
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:237:4: 
            {
            }

        }
        finally {
        }
    }
    // $ANTLR end "Unsigned_Large_Integer"

    // $ANTLR start "Signed_Large_Integer"
    public final void mSigned_Large_Integer() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:240:2: ()
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:240:4: 
            {
            }

        }
        finally {
        }
    }
    // $ANTLR end "Signed_Large_Integer"

    // $ANTLR start "Unsigned_Float"
    public final void mUnsigned_Float() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:243:2: ()
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:243:4: 
            {
            }

        }
        finally {
        }
    }
    // $ANTLR end "Unsigned_Float"

    // $ANTLR start "Signed_Float"
    public final void mSigned_Float() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:246:2: ()
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:246:4: 
            {
            }

        }
        finally {
        }
    }
    // $ANTLR end "Signed_Float"

    // $ANTLR start "ADD"
    public final void mADD() throws RecognitionException {
        try {
            int _type = ADD;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:252:30: ( A D D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:252:34: A D D
            {
            mA(); 
            mD(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ADD"

    // $ANTLR start "ALLOCATE"
    public final void mALLOCATE() throws RecognitionException {
        try {
            int _type = ALLOCATE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:253:30: ( A L L O C A T E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:253:34: A L L O C A T E
            {
            mA(); 
            mL(); 
            mL(); 
            mO(); 
            mC(); 
            mA(); 
            mT(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ALLOCATE"

    // $ANTLR start "ALL"
    public final void mALL() throws RecognitionException {
        try {
            int _type = ALL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:254:30: ( A L L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:254:34: A L L
            {
            mA(); 
            mL(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ALL"

    // $ANTLR start "ALTER"
    public final void mALTER() throws RecognitionException {
        try {
            int _type = ALTER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:255:30: ( A L T E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:255:34: A L T E R
            {
            mA(); 
            mL(); 
            mT(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ALTER"

    // $ANTLR start "AND"
    public final void mAND() throws RecognitionException {
        try {
            int _type = AND;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:256:30: ( A N D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:256:34: A N D
            {
            mA(); 
            mN(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "AND"

    // $ANTLR start "ANY"
    public final void mANY() throws RecognitionException {
        try {
            int _type = ANY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:257:30: ( A N Y )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:257:34: A N Y
            {
            mA(); 
            mN(); 
            mY(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ANY"

    // $ANTLR start "ARE"
    public final void mARE() throws RecognitionException {
        try {
            int _type = ARE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:258:30: ( A R E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:258:34: A R E
            {
            mA(); 
            mR(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ARE"

    // $ANTLR start "ARRAY"
    public final void mARRAY() throws RecognitionException {
        try {
            int _type = ARRAY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:259:30: ( A R R A Y )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:259:34: A R R A Y
            {
            mA(); 
            mR(); 
            mR(); 
            mA(); 
            mY(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ARRAY"

    // $ANTLR start "ASENSITIVE"
    public final void mASENSITIVE() throws RecognitionException {
        try {
            int _type = ASENSITIVE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:260:30: ( A S E N S I T I V E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:260:34: A S E N S I T I V E
            {
            mA(); 
            mS(); 
            mE(); 
            mN(); 
            mS(); 
            mI(); 
            mT(); 
            mI(); 
            mV(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ASENSITIVE"

    // $ANTLR start "ASYMMETRIC"
    public final void mASYMMETRIC() throws RecognitionException {
        try {
            int _type = ASYMMETRIC;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:261:30: ( A S Y M M E T R I C )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:261:34: A S Y M M E T R I C
            {
            mA(); 
            mS(); 
            mY(); 
            mM(); 
            mM(); 
            mE(); 
            mT(); 
            mR(); 
            mI(); 
            mC(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ASYMMETRIC"

    // $ANTLR start "AS"
    public final void mAS() throws RecognitionException {
        try {
            int _type = AS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:262:30: ( A S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:262:34: A S
            {
            mA(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "AS"

    // $ANTLR start "ATOMIC"
    public final void mATOMIC() throws RecognitionException {
        try {
            int _type = ATOMIC;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:263:30: ( A T O M I C )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:263:34: A T O M I C
            {
            mA(); 
            mT(); 
            mO(); 
            mM(); 
            mI(); 
            mC(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ATOMIC"

    // $ANTLR start "AT"
    public final void mAT() throws RecognitionException {
        try {
            int _type = AT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:264:30: ( A T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:264:34: A T
            {
            mA(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "AT"

    // $ANTLR start "AUTHORIZATION"
    public final void mAUTHORIZATION() throws RecognitionException {
        try {
            int _type = AUTHORIZATION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:265:30: ( A U T H O R I Z A T I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:265:34: A U T H O R I Z A T I O N
            {
            mA(); 
            mU(); 
            mT(); 
            mH(); 
            mO(); 
            mR(); 
            mI(); 
            mZ(); 
            mA(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "AUTHORIZATION"

    // $ANTLR start "BEGIN"
    public final void mBEGIN() throws RecognitionException {
        try {
            int _type = BEGIN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:266:30: ( B E G I N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:266:34: B E G I N
            {
            mB(); 
            mE(); 
            mG(); 
            mI(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "BEGIN"

    // $ANTLR start "BETWEEN"
    public final void mBETWEEN() throws RecognitionException {
        try {
            int _type = BETWEEN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:267:30: ( B E T W E E N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:267:34: B E T W E E N
            {
            mB(); 
            mE(); 
            mT(); 
            mW(); 
            mE(); 
            mE(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "BETWEEN"

    // $ANTLR start "BIGINT"
    public final void mBIGINT() throws RecognitionException {
        try {
            int _type = BIGINT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:268:30: ( B I G I N T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:268:34: B I G I N T
            {
            mB(); 
            mI(); 
            mG(); 
            mI(); 
            mN(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "BIGINT"

    // $ANTLR start "BINARY"
    public final void mBINARY() throws RecognitionException {
        try {
            int _type = BINARY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:269:30: ( B I N A R Y )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:269:34: B I N A R Y
            {
            mB(); 
            mI(); 
            mN(); 
            mA(); 
            mR(); 
            mY(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "BINARY"

    // $ANTLR start "BLOB"
    public final void mBLOB() throws RecognitionException {
        try {
            int _type = BLOB;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:270:30: ( B L O B )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:270:34: B L O B
            {
            mB(); 
            mL(); 
            mO(); 
            mB(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "BLOB"

    // $ANTLR start "BOOLEAN"
    public final void mBOOLEAN() throws RecognitionException {
        try {
            int _type = BOOLEAN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:271:30: ( B O O L E A N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:271:34: B O O L E A N
            {
            mB(); 
            mO(); 
            mO(); 
            mL(); 
            mE(); 
            mA(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "BOOLEAN"

    // $ANTLR start "BOTH"
    public final void mBOTH() throws RecognitionException {
        try {
            int _type = BOTH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:272:30: ( B O T H )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:272:34: B O T H
            {
            mB(); 
            mO(); 
            mT(); 
            mH(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "BOTH"

    // $ANTLR start "BY"
    public final void mBY() throws RecognitionException {
        try {
            int _type = BY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:273:30: ( B Y )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:273:34: B Y
            {
            mB(); 
            mY(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "BY"

    // $ANTLR start "CALLED"
    public final void mCALLED() throws RecognitionException {
        try {
            int _type = CALLED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:274:30: ( C A L L E D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:274:34: C A L L E D
            {
            mC(); 
            mA(); 
            mL(); 
            mL(); 
            mE(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CALLED"

    // $ANTLR start "CALL"
    public final void mCALL() throws RecognitionException {
        try {
            int _type = CALL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:275:30: ( C A L L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:275:34: C A L L
            {
            mC(); 
            mA(); 
            mL(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CALL"

    // $ANTLR start "CASCADED"
    public final void mCASCADED() throws RecognitionException {
        try {
            int _type = CASCADED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:276:30: ( C A S C A D E D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:276:34: C A S C A D E D
            {
            mC(); 
            mA(); 
            mS(); 
            mC(); 
            mA(); 
            mD(); 
            mE(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CASCADED"

    // $ANTLR start "CASE"
    public final void mCASE() throws RecognitionException {
        try {
            int _type = CASE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:277:30: ( C A S E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:277:34: C A S E
            {
            mC(); 
            mA(); 
            mS(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CASE"

    // $ANTLR start "CAST"
    public final void mCAST() throws RecognitionException {
        try {
            int _type = CAST;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:278:30: ( C A S T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:278:34: C A S T
            {
            mC(); 
            mA(); 
            mS(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CAST"

    // $ANTLR start "CHARACTER"
    public final void mCHARACTER() throws RecognitionException {
        try {
            int _type = CHARACTER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:279:30: ( C H A R A C T E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:279:34: C H A R A C T E R
            {
            mC(); 
            mH(); 
            mA(); 
            mR(); 
            mA(); 
            mC(); 
            mT(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CHARACTER"

    // $ANTLR start "CHAR"
    public final void mCHAR() throws RecognitionException {
        try {
            int _type = CHAR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:280:30: ( C H A R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:280:34: C H A R
            {
            mC(); 
            mH(); 
            mA(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CHAR"

    // $ANTLR start "CHECK"
    public final void mCHECK() throws RecognitionException {
        try {
            int _type = CHECK;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:281:30: ( C H E C K )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:281:34: C H E C K
            {
            mC(); 
            mH(); 
            mE(); 
            mC(); 
            mK(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CHECK"

    // $ANTLR start "CLOB"
    public final void mCLOB() throws RecognitionException {
        try {
            int _type = CLOB;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:282:30: ( C L O B )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:282:34: C L O B
            {
            mC(); 
            mL(); 
            mO(); 
            mB(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CLOB"

    // $ANTLR start "CLOSE"
    public final void mCLOSE() throws RecognitionException {
        try {
            int _type = CLOSE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:283:30: ( C L O S E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:283:34: C L O S E
            {
            mC(); 
            mL(); 
            mO(); 
            mS(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CLOSE"

    // $ANTLR start "COLLATE"
    public final void mCOLLATE() throws RecognitionException {
        try {
            int _type = COLLATE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:284:30: ( C O L L A T E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:284:34: C O L L A T E
            {
            mC(); 
            mO(); 
            mL(); 
            mL(); 
            mA(); 
            mT(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "COLLATE"

    // $ANTLR start "COLUMN"
    public final void mCOLUMN() throws RecognitionException {
        try {
            int _type = COLUMN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:285:30: ( C O L U M N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:285:34: C O L U M N
            {
            mC(); 
            mO(); 
            mL(); 
            mU(); 
            mM(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "COLUMN"

    // $ANTLR start "COMMIT"
    public final void mCOMMIT() throws RecognitionException {
        try {
            int _type = COMMIT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:286:30: ( C O M M I T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:286:34: C O M M I T
            {
            mC(); 
            mO(); 
            mM(); 
            mM(); 
            mI(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "COMMIT"

    // $ANTLR start "CONNECTION"
    public final void mCONNECTION() throws RecognitionException {
        try {
            int _type = CONNECTION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:287:30: ( C O N N E C T I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:287:34: C O N N E C T I O N
            {
            mC(); 
            mO(); 
            mN(); 
            mN(); 
            mE(); 
            mC(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CONNECTION"

    // $ANTLR start "CONNECT"
    public final void mCONNECT() throws RecognitionException {
        try {
            int _type = CONNECT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:288:30: ( C O N N E C T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:288:34: C O N N E C T
            {
            mC(); 
            mO(); 
            mN(); 
            mN(); 
            mE(); 
            mC(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CONNECT"

    // $ANTLR start "CONSTRAINT"
    public final void mCONSTRAINT() throws RecognitionException {
        try {
            int _type = CONSTRAINT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:289:30: ( C O N S T R A I N T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:289:34: C O N S T R A I N T
            {
            mC(); 
            mO(); 
            mN(); 
            mS(); 
            mT(); 
            mR(); 
            mA(); 
            mI(); 
            mN(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CONSTRAINT"

    // $ANTLR start "CONSTRUCTOR"
    public final void mCONSTRUCTOR() throws RecognitionException {
        try {
            int _type = CONSTRUCTOR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:290:30: ( C O N S T R U C T O R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:290:34: C O N S T R U C T O R
            {
            mC(); 
            mO(); 
            mN(); 
            mS(); 
            mT(); 
            mR(); 
            mU(); 
            mC(); 
            mT(); 
            mO(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CONSTRUCTOR"

    // $ANTLR start "CONTINUE"
    public final void mCONTINUE() throws RecognitionException {
        try {
            int _type = CONTINUE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:291:30: ( C O N T I N U E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:291:34: C O N T I N U E
            {
            mC(); 
            mO(); 
            mN(); 
            mT(); 
            mI(); 
            mN(); 
            mU(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CONTINUE"

    // $ANTLR start "CORRESPONDING"
    public final void mCORRESPONDING() throws RecognitionException {
        try {
            int _type = CORRESPONDING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:292:30: ( C O R R E S P O N D I N G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:292:34: C O R R E S P O N D I N G
            {
            mC(); 
            mO(); 
            mR(); 
            mR(); 
            mE(); 
            mS(); 
            mP(); 
            mO(); 
            mN(); 
            mD(); 
            mI(); 
            mN(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CORRESPONDING"

    // $ANTLR start "CREATE"
    public final void mCREATE() throws RecognitionException {
        try {
            int _type = CREATE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:293:30: ( C R E A T E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:293:34: C R E A T E
            {
            mC(); 
            mR(); 
            mE(); 
            mA(); 
            mT(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CREATE"

    // $ANTLR start "CROSS"
    public final void mCROSS() throws RecognitionException {
        try {
            int _type = CROSS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:294:30: ( C R O S S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:294:34: C R O S S
            {
            mC(); 
            mR(); 
            mO(); 
            mS(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CROSS"

    // $ANTLR start "CUBE"
    public final void mCUBE() throws RecognitionException {
        try {
            int _type = CUBE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:295:30: ( C U B E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:295:34: C U B E
            {
            mC(); 
            mU(); 
            mB(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CUBE"

    // $ANTLR start "CURRENT_DATE"
    public final void mCURRENT_DATE() throws RecognitionException {
        try {
            int _type = CURRENT_DATE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:296:30: ( C U R R E N T Underscore D A T E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:296:34: C U R R E N T Underscore D A T E
            {
            mC(); 
            mU(); 
            mR(); 
            mR(); 
            mE(); 
            mN(); 
            mT(); 
            mUnderscore(); 
            mD(); 
            mA(); 
            mT(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CURRENT_DATE"

    // $ANTLR start "CURRENT_DEFAULT_TRANSFORM_GROUP"
    public final void mCURRENT_DEFAULT_TRANSFORM_GROUP() throws RecognitionException {
        try {
            int _type = CURRENT_DEFAULT_TRANSFORM_GROUP;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:298:30: ( C U R R E N T Underscore D E F A U L T Underscore T R A N S F O R M Underscore G R O U P )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:298:34: C U R R E N T Underscore D E F A U L T Underscore T R A N S F O R M Underscore G R O U P
            {
            mC(); 
            mU(); 
            mR(); 
            mR(); 
            mE(); 
            mN(); 
            mT(); 
            mUnderscore(); 
            mD(); 
            mE(); 
            mF(); 
            mA(); 
            mU(); 
            mL(); 
            mT(); 
            mUnderscore(); 
            mT(); 
            mR(); 
            mA(); 
            mN(); 
            mS(); 
            mF(); 
            mO(); 
            mR(); 
            mM(); 
            mUnderscore(); 
            mG(); 
            mR(); 
            mO(); 
            mU(); 
            mP(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CURRENT_DEFAULT_TRANSFORM_GROUP"

    // $ANTLR start "CURRENT_PATH"
    public final void mCURRENT_PATH() throws RecognitionException {
        try {
            int _type = CURRENT_PATH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:300:30: ( C U R R E N T Underscore P A T H )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:300:34: C U R R E N T Underscore P A T H
            {
            mC(); 
            mU(); 
            mR(); 
            mR(); 
            mE(); 
            mN(); 
            mT(); 
            mUnderscore(); 
            mP(); 
            mA(); 
            mT(); 
            mH(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CURRENT_PATH"

    // $ANTLR start "CURRENT_ROLE"
    public final void mCURRENT_ROLE() throws RecognitionException {
        try {
            int _type = CURRENT_ROLE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:301:30: ( C U R R E N T Underscore R O L E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:301:34: C U R R E N T Underscore R O L E
            {
            mC(); 
            mU(); 
            mR(); 
            mR(); 
            mE(); 
            mN(); 
            mT(); 
            mUnderscore(); 
            mR(); 
            mO(); 
            mL(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CURRENT_ROLE"

    // $ANTLR start "CURRENT_TIMESTAMP"
    public final void mCURRENT_TIMESTAMP() throws RecognitionException {
        try {
            int _type = CURRENT_TIMESTAMP;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:302:30: ( C U R R E N T Underscore T I M E S T A M P )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:302:34: C U R R E N T Underscore T I M E S T A M P
            {
            mC(); 
            mU(); 
            mR(); 
            mR(); 
            mE(); 
            mN(); 
            mT(); 
            mUnderscore(); 
            mT(); 
            mI(); 
            mM(); 
            mE(); 
            mS(); 
            mT(); 
            mA(); 
            mM(); 
            mP(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CURRENT_TIMESTAMP"

    // $ANTLR start "CURRENT_TIME"
    public final void mCURRENT_TIME() throws RecognitionException {
        try {
            int _type = CURRENT_TIME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:303:30: ( C U R R E N T Underscore T I M E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:303:34: C U R R E N T Underscore T I M E
            {
            mC(); 
            mU(); 
            mR(); 
            mR(); 
            mE(); 
            mN(); 
            mT(); 
            mUnderscore(); 
            mT(); 
            mI(); 
            mM(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CURRENT_TIME"

    // $ANTLR start "CURRENT_TRANSFORM_GROUP_FOR_TYPE"
    public final void mCURRENT_TRANSFORM_GROUP_FOR_TYPE() throws RecognitionException {
        try {
            int _type = CURRENT_TRANSFORM_GROUP_FOR_TYPE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:305:30: ( C U R R E N T Underscore T R A N S F O R M Underscore G R O U P Underscore F O R Underscore T Y P E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:305:34: C U R R E N T Underscore T R A N S F O R M Underscore G R O U P Underscore F O R Underscore T Y P E
            {
            mC(); 
            mU(); 
            mR(); 
            mR(); 
            mE(); 
            mN(); 
            mT(); 
            mUnderscore(); 
            mT(); 
            mR(); 
            mA(); 
            mN(); 
            mS(); 
            mF(); 
            mO(); 
            mR(); 
            mM(); 
            mUnderscore(); 
            mG(); 
            mR(); 
            mO(); 
            mU(); 
            mP(); 
            mUnderscore(); 
            mF(); 
            mO(); 
            mR(); 
            mUnderscore(); 
            mT(); 
            mY(); 
            mP(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CURRENT_TRANSFORM_GROUP_FOR_TYPE"

    // $ANTLR start "CURRENT_USER"
    public final void mCURRENT_USER() throws RecognitionException {
        try {
            int _type = CURRENT_USER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:307:30: ( C U R R E N T Underscore U S E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:307:34: C U R R E N T Underscore U S E R
            {
            mC(); 
            mU(); 
            mR(); 
            mR(); 
            mE(); 
            mN(); 
            mT(); 
            mUnderscore(); 
            mU(); 
            mS(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CURRENT_USER"

    // $ANTLR start "CURRENT"
    public final void mCURRENT() throws RecognitionException {
        try {
            int _type = CURRENT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:308:30: ( C U R R E N T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:308:34: C U R R E N T
            {
            mC(); 
            mU(); 
            mR(); 
            mR(); 
            mE(); 
            mN(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CURRENT"

    // $ANTLR start "CURSOR"
    public final void mCURSOR() throws RecognitionException {
        try {
            int _type = CURSOR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:309:30: ( C U R S O R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:309:34: C U R S O R
            {
            mC(); 
            mU(); 
            mR(); 
            mS(); 
            mO(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CURSOR"

    // $ANTLR start "CYCLE"
    public final void mCYCLE() throws RecognitionException {
        try {
            int _type = CYCLE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:310:30: ( C Y C L E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:310:34: C Y C L E
            {
            mC(); 
            mY(); 
            mC(); 
            mL(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CYCLE"

    // $ANTLR start "DATE"
    public final void mDATE() throws RecognitionException {
        try {
            int _type = DATE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:311:30: ( D A T E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:311:34: D A T E
            {
            mD(); 
            mA(); 
            mT(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DATE"

    // $ANTLR start "DAY"
    public final void mDAY() throws RecognitionException {
        try {
            int _type = DAY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:312:30: ( D A Y )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:312:34: D A Y
            {
            mD(); 
            mA(); 
            mY(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DAY"

    // $ANTLR start "DEALLOCATE"
    public final void mDEALLOCATE() throws RecognitionException {
        try {
            int _type = DEALLOCATE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:313:30: ( D E A L L O C A T E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:313:34: D E A L L O C A T E
            {
            mD(); 
            mE(); 
            mA(); 
            mL(); 
            mL(); 
            mO(); 
            mC(); 
            mA(); 
            mT(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DEALLOCATE"

    // $ANTLR start "DECIMAL"
    public final void mDECIMAL() throws RecognitionException {
        try {
            int _type = DECIMAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:314:30: ( D E C I M A L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:314:34: D E C I M A L
            {
            mD(); 
            mE(); 
            mC(); 
            mI(); 
            mM(); 
            mA(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DECIMAL"

    // $ANTLR start "DECLARE"
    public final void mDECLARE() throws RecognitionException {
        try {
            int _type = DECLARE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:315:30: ( D E C L A R E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:315:34: D E C L A R E
            {
            mD(); 
            mE(); 
            mC(); 
            mL(); 
            mA(); 
            mR(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DECLARE"

    // $ANTLR start "DEC"
    public final void mDEC() throws RecognitionException {
        try {
            int _type = DEC;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:316:30: ( D E C )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:316:34: D E C
            {
            mD(); 
            mE(); 
            mC(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DEC"

    // $ANTLR start "DEFAULT"
    public final void mDEFAULT() throws RecognitionException {
        try {
            int _type = DEFAULT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:317:30: ( D E F A U L T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:317:34: D E F A U L T
            {
            mD(); 
            mE(); 
            mF(); 
            mA(); 
            mU(); 
            mL(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DEFAULT"

    // $ANTLR start "DELETE"
    public final void mDELETE() throws RecognitionException {
        try {
            int _type = DELETE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:318:30: ( D E L E T E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:318:34: D E L E T E
            {
            mD(); 
            mE(); 
            mL(); 
            mE(); 
            mT(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DELETE"

    // $ANTLR start "DEREF"
    public final void mDEREF() throws RecognitionException {
        try {
            int _type = DEREF;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:319:30: ( D E R E F )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:319:34: D E R E F
            {
            mD(); 
            mE(); 
            mR(); 
            mE(); 
            mF(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DEREF"

    // $ANTLR start "DESCRIBE"
    public final void mDESCRIBE() throws RecognitionException {
        try {
            int _type = DESCRIBE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:320:30: ( D E S C R I B E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:320:34: D E S C R I B E
            {
            mD(); 
            mE(); 
            mS(); 
            mC(); 
            mR(); 
            mI(); 
            mB(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DESCRIBE"

    // $ANTLR start "DETERMINISTIC"
    public final void mDETERMINISTIC() throws RecognitionException {
        try {
            int _type = DETERMINISTIC;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:321:30: ( D E T E R M I N I S T I C )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:321:34: D E T E R M I N I S T I C
            {
            mD(); 
            mE(); 
            mT(); 
            mE(); 
            mR(); 
            mM(); 
            mI(); 
            mN(); 
            mI(); 
            mS(); 
            mT(); 
            mI(); 
            mC(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DETERMINISTIC"

    // $ANTLR start "DISCONNECT"
    public final void mDISCONNECT() throws RecognitionException {
        try {
            int _type = DISCONNECT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:322:30: ( D I S C O N N E C T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:322:34: D I S C O N N E C T
            {
            mD(); 
            mI(); 
            mS(); 
            mC(); 
            mO(); 
            mN(); 
            mN(); 
            mE(); 
            mC(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DISCONNECT"

    // $ANTLR start "DISTINCT"
    public final void mDISTINCT() throws RecognitionException {
        try {
            int _type = DISTINCT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:323:30: ( D I S T I N C T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:323:34: D I S T I N C T
            {
            mD(); 
            mI(); 
            mS(); 
            mT(); 
            mI(); 
            mN(); 
            mC(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DISTINCT"

    // $ANTLR start "DOUBLE"
    public final void mDOUBLE() throws RecognitionException {
        try {
            int _type = DOUBLE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:324:30: ( D O U B L E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:324:34: D O U B L E
            {
            mD(); 
            mO(); 
            mU(); 
            mB(); 
            mL(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DOUBLE"

    // $ANTLR start "DROP"
    public final void mDROP() throws RecognitionException {
        try {
            int _type = DROP;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:325:30: ( D R O P )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:325:34: D R O P
            {
            mD(); 
            mR(); 
            mO(); 
            mP(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DROP"

    // $ANTLR start "DYNAMIC"
    public final void mDYNAMIC() throws RecognitionException {
        try {
            int _type = DYNAMIC;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:326:30: ( D Y N A M I C )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:326:34: D Y N A M I C
            {
            mD(); 
            mY(); 
            mN(); 
            mA(); 
            mM(); 
            mI(); 
            mC(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DYNAMIC"

    // $ANTLR start "EACH"
    public final void mEACH() throws RecognitionException {
        try {
            int _type = EACH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:327:30: ( E A C H )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:327:34: E A C H
            {
            mE(); 
            mA(); 
            mC(); 
            mH(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "EACH"

    // $ANTLR start "ELEMENT"
    public final void mELEMENT() throws RecognitionException {
        try {
            int _type = ELEMENT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:328:30: ( E L E M E N T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:328:34: E L E M E N T
            {
            mE(); 
            mL(); 
            mE(); 
            mM(); 
            mE(); 
            mN(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ELEMENT"

    // $ANTLR start "ELSE"
    public final void mELSE() throws RecognitionException {
        try {
            int _type = ELSE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:329:30: ( E L S E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:329:34: E L S E
            {
            mE(); 
            mL(); 
            mS(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ELSE"

    // $ANTLR start "END_EXEC"
    public final void mEND_EXEC() throws RecognitionException {
        try {
            int _type = END_EXEC;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:330:30: ( E N D Hyphen E X E C )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:330:34: E N D Hyphen E X E C
            {
            mE(); 
            mN(); 
            mD(); 
            mHyphen(); 
            mE(); 
            mX(); 
            mE(); 
            mC(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "END_EXEC"

    // $ANTLR start "END"
    public final void mEND() throws RecognitionException {
        try {
            int _type = END;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:331:30: ( E N D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:331:34: E N D
            {
            mE(); 
            mN(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "END"

    // $ANTLR start "ESCAPE"
    public final void mESCAPE() throws RecognitionException {
        try {
            int _type = ESCAPE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:332:30: ( E S C A P E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:332:34: E S C A P E
            {
            mE(); 
            mS(); 
            mC(); 
            mA(); 
            mP(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ESCAPE"

    // $ANTLR start "EXCEPT"
    public final void mEXCEPT() throws RecognitionException {
        try {
            int _type = EXCEPT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:333:30: ( E X C E P T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:333:34: E X C E P T
            {
            mE(); 
            mX(); 
            mC(); 
            mE(); 
            mP(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "EXCEPT"

    // $ANTLR start "EXECUTE"
    public final void mEXECUTE() throws RecognitionException {
        try {
            int _type = EXECUTE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:334:30: ( E X E C U T E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:334:34: E X E C U T E
            {
            mE(); 
            mX(); 
            mE(); 
            mC(); 
            mU(); 
            mT(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "EXECUTE"

    // $ANTLR start "EXEC"
    public final void mEXEC() throws RecognitionException {
        try {
            int _type = EXEC;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:335:30: ( E X E C )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:335:34: E X E C
            {
            mE(); 
            mX(); 
            mE(); 
            mC(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "EXEC"

    // $ANTLR start "EXISTS"
    public final void mEXISTS() throws RecognitionException {
        try {
            int _type = EXISTS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:336:30: ( E X I S T S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:336:34: E X I S T S
            {
            mE(); 
            mX(); 
            mI(); 
            mS(); 
            mT(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "EXISTS"

    // $ANTLR start "EXIT"
    public final void mEXIT() throws RecognitionException {
        try {
            int _type = EXIT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:337:30: ( E X I T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:337:34: E X I T
            {
            mE(); 
            mX(); 
            mI(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "EXIT"

    // $ANTLR start "EXTERNAL"
    public final void mEXTERNAL() throws RecognitionException {
        try {
            int _type = EXTERNAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:338:30: ( E X T E R N A L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:338:34: E X T E R N A L
            {
            mE(); 
            mX(); 
            mT(); 
            mE(); 
            mR(); 
            mN(); 
            mA(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "EXTERNAL"

    // $ANTLR start "FALSE"
    public final void mFALSE() throws RecognitionException {
        try {
            int _type = FALSE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:339:30: ( F A L S E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:339:34: F A L S E
            {
            mF(); 
            mA(); 
            mL(); 
            mS(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "FALSE"

    // $ANTLR start "FETCH"
    public final void mFETCH() throws RecognitionException {
        try {
            int _type = FETCH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:340:30: ( F E T C H )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:340:34: F E T C H
            {
            mF(); 
            mE(); 
            mT(); 
            mC(); 
            mH(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "FETCH"

    // $ANTLR start "FILTER"
    public final void mFILTER() throws RecognitionException {
        try {
            int _type = FILTER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:341:30: ( F I L T E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:341:34: F I L T E R
            {
            mF(); 
            mI(); 
            mL(); 
            mT(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "FILTER"

    // $ANTLR start "FOREIGN"
    public final void mFOREIGN() throws RecognitionException {
        try {
            int _type = FOREIGN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:342:30: ( F O R E I G N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:342:34: F O R E I G N
            {
            mF(); 
            mO(); 
            mR(); 
            mE(); 
            mI(); 
            mG(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "FOREIGN"

    // $ANTLR start "FOR"
    public final void mFOR() throws RecognitionException {
        try {
            int _type = FOR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:343:30: ( F O R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:343:34: F O R
            {
            mF(); 
            mO(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "FOR"

    // $ANTLR start "FREE"
    public final void mFREE() throws RecognitionException {
        try {
            int _type = FREE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:344:30: ( F R E E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:344:34: F R E E
            {
            mF(); 
            mR(); 
            mE(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "FREE"

    // $ANTLR start "FROM"
    public final void mFROM() throws RecognitionException {
        try {
            int _type = FROM;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:345:30: ( F R O M )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:345:34: F R O M
            {
            mF(); 
            mR(); 
            mO(); 
            mM(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "FROM"

    // $ANTLR start "FULL"
    public final void mFULL() throws RecognitionException {
        try {
            int _type = FULL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:346:30: ( F U L L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:346:34: F U L L
            {
            mF(); 
            mU(); 
            mL(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "FULL"

    // $ANTLR start "FUNCTION"
    public final void mFUNCTION() throws RecognitionException {
        try {
            int _type = FUNCTION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:347:30: ( F U N C T I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:347:34: F U N C T I O N
            {
            mF(); 
            mU(); 
            mN(); 
            mC(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "FUNCTION"

    // $ANTLR start "GENERATED"
    public final void mGENERATED() throws RecognitionException {
        try {
            int _type = GENERATED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:348:30: ( G E N E R A T E D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:348:34: G E N E R A T E D
            {
            mG(); 
            mE(); 
            mN(); 
            mE(); 
            mR(); 
            mA(); 
            mT(); 
            mE(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "GENERATED"

    // $ANTLR start "GET"
    public final void mGET() throws RecognitionException {
        try {
            int _type = GET;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:349:30: ( G E T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:349:34: G E T
            {
            mG(); 
            mE(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "GET"

    // $ANTLR start "GLOBAL"
    public final void mGLOBAL() throws RecognitionException {
        try {
            int _type = GLOBAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:350:30: ( G L O B A L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:350:34: G L O B A L
            {
            mG(); 
            mL(); 
            mO(); 
            mB(); 
            mA(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "GLOBAL"

    // $ANTLR start "GRANT"
    public final void mGRANT() throws RecognitionException {
        try {
            int _type = GRANT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:351:30: ( G R A N T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:351:34: G R A N T
            {
            mG(); 
            mR(); 
            mA(); 
            mN(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "GRANT"

    // $ANTLR start "GROUPING"
    public final void mGROUPING() throws RecognitionException {
        try {
            int _type = GROUPING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:352:30: ( G R O U P I N G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:352:34: G R O U P I N G
            {
            mG(); 
            mR(); 
            mO(); 
            mU(); 
            mP(); 
            mI(); 
            mN(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "GROUPING"

    // $ANTLR start "GROUP"
    public final void mGROUP() throws RecognitionException {
        try {
            int _type = GROUP;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:353:30: ( G R O U P )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:353:34: G R O U P
            {
            mG(); 
            mR(); 
            mO(); 
            mU(); 
            mP(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "GROUP"

    // $ANTLR start "HANDLER"
    public final void mHANDLER() throws RecognitionException {
        try {
            int _type = HANDLER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:354:30: ( H A N D L E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:354:34: H A N D L E R
            {
            mH(); 
            mA(); 
            mN(); 
            mD(); 
            mL(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "HANDLER"

    // $ANTLR start "HAVING"
    public final void mHAVING() throws RecognitionException {
        try {
            int _type = HAVING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:355:30: ( H A V I N G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:355:34: H A V I N G
            {
            mH(); 
            mA(); 
            mV(); 
            mI(); 
            mN(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "HAVING"

    // $ANTLR start "HOLD"
    public final void mHOLD() throws RecognitionException {
        try {
            int _type = HOLD;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:356:30: ( H O L D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:356:34: H O L D
            {
            mH(); 
            mO(); 
            mL(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "HOLD"

    // $ANTLR start "HOUR"
    public final void mHOUR() throws RecognitionException {
        try {
            int _type = HOUR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:357:30: ( H O U R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:357:34: H O U R
            {
            mH(); 
            mO(); 
            mU(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "HOUR"

    // $ANTLR start "IDENTITY"
    public final void mIDENTITY() throws RecognitionException {
        try {
            int _type = IDENTITY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:358:30: ( I D E N T I T Y )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:358:34: I D E N T I T Y
            {
            mI(); 
            mD(); 
            mE(); 
            mN(); 
            mT(); 
            mI(); 
            mT(); 
            mY(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "IDENTITY"

    // $ANTLR start "IMMEDIATE"
    public final void mIMMEDIATE() throws RecognitionException {
        try {
            int _type = IMMEDIATE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:359:30: ( I M M E D I A T E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:359:34: I M M E D I A T E
            {
            mI(); 
            mM(); 
            mM(); 
            mE(); 
            mD(); 
            mI(); 
            mA(); 
            mT(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "IMMEDIATE"

    // $ANTLR start "INDICATOR"
    public final void mINDICATOR() throws RecognitionException {
        try {
            int _type = INDICATOR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:360:30: ( I N D I C A T O R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:360:34: I N D I C A T O R
            {
            mI(); 
            mN(); 
            mD(); 
            mI(); 
            mC(); 
            mA(); 
            mT(); 
            mO(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "INDICATOR"

    // $ANTLR start "INNER"
    public final void mINNER() throws RecognitionException {
        try {
            int _type = INNER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:361:30: ( I N N E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:361:34: I N N E R
            {
            mI(); 
            mN(); 
            mN(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "INNER"

    // $ANTLR start "INOUT"
    public final void mINOUT() throws RecognitionException {
        try {
            int _type = INOUT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:362:30: ( I N O U T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:362:34: I N O U T
            {
            mI(); 
            mN(); 
            mO(); 
            mU(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "INOUT"

    // $ANTLR start "INPUT"
    public final void mINPUT() throws RecognitionException {
        try {
            int _type = INPUT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:363:30: ( I N P U T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:363:34: I N P U T
            {
            mI(); 
            mN(); 
            mP(); 
            mU(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "INPUT"

    // $ANTLR start "INSENSITIVE"
    public final void mINSENSITIVE() throws RecognitionException {
        try {
            int _type = INSENSITIVE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:364:30: ( I N S E N S I T I V E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:364:34: I N S E N S I T I V E
            {
            mI(); 
            mN(); 
            mS(); 
            mE(); 
            mN(); 
            mS(); 
            mI(); 
            mT(); 
            mI(); 
            mV(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "INSENSITIVE"

    // $ANTLR start "INSERT"
    public final void mINSERT() throws RecognitionException {
        try {
            int _type = INSERT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:365:30: ( I N S E R T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:365:34: I N S E R T
            {
            mI(); 
            mN(); 
            mS(); 
            mE(); 
            mR(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "INSERT"

    // $ANTLR start "INTEGER"
    public final void mINTEGER() throws RecognitionException {
        try {
            int _type = INTEGER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:366:30: ( I N T E G E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:366:34: I N T E G E R
            {
            mI(); 
            mN(); 
            mT(); 
            mE(); 
            mG(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "INTEGER"

    // $ANTLR start "INTERSECT"
    public final void mINTERSECT() throws RecognitionException {
        try {
            int _type = INTERSECT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:367:30: ( I N T E R S E C T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:367:34: I N T E R S E C T
            {
            mI(); 
            mN(); 
            mT(); 
            mE(); 
            mR(); 
            mS(); 
            mE(); 
            mC(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "INTERSECT"

    // $ANTLR start "INTERVAL"
    public final void mINTERVAL() throws RecognitionException {
        try {
            int _type = INTERVAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:368:30: ( I N T E R V A L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:368:34: I N T E R V A L
            {
            mI(); 
            mN(); 
            mT(); 
            mE(); 
            mR(); 
            mV(); 
            mA(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "INTERVAL"

    // $ANTLR start "INTO"
    public final void mINTO() throws RecognitionException {
        try {
            int _type = INTO;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:369:30: ( I N T O )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:369:34: I N T O
            {
            mI(); 
            mN(); 
            mT(); 
            mO(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "INTO"

    // $ANTLR start "INT"
    public final void mINT() throws RecognitionException {
        try {
            int _type = INT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:370:30: ( I N T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:370:34: I N T
            {
            mI(); 
            mN(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "INT"

    // $ANTLR start "IN"
    public final void mIN() throws RecognitionException {
        try {
            int _type = IN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:371:30: ( I N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:371:34: I N
            {
            mI(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "IN"

    // $ANTLR start "ISOLATION"
    public final void mISOLATION() throws RecognitionException {
        try {
            int _type = ISOLATION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:372:30: ( I S O L A T I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:372:34: I S O L A T I O N
            {
            mI(); 
            mS(); 
            mO(); 
            mL(); 
            mA(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ISOLATION"

    // $ANTLR start "IS"
    public final void mIS() throws RecognitionException {
        try {
            int _type = IS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:373:30: ( I S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:373:34: I S
            {
            mI(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "IS"

    // $ANTLR start "JOIN"
    public final void mJOIN() throws RecognitionException {
        try {
            int _type = JOIN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:374:30: ( J O I N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:374:34: J O I N
            {
            mJ(); 
            mO(); 
            mI(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "JOIN"

    // $ANTLR start "LANGUAGE"
    public final void mLANGUAGE() throws RecognitionException {
        try {
            int _type = LANGUAGE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:375:30: ( L A N G U A G E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:375:34: L A N G U A G E
            {
            mL(); 
            mA(); 
            mN(); 
            mG(); 
            mU(); 
            mA(); 
            mG(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "LANGUAGE"

    // $ANTLR start "LARGE"
    public final void mLARGE() throws RecognitionException {
        try {
            int _type = LARGE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:376:30: ( L A R G E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:376:34: L A R G E
            {
            mL(); 
            mA(); 
            mR(); 
            mG(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "LARGE"

    // $ANTLR start "LATERAL"
    public final void mLATERAL() throws RecognitionException {
        try {
            int _type = LATERAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:377:30: ( L A T E R A L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:377:34: L A T E R A L
            {
            mL(); 
            mA(); 
            mT(); 
            mE(); 
            mR(); 
            mA(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "LATERAL"

    // $ANTLR start "LEADING"
    public final void mLEADING() throws RecognitionException {
        try {
            int _type = LEADING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:378:30: ( L E A D I N G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:378:34: L E A D I N G
            {
            mL(); 
            mE(); 
            mA(); 
            mD(); 
            mI(); 
            mN(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "LEADING"

    // $ANTLR start "LEFT"
    public final void mLEFT() throws RecognitionException {
        try {
            int _type = LEFT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:379:30: ( L E F T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:379:34: L E F T
            {
            mL(); 
            mE(); 
            mF(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "LEFT"

    // $ANTLR start "LIKE"
    public final void mLIKE() throws RecognitionException {
        try {
            int _type = LIKE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:380:30: ( L I K E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:380:34: L I K E
            {
            mL(); 
            mI(); 
            mK(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "LIKE"

    // $ANTLR start "LOCALTIMESTAMP"
    public final void mLOCALTIMESTAMP() throws RecognitionException {
        try {
            int _type = LOCALTIMESTAMP;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:381:30: ( L O C A L T I M E S T A M P )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:381:34: L O C A L T I M E S T A M P
            {
            mL(); 
            mO(); 
            mC(); 
            mA(); 
            mL(); 
            mT(); 
            mI(); 
            mM(); 
            mE(); 
            mS(); 
            mT(); 
            mA(); 
            mM(); 
            mP(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "LOCALTIMESTAMP"

    // $ANTLR start "LOCALTIME"
    public final void mLOCALTIME() throws RecognitionException {
        try {
            int _type = LOCALTIME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:382:30: ( L O C A L T I M E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:382:34: L O C A L T I M E
            {
            mL(); 
            mO(); 
            mC(); 
            mA(); 
            mL(); 
            mT(); 
            mI(); 
            mM(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "LOCALTIME"

    // $ANTLR start "LOCAL"
    public final void mLOCAL() throws RecognitionException {
        try {
            int _type = LOCAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:383:30: ( L O C A L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:383:34: L O C A L
            {
            mL(); 
            mO(); 
            mC(); 
            mA(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "LOCAL"

    // $ANTLR start "MATCH"
    public final void mMATCH() throws RecognitionException {
        try {
            int _type = MATCH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:384:30: ( M A T C H )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:384:34: M A T C H
            {
            mM(); 
            mA(); 
            mT(); 
            mC(); 
            mH(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MATCH"

    // $ANTLR start "MEMBER"
    public final void mMEMBER() throws RecognitionException {
        try {
            int _type = MEMBER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:385:30: ( M E M B E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:385:34: M E M B E R
            {
            mM(); 
            mE(); 
            mM(); 
            mB(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MEMBER"

    // $ANTLR start "MERGE"
    public final void mMERGE() throws RecognitionException {
        try {
            int _type = MERGE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:386:30: ( M E R G E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:386:34: M E R G E
            {
            mM(); 
            mE(); 
            mR(); 
            mG(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MERGE"

    // $ANTLR start "METHOD"
    public final void mMETHOD() throws RecognitionException {
        try {
            int _type = METHOD;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:387:30: ( M E T H O D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:387:34: M E T H O D
            {
            mM(); 
            mE(); 
            mT(); 
            mH(); 
            mO(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "METHOD"

    // $ANTLR start "MINUTE"
    public final void mMINUTE() throws RecognitionException {
        try {
            int _type = MINUTE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:388:30: ( M I N U T E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:388:34: M I N U T E
            {
            mM(); 
            mI(); 
            mN(); 
            mU(); 
            mT(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MINUTE"

    // $ANTLR start "MODIFIES"
    public final void mMODIFIES() throws RecognitionException {
        try {
            int _type = MODIFIES;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:389:30: ( M O D I F I E S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:389:34: M O D I F I E S
            {
            mM(); 
            mO(); 
            mD(); 
            mI(); 
            mF(); 
            mI(); 
            mE(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MODIFIES"

    // $ANTLR start "MODULE"
    public final void mMODULE() throws RecognitionException {
        try {
            int _type = MODULE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:390:30: ( M O D U L E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:390:34: M O D U L E
            {
            mM(); 
            mO(); 
            mD(); 
            mU(); 
            mL(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MODULE"

    // $ANTLR start "MONTH"
    public final void mMONTH() throws RecognitionException {
        try {
            int _type = MONTH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:391:30: ( M O N T H )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:391:34: M O N T H
            {
            mM(); 
            mO(); 
            mN(); 
            mT(); 
            mH(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MONTH"

    // $ANTLR start "MULTISET"
    public final void mMULTISET() throws RecognitionException {
        try {
            int _type = MULTISET;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:392:30: ( M U L T I S E T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:392:34: M U L T I S E T
            {
            mM(); 
            mU(); 
            mL(); 
            mT(); 
            mI(); 
            mS(); 
            mE(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MULTISET"

    // $ANTLR start "NATIONAL"
    public final void mNATIONAL() throws RecognitionException {
        try {
            int _type = NATIONAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:393:30: ( N A T I O N A L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:393:34: N A T I O N A L
            {
            mN(); 
            mA(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 
            mA(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NATIONAL"

    // $ANTLR start "NATURAL"
    public final void mNATURAL() throws RecognitionException {
        try {
            int _type = NATURAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:394:30: ( N A T U R A L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:394:34: N A T U R A L
            {
            mN(); 
            mA(); 
            mT(); 
            mU(); 
            mR(); 
            mA(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NATURAL"

    // $ANTLR start "NCHAR_VARYING"
    public final void mNCHAR_VARYING() throws RecognitionException {
        try {
            int _type = NCHAR_VARYING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:395:30: ( N C H A R Underscore V A R Y I N G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:395:34: N C H A R Underscore V A R Y I N G
            {
            mN(); 
            mC(); 
            mH(); 
            mA(); 
            mR(); 
            mUnderscore(); 
            mV(); 
            mA(); 
            mR(); 
            mY(); 
            mI(); 
            mN(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NCHAR_VARYING"

    // $ANTLR start "NCHAR"
    public final void mNCHAR() throws RecognitionException {
        try {
            int _type = NCHAR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:396:30: ( N C H A R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:396:34: N C H A R
            {
            mN(); 
            mC(); 
            mH(); 
            mA(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NCHAR"

    // $ANTLR start "NCLOB"
    public final void mNCLOB() throws RecognitionException {
        try {
            int _type = NCLOB;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:397:30: ( N C L O B )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:397:34: N C L O B
            {
            mN(); 
            mC(); 
            mL(); 
            mO(); 
            mB(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NCLOB"

    // $ANTLR start "NEW"
    public final void mNEW() throws RecognitionException {
        try {
            int _type = NEW;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:398:30: ( N E W )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:398:34: N E W
            {
            mN(); 
            mE(); 
            mW(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NEW"

    // $ANTLR start "NONE"
    public final void mNONE() throws RecognitionException {
        try {
            int _type = NONE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:399:30: ( N O N E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:399:34: N O N E
            {
            mN(); 
            mO(); 
            mN(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NONE"

    // $ANTLR start "NOTFOUND"
    public final void mNOTFOUND() throws RecognitionException {
        try {
            int _type = NOTFOUND;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:400:30: ( N O T F O U N D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:400:34: N O T F O U N D
            {
            mN(); 
            mO(); 
            mT(); 
            mF(); 
            mO(); 
            mU(); 
            mN(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NOTFOUND"

    // $ANTLR start "NOT"
    public final void mNOT() throws RecognitionException {
        try {
            int _type = NOT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:401:30: ( N O T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:401:34: N O T
            {
            mN(); 
            mO(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NOT"

    // $ANTLR start "NO"
    public final void mNO() throws RecognitionException {
        try {
            int _type = NO;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:402:30: ( N O )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:402:34: N O
            {
            mN(); 
            mO(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NO"

    // $ANTLR start "NULL"
    public final void mNULL() throws RecognitionException {
        try {
            int _type = NULL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:403:30: ( N U L L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:403:34: N U L L
            {
            mN(); 
            mU(); 
            mL(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NULL"

    // $ANTLR start "NUMERIC"
    public final void mNUMERIC() throws RecognitionException {
        try {
            int _type = NUMERIC;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:404:30: ( N U M E R I C )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:404:34: N U M E R I C
            {
            mN(); 
            mU(); 
            mM(); 
            mE(); 
            mR(); 
            mI(); 
            mC(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NUMERIC"

    // $ANTLR start "OF"
    public final void mOF() throws RecognitionException {
        try {
            int _type = OF;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:405:30: ( O F )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:405:34: O F
            {
            mO(); 
            mF(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "OF"

    // $ANTLR start "OLD"
    public final void mOLD() throws RecognitionException {
        try {
            int _type = OLD;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:406:30: ( O L D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:406:34: O L D
            {
            mO(); 
            mL(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "OLD"

    // $ANTLR start "ONLY"
    public final void mONLY() throws RecognitionException {
        try {
            int _type = ONLY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:407:30: ( O N L Y )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:407:34: O N L Y
            {
            mO(); 
            mN(); 
            mL(); 
            mY(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ONLY"

    // $ANTLR start "ON"
    public final void mON() throws RecognitionException {
        try {
            int _type = ON;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:408:30: ( O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:408:34: O N
            {
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ON"

    // $ANTLR start "OPEN"
    public final void mOPEN() throws RecognitionException {
        try {
            int _type = OPEN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:409:30: ( O P E N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:409:34: O P E N
            {
            mO(); 
            mP(); 
            mE(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "OPEN"

    // $ANTLR start "ORDER"
    public final void mORDER() throws RecognitionException {
        try {
            int _type = ORDER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:410:30: ( O R D E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:410:34: O R D E R
            {
            mO(); 
            mR(); 
            mD(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ORDER"

    // $ANTLR start "OR"
    public final void mOR() throws RecognitionException {
        try {
            int _type = OR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:411:30: ( O R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:411:34: O R
            {
            mO(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "OR"

    // $ANTLR start "OUTER"
    public final void mOUTER() throws RecognitionException {
        try {
            int _type = OUTER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:412:30: ( O U T E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:412:34: O U T E R
            {
            mO(); 
            mU(); 
            mT(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "OUTER"

    // $ANTLR start "OUTPUT"
    public final void mOUTPUT() throws RecognitionException {
        try {
            int _type = OUTPUT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:413:30: ( O U T P U T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:413:34: O U T P U T
            {
            mO(); 
            mU(); 
            mT(); 
            mP(); 
            mU(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "OUTPUT"

    // $ANTLR start "OUT"
    public final void mOUT() throws RecognitionException {
        try {
            int _type = OUT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:414:30: ( O U T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:414:34: O U T
            {
            mO(); 
            mU(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "OUT"

    // $ANTLR start "OVERLAPS"
    public final void mOVERLAPS() throws RecognitionException {
        try {
            int _type = OVERLAPS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:415:30: ( O V E R L A P S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:415:34: O V E R L A P S
            {
            mO(); 
            mV(); 
            mE(); 
            mR(); 
            mL(); 
            mA(); 
            mP(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "OVERLAPS"

    // $ANTLR start "OVER"
    public final void mOVER() throws RecognitionException {
        try {
            int _type = OVER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:416:30: ( O V E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:416:34: O V E R
            {
            mO(); 
            mV(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "OVER"

    // $ANTLR start "PARAMETER"
    public final void mPARAMETER() throws RecognitionException {
        try {
            int _type = PARAMETER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:417:30: ( P A R A M E T E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:417:34: P A R A M E T E R
            {
            mP(); 
            mA(); 
            mR(); 
            mA(); 
            mM(); 
            mE(); 
            mT(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PARAMETER"

    // $ANTLR start "PARTITION"
    public final void mPARTITION() throws RecognitionException {
        try {
            int _type = PARTITION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:418:30: ( P A R T I T I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:418:34: P A R T I T I O N
            {
            mP(); 
            mA(); 
            mR(); 
            mT(); 
            mI(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PARTITION"

    // $ANTLR start "PRECISION"
    public final void mPRECISION() throws RecognitionException {
        try {
            int _type = PRECISION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:419:30: ( P R E C I S I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:419:34: P R E C I S I O N
            {
            mP(); 
            mR(); 
            mE(); 
            mC(); 
            mI(); 
            mS(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PRECISION"

    // $ANTLR start "PREPARE"
    public final void mPREPARE() throws RecognitionException {
        try {
            int _type = PREPARE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:420:30: ( P R E P A R E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:420:34: P R E P A R E
            {
            mP(); 
            mR(); 
            mE(); 
            mP(); 
            mA(); 
            mR(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PREPARE"

    // $ANTLR start "PRIMARY"
    public final void mPRIMARY() throws RecognitionException {
        try {
            int _type = PRIMARY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:421:30: ( P R I M A R Y )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:421:34: P R I M A R Y
            {
            mP(); 
            mR(); 
            mI(); 
            mM(); 
            mA(); 
            mR(); 
            mY(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PRIMARY"

    // $ANTLR start "PROCEDURE"
    public final void mPROCEDURE() throws RecognitionException {
        try {
            int _type = PROCEDURE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:422:30: ( P R O C E D U R E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:422:34: P R O C E D U R E
            {
            mP(); 
            mR(); 
            mO(); 
            mC(); 
            mE(); 
            mD(); 
            mU(); 
            mR(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PROCEDURE"

    // $ANTLR start "RANGE"
    public final void mRANGE() throws RecognitionException {
        try {
            int _type = RANGE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:423:30: ( R A N G E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:423:34: R A N G E
            {
            mR(); 
            mA(); 
            mN(); 
            mG(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "RANGE"

    // $ANTLR start "READS"
    public final void mREADS() throws RecognitionException {
        try {
            int _type = READS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:424:30: ( R E A D S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:424:34: R E A D S
            {
            mR(); 
            mE(); 
            mA(); 
            mD(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "READS"

    // $ANTLR start "REAL"
    public final void mREAL() throws RecognitionException {
        try {
            int _type = REAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:425:30: ( R E A L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:425:34: R E A L
            {
            mR(); 
            mE(); 
            mA(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "REAL"

    // $ANTLR start "RECURSIVE"
    public final void mRECURSIVE() throws RecognitionException {
        try {
            int _type = RECURSIVE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:426:30: ( R E C U R S I V E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:426:34: R E C U R S I V E
            {
            mR(); 
            mE(); 
            mC(); 
            mU(); 
            mR(); 
            mS(); 
            mI(); 
            mV(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "RECURSIVE"

    // $ANTLR start "REFERENCES"
    public final void mREFERENCES() throws RecognitionException {
        try {
            int _type = REFERENCES;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:427:30: ( R E F E R E N C E S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:427:34: R E F E R E N C E S
            {
            mR(); 
            mE(); 
            mF(); 
            mE(); 
            mR(); 
            mE(); 
            mN(); 
            mC(); 
            mE(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "REFERENCES"

    // $ANTLR start "REFERENCING"
    public final void mREFERENCING() throws RecognitionException {
        try {
            int _type = REFERENCING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:428:30: ( R E F E R E N C I N G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:428:34: R E F E R E N C I N G
            {
            mR(); 
            mE(); 
            mF(); 
            mE(); 
            mR(); 
            mE(); 
            mN(); 
            mC(); 
            mI(); 
            mN(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "REFERENCING"

    // $ANTLR start "REF"
    public final void mREF() throws RecognitionException {
        try {
            int _type = REF;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:429:30: ( R E F )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:429:34: R E F
            {
            mR(); 
            mE(); 
            mF(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "REF"

    // $ANTLR start "RELEASE"
    public final void mRELEASE() throws RecognitionException {
        try {
            int _type = RELEASE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:430:30: ( R E L E A S E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:430:34: R E L E A S E
            {
            mR(); 
            mE(); 
            mL(); 
            mE(); 
            mA(); 
            mS(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "RELEASE"

    // $ANTLR start "RETURNS"
    public final void mRETURNS() throws RecognitionException {
        try {
            int _type = RETURNS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:431:30: ( R E T U R N S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:431:34: R E T U R N S
            {
            mR(); 
            mE(); 
            mT(); 
            mU(); 
            mR(); 
            mN(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "RETURNS"

    // $ANTLR start "RETURN"
    public final void mRETURN() throws RecognitionException {
        try {
            int _type = RETURN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:432:30: ( R E T U R N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:432:34: R E T U R N
            {
            mR(); 
            mE(); 
            mT(); 
            mU(); 
            mR(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "RETURN"

    // $ANTLR start "REVOKE"
    public final void mREVOKE() throws RecognitionException {
        try {
            int _type = REVOKE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:433:30: ( R E V O K E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:433:34: R E V O K E
            {
            mR(); 
            mE(); 
            mV(); 
            mO(); 
            mK(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "REVOKE"

    // $ANTLR start "RIGHT"
    public final void mRIGHT() throws RecognitionException {
        try {
            int _type = RIGHT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:434:30: ( R I G H T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:434:34: R I G H T
            {
            mR(); 
            mI(); 
            mG(); 
            mH(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "RIGHT"

    // $ANTLR start "ROLLBACK"
    public final void mROLLBACK() throws RecognitionException {
        try {
            int _type = ROLLBACK;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:435:30: ( R O L L B A C K )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:435:34: R O L L B A C K
            {
            mR(); 
            mO(); 
            mL(); 
            mL(); 
            mB(); 
            mA(); 
            mC(); 
            mK(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ROLLBACK"

    // $ANTLR start "ROLLUP"
    public final void mROLLUP() throws RecognitionException {
        try {
            int _type = ROLLUP;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:436:30: ( R O L L U P )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:436:34: R O L L U P
            {
            mR(); 
            mO(); 
            mL(); 
            mL(); 
            mU(); 
            mP(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ROLLUP"

    // $ANTLR start "ROWS"
    public final void mROWS() throws RecognitionException {
        try {
            int _type = ROWS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:437:30: ( R O W S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:437:34: R O W S
            {
            mR(); 
            mO(); 
            mW(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ROWS"

    // $ANTLR start "ROW"
    public final void mROW() throws RecognitionException {
        try {
            int _type = ROW;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:438:30: ( R O W )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:438:34: R O W
            {
            mR(); 
            mO(); 
            mW(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ROW"

    // $ANTLR start "SAVEPOINT"
    public final void mSAVEPOINT() throws RecognitionException {
        try {
            int _type = SAVEPOINT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:439:30: ( S A V E P O I N T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:439:34: S A V E P O I N T
            {
            mS(); 
            mA(); 
            mV(); 
            mE(); 
            mP(); 
            mO(); 
            mI(); 
            mN(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SAVEPOINT"

    // $ANTLR start "SCOPE"
    public final void mSCOPE() throws RecognitionException {
        try {
            int _type = SCOPE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:440:30: ( S C O P E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:440:34: S C O P E
            {
            mS(); 
            mC(); 
            mO(); 
            mP(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SCOPE"

    // $ANTLR start "SCROLL"
    public final void mSCROLL() throws RecognitionException {
        try {
            int _type = SCROLL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:441:30: ( S C R O L L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:441:34: S C R O L L
            {
            mS(); 
            mC(); 
            mR(); 
            mO(); 
            mL(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SCROLL"

    // $ANTLR start "SEARCH"
    public final void mSEARCH() throws RecognitionException {
        try {
            int _type = SEARCH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:442:30: ( S E A R C H )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:442:34: S E A R C H
            {
            mS(); 
            mE(); 
            mA(); 
            mR(); 
            mC(); 
            mH(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SEARCH"

    // $ANTLR start "SECOND"
    public final void mSECOND() throws RecognitionException {
        try {
            int _type = SECOND;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:443:30: ( S E C O N D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:443:34: S E C O N D
            {
            mS(); 
            mE(); 
            mC(); 
            mO(); 
            mN(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SECOND"

    // $ANTLR start "SELECT"
    public final void mSELECT() throws RecognitionException {
        try {
            int _type = SELECT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:444:30: ( S E L E C T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:444:34: S E L E C T
            {
            mS(); 
            mE(); 
            mL(); 
            mE(); 
            mC(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SELECT"

    // $ANTLR start "SENSITIVE"
    public final void mSENSITIVE() throws RecognitionException {
        try {
            int _type = SENSITIVE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:445:30: ( S E N S I T I V E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:445:34: S E N S I T I V E
            {
            mS(); 
            mE(); 
            mN(); 
            mS(); 
            mI(); 
            mT(); 
            mI(); 
            mV(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SENSITIVE"

    // $ANTLR start "SESSION_USER"
    public final void mSESSION_USER() throws RecognitionException {
        try {
            int _type = SESSION_USER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:446:30: ( S E S S I O N Underscore U S E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:446:34: S E S S I O N Underscore U S E R
            {
            mS(); 
            mE(); 
            mS(); 
            mS(); 
            mI(); 
            mO(); 
            mN(); 
            mUnderscore(); 
            mU(); 
            mS(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SESSION_USER"

    // $ANTLR start "SET"
    public final void mSET() throws RecognitionException {
        try {
            int _type = SET;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:447:30: ( S E T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:447:34: S E T
            {
            mS(); 
            mE(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SET"

    // $ANTLR start "SIMILAR"
    public final void mSIMILAR() throws RecognitionException {
        try {
            int _type = SIMILAR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:448:30: ( S I M I L A R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:448:34: S I M I L A R
            {
            mS(); 
            mI(); 
            mM(); 
            mI(); 
            mL(); 
            mA(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SIMILAR"

    // $ANTLR start "SMALLINT"
    public final void mSMALLINT() throws RecognitionException {
        try {
            int _type = SMALLINT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:449:30: ( S M A L L I N T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:449:34: S M A L L I N T
            {
            mS(); 
            mM(); 
            mA(); 
            mL(); 
            mL(); 
            mI(); 
            mN(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SMALLINT"

    // $ANTLR start "SOME"
    public final void mSOME() throws RecognitionException {
        try {
            int _type = SOME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:450:30: ( S O M E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:450:34: S O M E
            {
            mS(); 
            mO(); 
            mM(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SOME"

    // $ANTLR start "SPECIFICTYPE"
    public final void mSPECIFICTYPE() throws RecognitionException {
        try {
            int _type = SPECIFICTYPE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:451:30: ( S P E C I F I C T Y P E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:451:34: S P E C I F I C T Y P E
            {
            mS(); 
            mP(); 
            mE(); 
            mC(); 
            mI(); 
            mF(); 
            mI(); 
            mC(); 
            mT(); 
            mY(); 
            mP(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SPECIFICTYPE"

    // $ANTLR start "SPECIFIC"
    public final void mSPECIFIC() throws RecognitionException {
        try {
            int _type = SPECIFIC;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:452:30: ( S P E C I F I C )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:452:34: S P E C I F I C
            {
            mS(); 
            mP(); 
            mE(); 
            mC(); 
            mI(); 
            mF(); 
            mI(); 
            mC(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SPECIFIC"

    // $ANTLR start "SQLEXCEPTION"
    public final void mSQLEXCEPTION() throws RecognitionException {
        try {
            int _type = SQLEXCEPTION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:453:30: ( S Q L E X C E P T I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:453:34: S Q L E X C E P T I O N
            {
            mS(); 
            mQ(); 
            mL(); 
            mE(); 
            mX(); 
            mC(); 
            mE(); 
            mP(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SQLEXCEPTION"

    // $ANTLR start "SQLSTATE"
    public final void mSQLSTATE() throws RecognitionException {
        try {
            int _type = SQLSTATE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:454:30: ( S Q L S T A T E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:454:34: S Q L S T A T E
            {
            mS(); 
            mQ(); 
            mL(); 
            mS(); 
            mT(); 
            mA(); 
            mT(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SQLSTATE"

    // $ANTLR start "SQLWARNING"
    public final void mSQLWARNING() throws RecognitionException {
        try {
            int _type = SQLWARNING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:455:30: ( S Q L W A R N I N G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:455:34: S Q L W A R N I N G
            {
            mS(); 
            mQ(); 
            mL(); 
            mW(); 
            mA(); 
            mR(); 
            mN(); 
            mI(); 
            mN(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SQLWARNING"

    // $ANTLR start "SQL"
    public final void mSQL() throws RecognitionException {
        try {
            int _type = SQL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:456:30: ( S Q L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:456:34: S Q L
            {
            mS(); 
            mQ(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SQL"

    // $ANTLR start "START"
    public final void mSTART() throws RecognitionException {
        try {
            int _type = START;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:457:30: ( S T A R T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:457:34: S T A R T
            {
            mS(); 
            mT(); 
            mA(); 
            mR(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "START"

    // $ANTLR start "STATIC"
    public final void mSTATIC() throws RecognitionException {
        try {
            int _type = STATIC;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:458:30: ( S T A T I C )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:458:34: S T A T I C
            {
            mS(); 
            mT(); 
            mA(); 
            mT(); 
            mI(); 
            mC(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "STATIC"

    // $ANTLR start "SUBMULTISET"
    public final void mSUBMULTISET() throws RecognitionException {
        try {
            int _type = SUBMULTISET;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:459:30: ( S U B M U L T I S E T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:459:34: S U B M U L T I S E T
            {
            mS(); 
            mU(); 
            mB(); 
            mM(); 
            mU(); 
            mL(); 
            mT(); 
            mI(); 
            mS(); 
            mE(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SUBMULTISET"

    // $ANTLR start "SYMMETRIC"
    public final void mSYMMETRIC() throws RecognitionException {
        try {
            int _type = SYMMETRIC;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:460:30: ( S Y M M E T R I C )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:460:34: S Y M M E T R I C
            {
            mS(); 
            mY(); 
            mM(); 
            mM(); 
            mE(); 
            mT(); 
            mR(); 
            mI(); 
            mC(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SYMMETRIC"

    // $ANTLR start "SYSTEM_USER"
    public final void mSYSTEM_USER() throws RecognitionException {
        try {
            int _type = SYSTEM_USER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:461:30: ( S Y S T E M Underscore U S E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:461:34: S Y S T E M Underscore U S E R
            {
            mS(); 
            mY(); 
            mS(); 
            mT(); 
            mE(); 
            mM(); 
            mUnderscore(); 
            mU(); 
            mS(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SYSTEM_USER"

    // $ANTLR start "SYSTEM"
    public final void mSYSTEM() throws RecognitionException {
        try {
            int _type = SYSTEM;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:462:30: ( S Y S T E M )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:462:34: S Y S T E M
            {
            mS(); 
            mY(); 
            mS(); 
            mT(); 
            mE(); 
            mM(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SYSTEM"

    // $ANTLR start "TABLE"
    public final void mTABLE() throws RecognitionException {
        try {
            int _type = TABLE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:463:30: ( T A B L E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:463:34: T A B L E
            {
            mT(); 
            mA(); 
            mB(); 
            mL(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TABLE"

    // $ANTLR start "THEN"
    public final void mTHEN() throws RecognitionException {
        try {
            int _type = THEN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:464:30: ( T H E N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:464:34: T H E N
            {
            mT(); 
            mH(); 
            mE(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "THEN"

    // $ANTLR start "TIMESTAMP"
    public final void mTIMESTAMP() throws RecognitionException {
        try {
            int _type = TIMESTAMP;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:465:30: ( T I M E S T A M P )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:465:34: T I M E S T A M P
            {
            mT(); 
            mI(); 
            mM(); 
            mE(); 
            mS(); 
            mT(); 
            mA(); 
            mM(); 
            mP(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TIMESTAMP"

    // $ANTLR start "TIMEZONE_HOUR"
    public final void mTIMEZONE_HOUR() throws RecognitionException {
        try {
            int _type = TIMEZONE_HOUR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:466:30: ( T I M E Z O N E Underscore H O U R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:466:34: T I M E Z O N E Underscore H O U R
            {
            mT(); 
            mI(); 
            mM(); 
            mE(); 
            mZ(); 
            mO(); 
            mN(); 
            mE(); 
            mUnderscore(); 
            mH(); 
            mO(); 
            mU(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TIMEZONE_HOUR"

    // $ANTLR start "TIMEZONE_MINUTE"
    public final void mTIMEZONE_MINUTE() throws RecognitionException {
        try {
            int _type = TIMEZONE_MINUTE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:467:30: ( T I M E Z O N E Underscore M I N U T E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:467:34: T I M E Z O N E Underscore M I N U T E
            {
            mT(); 
            mI(); 
            mM(); 
            mE(); 
            mZ(); 
            mO(); 
            mN(); 
            mE(); 
            mUnderscore(); 
            mM(); 
            mI(); 
            mN(); 
            mU(); 
            mT(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TIMEZONE_MINUTE"

    // $ANTLR start "TIME"
    public final void mTIME() throws RecognitionException {
        try {
            int _type = TIME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:468:30: ( T I M E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:468:34: T I M E
            {
            mT(); 
            mI(); 
            mM(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TIME"

    // $ANTLR start "TO"
    public final void mTO() throws RecognitionException {
        try {
            int _type = TO;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:469:30: ( T O )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:469:34: T O
            {
            mT(); 
            mO(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TO"

    // $ANTLR start "TRAILING"
    public final void mTRAILING() throws RecognitionException {
        try {
            int _type = TRAILING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:470:30: ( T R A I L I N G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:470:34: T R A I L I N G
            {
            mT(); 
            mR(); 
            mA(); 
            mI(); 
            mL(); 
            mI(); 
            mN(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TRAILING"

    // $ANTLR start "TRANSLATION"
    public final void mTRANSLATION() throws RecognitionException {
        try {
            int _type = TRANSLATION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:471:30: ( T R A N S L A T I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:471:34: T R A N S L A T I O N
            {
            mT(); 
            mR(); 
            mA(); 
            mN(); 
            mS(); 
            mL(); 
            mA(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TRANSLATION"

    // $ANTLR start "TREAT"
    public final void mTREAT() throws RecognitionException {
        try {
            int _type = TREAT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:472:30: ( T R E A T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:472:34: T R E A T
            {
            mT(); 
            mR(); 
            mE(); 
            mA(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TREAT"

    // $ANTLR start "TRIGGER"
    public final void mTRIGGER() throws RecognitionException {
        try {
            int _type = TRIGGER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:473:30: ( T R I G G E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:473:34: T R I G G E R
            {
            mT(); 
            mR(); 
            mI(); 
            mG(); 
            mG(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TRIGGER"

    // $ANTLR start "TRUE"
    public final void mTRUE() throws RecognitionException {
        try {
            int _type = TRUE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:474:30: ( T R U E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:474:34: T R U E
            {
            mT(); 
            mR(); 
            mU(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TRUE"

    // $ANTLR start "UNDO"
    public final void mUNDO() throws RecognitionException {
        try {
            int _type = UNDO;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:475:30: ( U N D O )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:475:34: U N D O
            {
            mU(); 
            mN(); 
            mD(); 
            mO(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "UNDO"

    // $ANTLR start "UNION"
    public final void mUNION() throws RecognitionException {
        try {
            int _type = UNION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:476:30: ( U N I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:476:34: U N I O N
            {
            mU(); 
            mN(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "UNION"

    // $ANTLR start "UNIQUE"
    public final void mUNIQUE() throws RecognitionException {
        try {
            int _type = UNIQUE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:477:30: ( U N I Q U E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:477:34: U N I Q U E
            {
            mU(); 
            mN(); 
            mI(); 
            mQ(); 
            mU(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "UNIQUE"

    // $ANTLR start "UNKNOWN"
    public final void mUNKNOWN() throws RecognitionException {
        try {
            int _type = UNKNOWN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:478:30: ( U N K N O W N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:478:34: U N K N O W N
            {
            mU(); 
            mN(); 
            mK(); 
            mN(); 
            mO(); 
            mW(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "UNKNOWN"

    // $ANTLR start "UNNEST"
    public final void mUNNEST() throws RecognitionException {
        try {
            int _type = UNNEST;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:479:30: ( U N N E S T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:479:34: U N N E S T
            {
            mU(); 
            mN(); 
            mN(); 
            mE(); 
            mS(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "UNNEST"

    // $ANTLR start "UPDATE"
    public final void mUPDATE() throws RecognitionException {
        try {
            int _type = UPDATE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:480:30: ( U P D A T E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:480:34: U P D A T E
            {
            mU(); 
            mP(); 
            mD(); 
            mA(); 
            mT(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "UPDATE"

    // $ANTLR start "USER"
    public final void mUSER() throws RecognitionException {
        try {
            int _type = USER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:481:30: ( U S E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:481:34: U S E R
            {
            mU(); 
            mS(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "USER"

    // $ANTLR start "USING"
    public final void mUSING() throws RecognitionException {
        try {
            int _type = USING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:482:30: ( U S I N G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:482:34: U S I N G
            {
            mU(); 
            mS(); 
            mI(); 
            mN(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "USING"

    // $ANTLR start "VALUES"
    public final void mVALUES() throws RecognitionException {
        try {
            int _type = VALUES;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:483:30: ( V A L U E S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:483:34: V A L U E S
            {
            mV(); 
            mA(); 
            mL(); 
            mU(); 
            mE(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "VALUES"

    // $ANTLR start "VALUE"
    public final void mVALUE() throws RecognitionException {
        try {
            int _type = VALUE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:484:30: ( V A L U E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:484:34: V A L U E
            {
            mV(); 
            mA(); 
            mL(); 
            mU(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "VALUE"

    // $ANTLR start "VARCHAR"
    public final void mVARCHAR() throws RecognitionException {
        try {
            int _type = VARCHAR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:485:30: ( V A R C H A R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:485:34: V A R C H A R
            {
            mV(); 
            mA(); 
            mR(); 
            mC(); 
            mH(); 
            mA(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "VARCHAR"

    // $ANTLR start "VARYING"
    public final void mVARYING() throws RecognitionException {
        try {
            int _type = VARYING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:486:30: ( V A R Y I N G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:486:34: V A R Y I N G
            {
            mV(); 
            mA(); 
            mR(); 
            mY(); 
            mI(); 
            mN(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "VARYING"

    // $ANTLR start "WHENEVER"
    public final void mWHENEVER() throws RecognitionException {
        try {
            int _type = WHENEVER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:487:30: ( W H E N E V E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:487:34: W H E N E V E R
            {
            mW(); 
            mH(); 
            mE(); 
            mN(); 
            mE(); 
            mV(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "WHENEVER"

    // $ANTLR start "WHEN"
    public final void mWHEN() throws RecognitionException {
        try {
            int _type = WHEN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:488:30: ( W H E N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:488:34: W H E N
            {
            mW(); 
            mH(); 
            mE(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "WHEN"

    // $ANTLR start "WHERE"
    public final void mWHERE() throws RecognitionException {
        try {
            int _type = WHERE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:489:30: ( W H E R E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:489:34: W H E R E
            {
            mW(); 
            mH(); 
            mE(); 
            mR(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "WHERE"

    // $ANTLR start "WINDOW"
    public final void mWINDOW() throws RecognitionException {
        try {
            int _type = WINDOW;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:490:30: ( W I N D O W )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:490:34: W I N D O W
            {
            mW(); 
            mI(); 
            mN(); 
            mD(); 
            mO(); 
            mW(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "WINDOW"

    // $ANTLR start "WITH"
    public final void mWITH() throws RecognitionException {
        try {
            int _type = WITH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:491:30: ( W I T H )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:491:34: W I T H
            {
            mW(); 
            mI(); 
            mT(); 
            mH(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "WITH"

    // $ANTLR start "WITHIN"
    public final void mWITHIN() throws RecognitionException {
        try {
            int _type = WITHIN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:492:30: ( W I T H I N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:492:34: W I T H I N
            {
            mW(); 
            mI(); 
            mT(); 
            mH(); 
            mI(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "WITHIN"

    // $ANTLR start "WITHOUT"
    public final void mWITHOUT() throws RecognitionException {
        try {
            int _type = WITHOUT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:493:30: ( W I T H O U T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:493:34: W I T H O U T
            {
            mW(); 
            mI(); 
            mT(); 
            mH(); 
            mO(); 
            mU(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "WITHOUT"

    // $ANTLR start "YEAR"
    public final void mYEAR() throws RecognitionException {
        try {
            int _type = YEAR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:494:30: ( Y E A R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:494:34: Y E A R
            {
            mY(); 
            mE(); 
            mA(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "YEAR"

    // $ANTLR start "ABS"
    public final void mABS() throws RecognitionException {
        try {
            int _type = ABS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:499:30: ( A B S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:499:34: A B S
            {
            mA(); 
            mB(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ABS"

    // $ANTLR start "ABSOLUTE"
    public final void mABSOLUTE() throws RecognitionException {
        try {
            int _type = ABSOLUTE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:500:30: ( A B S O L U T E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:500:34: A B S O L U T E
            {
            mA(); 
            mB(); 
            mS(); 
            mO(); 
            mL(); 
            mU(); 
            mT(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ABSOLUTE"

    // $ANTLR start "ACTION"
    public final void mACTION() throws RecognitionException {
        try {
            int _type = ACTION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:501:30: ( A C T I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:501:34: A C T I O N
            {
            mA(); 
            mC(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ACTION"

    // $ANTLR start "ADA"
    public final void mADA() throws RecognitionException {
        try {
            int _type = ADA;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:502:30: ( A D A )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:502:34: A D A
            {
            mA(); 
            mD(); 
            mA(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ADA"

    // $ANTLR start "ADMIN"
    public final void mADMIN() throws RecognitionException {
        try {
            int _type = ADMIN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:503:30: ( A D M I N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:503:34: A D M I N
            {
            mA(); 
            mD(); 
            mM(); 
            mI(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ADMIN"

    // $ANTLR start "AFTER"
    public final void mAFTER() throws RecognitionException {
        try {
            int _type = AFTER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:504:30: ( A F T E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:504:34: A F T E R
            {
            mA(); 
            mF(); 
            mT(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "AFTER"

    // $ANTLR start "ALWAYS"
    public final void mALWAYS() throws RecognitionException {
        try {
            int _type = ALWAYS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:505:30: ( A L W A Y S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:505:34: A L W A Y S
            {
            mA(); 
            mL(); 
            mW(); 
            mA(); 
            mY(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ALWAYS"

    // $ANTLR start "ASC"
    public final void mASC() throws RecognitionException {
        try {
            int _type = ASC;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:506:30: ( A S C )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:506:34: A S C
            {
            mA(); 
            mS(); 
            mC(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ASC"

    // $ANTLR start "ASSERTION"
    public final void mASSERTION() throws RecognitionException {
        try {
            int _type = ASSERTION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:507:30: ( A S S E R T I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:507:34: A S S E R T I O N
            {
            mA(); 
            mS(); 
            mS(); 
            mE(); 
            mR(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ASSERTION"

    // $ANTLR start "ASSIGNMENT"
    public final void mASSIGNMENT() throws RecognitionException {
        try {
            int _type = ASSIGNMENT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:508:30: ( A S S I G N M E N T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:508:34: A S S I G N M E N T
            {
            mA(); 
            mS(); 
            mS(); 
            mI(); 
            mG(); 
            mN(); 
            mM(); 
            mE(); 
            mN(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ASSIGNMENT"

    // $ANTLR start "ATTRIBUTE"
    public final void mATTRIBUTE() throws RecognitionException {
        try {
            int _type = ATTRIBUTE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:509:30: ( A T T R I B U T E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:509:34: A T T R I B U T E
            {
            mA(); 
            mT(); 
            mT(); 
            mR(); 
            mI(); 
            mB(); 
            mU(); 
            mT(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ATTRIBUTE"

    // $ANTLR start "ATTRIBUTES"
    public final void mATTRIBUTES() throws RecognitionException {
        try {
            int _type = ATTRIBUTES;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:510:30: ( A T T R I B U T E S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:510:34: A T T R I B U T E S
            {
            mA(); 
            mT(); 
            mT(); 
            mR(); 
            mI(); 
            mB(); 
            mU(); 
            mT(); 
            mE(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ATTRIBUTES"

    // $ANTLR start "AUTO"
    public final void mAUTO() throws RecognitionException {
        try {
            int _type = AUTO;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:511:30: ( A U T O )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:511:34: A U T O
            {
            mA(); 
            mU(); 
            mT(); 
            mO(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "AUTO"

    // $ANTLR start "AVG"
    public final void mAVG() throws RecognitionException {
        try {
            int _type = AVG;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:512:30: ( A V G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:512:34: A V G
            {
            mA(); 
            mV(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "AVG"

    // $ANTLR start "BEFORE"
    public final void mBEFORE() throws RecognitionException {
        try {
            int _type = BEFORE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:513:30: ( B E F O R E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:513:34: B E F O R E
            {
            mB(); 
            mE(); 
            mF(); 
            mO(); 
            mR(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "BEFORE"

    // $ANTLR start "BERNOULLI"
    public final void mBERNOULLI() throws RecognitionException {
        try {
            int _type = BERNOULLI;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:514:30: ( B E R N O U L L I )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:514:34: B E R N O U L L I
            {
            mB(); 
            mE(); 
            mR(); 
            mN(); 
            mO(); 
            mU(); 
            mL(); 
            mL(); 
            mI(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "BERNOULLI"

    // $ANTLR start "BIN"
    public final void mBIN() throws RecognitionException {
        try {
            int _type = BIN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:515:30: ( B I N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:515:34: B I N
            {
            mB(); 
            mI(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "BIN"

    // $ANTLR start "BREADTH"
    public final void mBREADTH() throws RecognitionException {
        try {
            int _type = BREADTH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:516:30: ( B R E A D T H )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:516:34: B R E A D T H
            {
            mB(); 
            mR(); 
            mE(); 
            mA(); 
            mD(); 
            mT(); 
            mH(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "BREADTH"

    // $ANTLR start "CARDINALITY"
    public final void mCARDINALITY() throws RecognitionException {
        try {
            int _type = CARDINALITY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:517:30: ( C A R D I N A L I T Y )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:517:34: C A R D I N A L I T Y
            {
            mC(); 
            mA(); 
            mR(); 
            mD(); 
            mI(); 
            mN(); 
            mA(); 
            mL(); 
            mI(); 
            mT(); 
            mY(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CARDINALITY"

    // $ANTLR start "CASCADE"
    public final void mCASCADE() throws RecognitionException {
        try {
            int _type = CASCADE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:518:30: ( C A S C A D E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:518:34: C A S C A D E
            {
            mC(); 
            mA(); 
            mS(); 
            mC(); 
            mA(); 
            mD(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CASCADE"

    // $ANTLR start "CATALOG_NAME"
    public final void mCATALOG_NAME() throws RecognitionException {
        try {
            int _type = CATALOG_NAME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:519:30: ( C A T A L O G Underscore N A M E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:519:34: C A T A L O G Underscore N A M E
            {
            mC(); 
            mA(); 
            mT(); 
            mA(); 
            mL(); 
            mO(); 
            mG(); 
            mUnderscore(); 
            mN(); 
            mA(); 
            mM(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CATALOG_NAME"

    // $ANTLR start "CATALOG"
    public final void mCATALOG() throws RecognitionException {
        try {
            int _type = CATALOG;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:520:30: ( C A T A L O G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:520:34: C A T A L O G
            {
            mC(); 
            mA(); 
            mT(); 
            mA(); 
            mL(); 
            mO(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CATALOG"

    // $ANTLR start "CEILING"
    public final void mCEILING() throws RecognitionException {
        try {
            int _type = CEILING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:521:30: ( C E I L I N G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:521:34: C E I L I N G
            {
            mC(); 
            mE(); 
            mI(); 
            mL(); 
            mI(); 
            mN(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CEILING"

    // $ANTLR start "CEIL"
    public final void mCEIL() throws RecognitionException {
        try {
            int _type = CEIL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:522:30: ( C E I L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:522:34: C E I L
            {
            mC(); 
            mE(); 
            mI(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CEIL"

    // $ANTLR start "CHAIN"
    public final void mCHAIN() throws RecognitionException {
        try {
            int _type = CHAIN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:523:30: ( C H A I N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:523:34: C H A I N
            {
            mC(); 
            mH(); 
            mA(); 
            mI(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CHAIN"

    // $ANTLR start "CHARACTERISTICS"
    public final void mCHARACTERISTICS() throws RecognitionException {
        try {
            int _type = CHARACTERISTICS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:524:30: ( C H A R A C T E R I S T I C S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:524:34: C H A R A C T E R I S T I C S
            {
            mC(); 
            mH(); 
            mA(); 
            mR(); 
            mA(); 
            mC(); 
            mT(); 
            mE(); 
            mR(); 
            mI(); 
            mS(); 
            mT(); 
            mI(); 
            mC(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CHARACTERISTICS"

    // $ANTLR start "CHARACTERS"
    public final void mCHARACTERS() throws RecognitionException {
        try {
            int _type = CHARACTERS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:525:30: ( C H A R A C T E R S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:525:34: C H A R A C T E R S
            {
            mC(); 
            mH(); 
            mA(); 
            mR(); 
            mA(); 
            mC(); 
            mT(); 
            mE(); 
            mR(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CHARACTERS"

    // $ANTLR start "CHARACTER_LENGTH"
    public final void mCHARACTER_LENGTH() throws RecognitionException {
        try {
            int _type = CHARACTER_LENGTH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:526:30: ( C H A R A C T E R Underscore L E N G T H )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:526:34: C H A R A C T E R Underscore L E N G T H
            {
            mC(); 
            mH(); 
            mA(); 
            mR(); 
            mA(); 
            mC(); 
            mT(); 
            mE(); 
            mR(); 
            mUnderscore(); 
            mL(); 
            mE(); 
            mN(); 
            mG(); 
            mT(); 
            mH(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CHARACTER_LENGTH"

    // $ANTLR start "CHARACTER_SET_CATALOG"
    public final void mCHARACTER_SET_CATALOG() throws RecognitionException {
        try {
            int _type = CHARACTER_SET_CATALOG;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:527:30: ( C H A R A C T E R Underscore S E T Underscore C A T A L O G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:527:34: C H A R A C T E R Underscore S E T Underscore C A T A L O G
            {
            mC(); 
            mH(); 
            mA(); 
            mR(); 
            mA(); 
            mC(); 
            mT(); 
            mE(); 
            mR(); 
            mUnderscore(); 
            mS(); 
            mE(); 
            mT(); 
            mUnderscore(); 
            mC(); 
            mA(); 
            mT(); 
            mA(); 
            mL(); 
            mO(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CHARACTER_SET_CATALOG"

    // $ANTLR start "CHARACTER_SET_NAME"
    public final void mCHARACTER_SET_NAME() throws RecognitionException {
        try {
            int _type = CHARACTER_SET_NAME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:528:30: ( C H A R A C T E R Underscore S E T Underscore N A M E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:528:34: C H A R A C T E R Underscore S E T Underscore N A M E
            {
            mC(); 
            mH(); 
            mA(); 
            mR(); 
            mA(); 
            mC(); 
            mT(); 
            mE(); 
            mR(); 
            mUnderscore(); 
            mS(); 
            mE(); 
            mT(); 
            mUnderscore(); 
            mN(); 
            mA(); 
            mM(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CHARACTER_SET_NAME"

    // $ANTLR start "CHARACTER_SET_SCHEMA"
    public final void mCHARACTER_SET_SCHEMA() throws RecognitionException {
        try {
            int _type = CHARACTER_SET_SCHEMA;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:529:30: ( C H A R A C T E R Underscore S E T Underscore S C H E M A )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:529:34: C H A R A C T E R Underscore S E T Underscore S C H E M A
            {
            mC(); 
            mH(); 
            mA(); 
            mR(); 
            mA(); 
            mC(); 
            mT(); 
            mE(); 
            mR(); 
            mUnderscore(); 
            mS(); 
            mE(); 
            mT(); 
            mUnderscore(); 
            mS(); 
            mC(); 
            mH(); 
            mE(); 
            mM(); 
            mA(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CHARACTER_SET_SCHEMA"

    // $ANTLR start "CHAR_LENGTH"
    public final void mCHAR_LENGTH() throws RecognitionException {
        try {
            int _type = CHAR_LENGTH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:530:30: ( C H A R Underscore L E N G T H )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:530:34: C H A R Underscore L E N G T H
            {
            mC(); 
            mH(); 
            mA(); 
            mR(); 
            mUnderscore(); 
            mL(); 
            mE(); 
            mN(); 
            mG(); 
            mT(); 
            mH(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CHAR_LENGTH"

    // $ANTLR start "CHECKED"
    public final void mCHECKED() throws RecognitionException {
        try {
            int _type = CHECKED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:531:30: ( C H E C K E D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:531:34: C H E C K E D
            {
            mC(); 
            mH(); 
            mE(); 
            mC(); 
            mK(); 
            mE(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CHECKED"

    // $ANTLR start "CLASS_ORIGIN"
    public final void mCLASS_ORIGIN() throws RecognitionException {
        try {
            int _type = CLASS_ORIGIN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:532:30: ( C L A S S Underscore O R I G I N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:532:34: C L A S S Underscore O R I G I N
            {
            mC(); 
            mL(); 
            mA(); 
            mS(); 
            mS(); 
            mUnderscore(); 
            mO(); 
            mR(); 
            mI(); 
            mG(); 
            mI(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CLASS_ORIGIN"

    // $ANTLR start "COALESCE"
    public final void mCOALESCE() throws RecognitionException {
        try {
            int _type = COALESCE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:533:30: ( C O A L E S C E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:533:34: C O A L E S C E
            {
            mC(); 
            mO(); 
            mA(); 
            mL(); 
            mE(); 
            mS(); 
            mC(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "COALESCE"

    // $ANTLR start "COBOL"
    public final void mCOBOL() throws RecognitionException {
        try {
            int _type = COBOL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:534:30: ( C O B O L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:534:34: C O B O L
            {
            mC(); 
            mO(); 
            mB(); 
            mO(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "COBOL"

    // $ANTLR start "CODE_UNITS"
    public final void mCODE_UNITS() throws RecognitionException {
        try {
            int _type = CODE_UNITS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:535:30: ( C O D E Underscore U N I T S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:535:34: C O D E Underscore U N I T S
            {
            mC(); 
            mO(); 
            mD(); 
            mE(); 
            mUnderscore(); 
            mU(); 
            mN(); 
            mI(); 
            mT(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CODE_UNITS"

    // $ANTLR start "COLLATION_CATALOG"
    public final void mCOLLATION_CATALOG() throws RecognitionException {
        try {
            int _type = COLLATION_CATALOG;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:536:30: ( C O L L A T I O N Underscore C A T A L O G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:536:34: C O L L A T I O N Underscore C A T A L O G
            {
            mC(); 
            mO(); 
            mL(); 
            mL(); 
            mA(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 
            mUnderscore(); 
            mC(); 
            mA(); 
            mT(); 
            mA(); 
            mL(); 
            mO(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "COLLATION_CATALOG"

    // $ANTLR start "COLLATION_NAME"
    public final void mCOLLATION_NAME() throws RecognitionException {
        try {
            int _type = COLLATION_NAME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:537:30: ( C O L L A T I O N Underscore N A M E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:537:34: C O L L A T I O N Underscore N A M E
            {
            mC(); 
            mO(); 
            mL(); 
            mL(); 
            mA(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 
            mUnderscore(); 
            mN(); 
            mA(); 
            mM(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "COLLATION_NAME"

    // $ANTLR start "COLLATION_SCHEMA"
    public final void mCOLLATION_SCHEMA() throws RecognitionException {
        try {
            int _type = COLLATION_SCHEMA;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:538:30: ( C O L L A T I O N Underscore S C H E M A )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:538:34: C O L L A T I O N Underscore S C H E M A
            {
            mC(); 
            mO(); 
            mL(); 
            mL(); 
            mA(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 
            mUnderscore(); 
            mS(); 
            mC(); 
            mH(); 
            mE(); 
            mM(); 
            mA(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "COLLATION_SCHEMA"

    // $ANTLR start "COLLATION"
    public final void mCOLLATION() throws RecognitionException {
        try {
            int _type = COLLATION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:539:30: ( C O L L A T I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:539:34: C O L L A T I O N
            {
            mC(); 
            mO(); 
            mL(); 
            mL(); 
            mA(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "COLLATION"

    // $ANTLR start "COLLECT"
    public final void mCOLLECT() throws RecognitionException {
        try {
            int _type = COLLECT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:540:30: ( C O L L E C T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:540:34: C O L L E C T
            {
            mC(); 
            mO(); 
            mL(); 
            mL(); 
            mE(); 
            mC(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "COLLECT"

    // $ANTLR start "COLUMN_NAME"
    public final void mCOLUMN_NAME() throws RecognitionException {
        try {
            int _type = COLUMN_NAME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:541:30: ( C O L U M N Underscore N A M E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:541:34: C O L U M N Underscore N A M E
            {
            mC(); 
            mO(); 
            mL(); 
            mU(); 
            mM(); 
            mN(); 
            mUnderscore(); 
            mN(); 
            mA(); 
            mM(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "COLUMN_NAME"

    // $ANTLR start "COMMAND_FUNCTION_CODE"
    public final void mCOMMAND_FUNCTION_CODE() throws RecognitionException {
        try {
            int _type = COMMAND_FUNCTION_CODE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:542:30: ( C O M M A N D Underscore F U N C T I O N Underscore C O D E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:542:34: C O M M A N D Underscore F U N C T I O N Underscore C O D E
            {
            mC(); 
            mO(); 
            mM(); 
            mM(); 
            mA(); 
            mN(); 
            mD(); 
            mUnderscore(); 
            mF(); 
            mU(); 
            mN(); 
            mC(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 
            mUnderscore(); 
            mC(); 
            mO(); 
            mD(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "COMMAND_FUNCTION_CODE"

    // $ANTLR start "COMMAND_FUNCTION"
    public final void mCOMMAND_FUNCTION() throws RecognitionException {
        try {
            int _type = COMMAND_FUNCTION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:543:30: ( C O M M A N D Underscore F U N C T I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:543:34: C O M M A N D Underscore F U N C T I O N
            {
            mC(); 
            mO(); 
            mM(); 
            mM(); 
            mA(); 
            mN(); 
            mD(); 
            mUnderscore(); 
            mF(); 
            mU(); 
            mN(); 
            mC(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "COMMAND_FUNCTION"

    // $ANTLR start "COMMITTED"
    public final void mCOMMITTED() throws RecognitionException {
        try {
            int _type = COMMITTED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:544:30: ( C O M M I T T E D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:544:34: C O M M I T T E D
            {
            mC(); 
            mO(); 
            mM(); 
            mM(); 
            mI(); 
            mT(); 
            mT(); 
            mE(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "COMMITTED"

    // $ANTLR start "CONDITION_NUMBER"
    public final void mCONDITION_NUMBER() throws RecognitionException {
        try {
            int _type = CONDITION_NUMBER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:545:30: ( C O N D I T I O N Underscore N U M B E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:545:34: C O N D I T I O N Underscore N U M B E R
            {
            mC(); 
            mO(); 
            mN(); 
            mD(); 
            mI(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 
            mUnderscore(); 
            mN(); 
            mU(); 
            mM(); 
            mB(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CONDITION_NUMBER"

    // $ANTLR start "CONDITION"
    public final void mCONDITION() throws RecognitionException {
        try {
            int _type = CONDITION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:546:30: ( C O N D I T I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:546:34: C O N D I T I O N
            {
            mC(); 
            mO(); 
            mN(); 
            mD(); 
            mI(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CONDITION"

    // $ANTLR start "CONNECTION_NAME"
    public final void mCONNECTION_NAME() throws RecognitionException {
        try {
            int _type = CONNECTION_NAME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:547:30: ( C O N N E C T I O N Underscore N A M E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:547:34: C O N N E C T I O N Underscore N A M E
            {
            mC(); 
            mO(); 
            mN(); 
            mN(); 
            mE(); 
            mC(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 
            mUnderscore(); 
            mN(); 
            mA(); 
            mM(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CONNECTION_NAME"

    // $ANTLR start "CONSTRAINTS"
    public final void mCONSTRAINTS() throws RecognitionException {
        try {
            int _type = CONSTRAINTS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:548:30: ( C O N S T R A I N T S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:548:34: C O N S T R A I N T S
            {
            mC(); 
            mO(); 
            mN(); 
            mS(); 
            mT(); 
            mR(); 
            mA(); 
            mI(); 
            mN(); 
            mT(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CONSTRAINTS"

    // $ANTLR start "CONSTRAINT_CATALOG"
    public final void mCONSTRAINT_CATALOG() throws RecognitionException {
        try {
            int _type = CONSTRAINT_CATALOG;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:549:30: ( C O N S T R A I N T Underscore C A T A L O G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:549:34: C O N S T R A I N T Underscore C A T A L O G
            {
            mC(); 
            mO(); 
            mN(); 
            mS(); 
            mT(); 
            mR(); 
            mA(); 
            mI(); 
            mN(); 
            mT(); 
            mUnderscore(); 
            mC(); 
            mA(); 
            mT(); 
            mA(); 
            mL(); 
            mO(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CONSTRAINT_CATALOG"

    // $ANTLR start "CONSTRAINT_NAME"
    public final void mCONSTRAINT_NAME() throws RecognitionException {
        try {
            int _type = CONSTRAINT_NAME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:550:30: ( C O N S T R A I N T Underscore N A M E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:550:34: C O N S T R A I N T Underscore N A M E
            {
            mC(); 
            mO(); 
            mN(); 
            mS(); 
            mT(); 
            mR(); 
            mA(); 
            mI(); 
            mN(); 
            mT(); 
            mUnderscore(); 
            mN(); 
            mA(); 
            mM(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CONSTRAINT_NAME"

    // $ANTLR start "CONSTRAINT_SCHEMA"
    public final void mCONSTRAINT_SCHEMA() throws RecognitionException {
        try {
            int _type = CONSTRAINT_SCHEMA;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:551:30: ( C O N S T R A I N T Underscore S C H E M A )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:551:34: C O N S T R A I N T Underscore S C H E M A
            {
            mC(); 
            mO(); 
            mN(); 
            mS(); 
            mT(); 
            mR(); 
            mA(); 
            mI(); 
            mN(); 
            mT(); 
            mUnderscore(); 
            mS(); 
            mC(); 
            mH(); 
            mE(); 
            mM(); 
            mA(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CONSTRAINT_SCHEMA"

    // $ANTLR start "CONSTRUCTORS"
    public final void mCONSTRUCTORS() throws RecognitionException {
        try {
            int _type = CONSTRUCTORS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:552:30: ( C O N S T R U C T O R S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:552:34: C O N S T R U C T O R S
            {
            mC(); 
            mO(); 
            mN(); 
            mS(); 
            mT(); 
            mR(); 
            mU(); 
            mC(); 
            mT(); 
            mO(); 
            mR(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CONSTRUCTORS"

    // $ANTLR start "CONST"
    public final void mCONST() throws RecognitionException {
        try {
            int _type = CONST;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:553:30: ( C O N S T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:553:34: C O N S T
            {
            mC(); 
            mO(); 
            mN(); 
            mS(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CONST"

    // $ANTLR start "CONTAINS"
    public final void mCONTAINS() throws RecognitionException {
        try {
            int _type = CONTAINS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:554:30: ( C O N T A I N S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:554:34: C O N T A I N S
            {
            mC(); 
            mO(); 
            mN(); 
            mT(); 
            mA(); 
            mI(); 
            mN(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CONTAINS"

    // $ANTLR start "CONVERT"
    public final void mCONVERT() throws RecognitionException {
        try {
            int _type = CONVERT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:555:30: ( C O N V E R T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:555:34: C O N V E R T
            {
            mC(); 
            mO(); 
            mN(); 
            mV(); 
            mE(); 
            mR(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CONVERT"

    // $ANTLR start "CORR"
    public final void mCORR() throws RecognitionException {
        try {
            int _type = CORR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:556:30: ( C O R R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:556:34: C O R R
            {
            mC(); 
            mO(); 
            mR(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CORR"

    // $ANTLR start "COUNT"
    public final void mCOUNT() throws RecognitionException {
        try {
            int _type = COUNT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:557:30: ( C O U N T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:557:34: C O U N T
            {
            mC(); 
            mO(); 
            mU(); 
            mN(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "COUNT"

    // $ANTLR start "COVAR_POP"
    public final void mCOVAR_POP() throws RecognitionException {
        try {
            int _type = COVAR_POP;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:558:30: ( C O V A R Underscore P O P )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:558:34: C O V A R Underscore P O P
            {
            mC(); 
            mO(); 
            mV(); 
            mA(); 
            mR(); 
            mUnderscore(); 
            mP(); 
            mO(); 
            mP(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "COVAR_POP"

    // $ANTLR start "COVAR_SAMP"
    public final void mCOVAR_SAMP() throws RecognitionException {
        try {
            int _type = COVAR_SAMP;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:559:30: ( C O V A R Underscore S A M P )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:559:34: C O V A R Underscore S A M P
            {
            mC(); 
            mO(); 
            mV(); 
            mA(); 
            mR(); 
            mUnderscore(); 
            mS(); 
            mA(); 
            mM(); 
            mP(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "COVAR_SAMP"

    // $ANTLR start "CUME_DIST"
    public final void mCUME_DIST() throws RecognitionException {
        try {
            int _type = CUME_DIST;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:560:30: ( C U M E Underscore D I S T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:560:34: C U M E Underscore D I S T
            {
            mC(); 
            mU(); 
            mM(); 
            mE(); 
            mUnderscore(); 
            mD(); 
            mI(); 
            mS(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CUME_DIST"

    // $ANTLR start "CURRENT_COLLATION"
    public final void mCURRENT_COLLATION() throws RecognitionException {
        try {
            int _type = CURRENT_COLLATION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:561:30: ( C U R R E N T Underscore C O L L A T I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:561:34: C U R R E N T Underscore C O L L A T I O N
            {
            mC(); 
            mU(); 
            mR(); 
            mR(); 
            mE(); 
            mN(); 
            mT(); 
            mUnderscore(); 
            mC(); 
            mO(); 
            mL(); 
            mL(); 
            mA(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CURRENT_COLLATION"

    // $ANTLR start "CURSOR_NAME"
    public final void mCURSOR_NAME() throws RecognitionException {
        try {
            int _type = CURSOR_NAME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:562:30: ( C U R S O R Underscore N A M E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:562:34: C U R S O R Underscore N A M E
            {
            mC(); 
            mU(); 
            mR(); 
            mS(); 
            mO(); 
            mR(); 
            mUnderscore(); 
            mN(); 
            mA(); 
            mM(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CURSOR_NAME"

    // $ANTLR start "DATA"
    public final void mDATA() throws RecognitionException {
        try {
            int _type = DATA;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:563:30: ( D A T A )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:563:34: D A T A
            {
            mD(); 
            mA(); 
            mT(); 
            mA(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DATA"

    // $ANTLR start "DATETIME_INTERVAL_CODE"
    public final void mDATETIME_INTERVAL_CODE() throws RecognitionException {
        try {
            int _type = DATETIME_INTERVAL_CODE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:564:30: ( D A T E T I M E Underscore I N T E R V A L Underscore C O D E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:564:34: D A T E T I M E Underscore I N T E R V A L Underscore C O D E
            {
            mD(); 
            mA(); 
            mT(); 
            mE(); 
            mT(); 
            mI(); 
            mM(); 
            mE(); 
            mUnderscore(); 
            mI(); 
            mN(); 
            mT(); 
            mE(); 
            mR(); 
            mV(); 
            mA(); 
            mL(); 
            mUnderscore(); 
            mC(); 
            mO(); 
            mD(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DATETIME_INTERVAL_CODE"

    // $ANTLR start "DATETIME_INTERVAL_PRECISION"
    public final void mDATETIME_INTERVAL_PRECISION() throws RecognitionException {
        try {
            int _type = DATETIME_INTERVAL_PRECISION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:565:30: ( D A T E T I M E Underscore I N T E R V A L Underscore P R E C I S I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:565:34: D A T E T I M E Underscore I N T E R V A L Underscore P R E C I S I O N
            {
            mD(); 
            mA(); 
            mT(); 
            mE(); 
            mT(); 
            mI(); 
            mM(); 
            mE(); 
            mUnderscore(); 
            mI(); 
            mN(); 
            mT(); 
            mE(); 
            mR(); 
            mV(); 
            mA(); 
            mL(); 
            mUnderscore(); 
            mP(); 
            mR(); 
            mE(); 
            mC(); 
            mI(); 
            mS(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DATETIME_INTERVAL_PRECISION"

    // $ANTLR start "DAYS"
    public final void mDAYS() throws RecognitionException {
        try {
            int _type = DAYS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:566:30: ( D A Y S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:566:34: D A Y S
            {
            mD(); 
            mA(); 
            mY(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DAYS"

    // $ANTLR start "DCL"
    public final void mDCL() throws RecognitionException {
        try {
            int _type = DCL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:567:30: ( D C L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:567:34: D C L
            {
            mD(); 
            mC(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DCL"

    // $ANTLR start "DEFAULTS"
    public final void mDEFAULTS() throws RecognitionException {
        try {
            int _type = DEFAULTS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:568:30: ( D E F A U L T S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:568:34: D E F A U L T S
            {
            mD(); 
            mE(); 
            mF(); 
            mA(); 
            mU(); 
            mL(); 
            mT(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DEFAULTS"

    // $ANTLR start "DEFERRABLE"
    public final void mDEFERRABLE() throws RecognitionException {
        try {
            int _type = DEFERRABLE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:569:30: ( D E F E R R A B L E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:569:34: D E F E R R A B L E
            {
            mD(); 
            mE(); 
            mF(); 
            mE(); 
            mR(); 
            mR(); 
            mA(); 
            mB(); 
            mL(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DEFERRABLE"

    // $ANTLR start "DEFERRED"
    public final void mDEFERRED() throws RecognitionException {
        try {
            int _type = DEFERRED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:570:30: ( D E F E R R E D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:570:34: D E F E R R E D
            {
            mD(); 
            mE(); 
            mF(); 
            mE(); 
            mR(); 
            mR(); 
            mE(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DEFERRED"

    // $ANTLR start "DEFINED"
    public final void mDEFINED() throws RecognitionException {
        try {
            int _type = DEFINED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:571:30: ( D E F I N E D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:571:34: D E F I N E D
            {
            mD(); 
            mE(); 
            mF(); 
            mI(); 
            mN(); 
            mE(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DEFINED"

    // $ANTLR start "DEFINER"
    public final void mDEFINER() throws RecognitionException {
        try {
            int _type = DEFINER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:572:30: ( D E F I N E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:572:34: D E F I N E R
            {
            mD(); 
            mE(); 
            mF(); 
            mI(); 
            mN(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DEFINER"

    // $ANTLR start "DEGREE"
    public final void mDEGREE() throws RecognitionException {
        try {
            int _type = DEGREE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:573:30: ( D E G R E E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:573:34: D E G R E E
            {
            mD(); 
            mE(); 
            mG(); 
            mR(); 
            mE(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DEGREE"

    // $ANTLR start "DENSE_RANK"
    public final void mDENSE_RANK() throws RecognitionException {
        try {
            int _type = DENSE_RANK;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:574:30: ( D E N S E Underscore R A N K )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:574:34: D E N S E Underscore R A N K
            {
            mD(); 
            mE(); 
            mN(); 
            mS(); 
            mE(); 
            mUnderscore(); 
            mR(); 
            mA(); 
            mN(); 
            mK(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DENSE_RANK"

    // $ANTLR start "DEPTH"
    public final void mDEPTH() throws RecognitionException {
        try {
            int _type = DEPTH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:575:30: ( D E P T H )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:575:34: D E P T H
            {
            mD(); 
            mE(); 
            mP(); 
            mT(); 
            mH(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DEPTH"

    // $ANTLR start "DERIVED"
    public final void mDERIVED() throws RecognitionException {
        try {
            int _type = DERIVED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:576:30: ( D E R I V E D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:576:34: D E R I V E D
            {
            mD(); 
            mE(); 
            mR(); 
            mI(); 
            mV(); 
            mE(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DERIVED"

    // $ANTLR start "DESCRIPTOR"
    public final void mDESCRIPTOR() throws RecognitionException {
        try {
            int _type = DESCRIPTOR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:577:30: ( D E S C R I P T O R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:577:34: D E S C R I P T O R
            {
            mD(); 
            mE(); 
            mS(); 
            mC(); 
            mR(); 
            mI(); 
            mP(); 
            mT(); 
            mO(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DESCRIPTOR"

    // $ANTLR start "DESC"
    public final void mDESC() throws RecognitionException {
        try {
            int _type = DESC;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:578:30: ( D E S C )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:578:34: D E S C
            {
            mD(); 
            mE(); 
            mS(); 
            mC(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DESC"

    // $ANTLR start "DIAGNOSTICS"
    public final void mDIAGNOSTICS() throws RecognitionException {
        try {
            int _type = DIAGNOSTICS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:579:30: ( D I A G N O S T I C S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:579:34: D I A G N O S T I C S
            {
            mD(); 
            mI(); 
            mA(); 
            mG(); 
            mN(); 
            mO(); 
            mS(); 
            mT(); 
            mI(); 
            mC(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DIAGNOSTICS"

    // $ANTLR start "DISPATCH"
    public final void mDISPATCH() throws RecognitionException {
        try {
            int _type = DISPATCH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:580:30: ( D I S P A T C H )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:580:34: D I S P A T C H
            {
            mD(); 
            mI(); 
            mS(); 
            mP(); 
            mA(); 
            mT(); 
            mC(); 
            mH(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DISPATCH"

    // $ANTLR start "DISPLAY"
    public final void mDISPLAY() throws RecognitionException {
        try {
            int _type = DISPLAY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:581:30: ( D I S P L A Y )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:581:34: D I S P L A Y
            {
            mD(); 
            mI(); 
            mS(); 
            mP(); 
            mL(); 
            mA(); 
            mY(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DISPLAY"

    // $ANTLR start "DOMAIN"
    public final void mDOMAIN() throws RecognitionException {
        try {
            int _type = DOMAIN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:582:30: ( D O M A I N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:582:34: D O M A I N
            {
            mD(); 
            mO(); 
            mM(); 
            mA(); 
            mI(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DOMAIN"

    // $ANTLR start "DOUBLE_PRECISION"
    public final void mDOUBLE_PRECISION() throws RecognitionException {
        try {
            int _type = DOUBLE_PRECISION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:583:30: ( D O U B L E Underscore P R E C I S I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:583:34: D O U B L E Underscore P R E C I S I O N
            {
            mD(); 
            mO(); 
            mU(); 
            mB(); 
            mL(); 
            mE(); 
            mUnderscore(); 
            mP(); 
            mR(); 
            mE(); 
            mC(); 
            mI(); 
            mS(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DOUBLE_PRECISION"

    // $ANTLR start "DYNAMIC_FUNCTION"
    public final void mDYNAMIC_FUNCTION() throws RecognitionException {
        try {
            int _type = DYNAMIC_FUNCTION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:584:30: ( D Y N A M I C Underscore F U N C T I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:584:34: D Y N A M I C Underscore F U N C T I O N
            {
            mD(); 
            mY(); 
            mN(); 
            mA(); 
            mM(); 
            mI(); 
            mC(); 
            mUnderscore(); 
            mF(); 
            mU(); 
            mN(); 
            mC(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DYNAMIC_FUNCTION"

    // $ANTLR start "DYNAMIC_FUNCTION_CODE"
    public final void mDYNAMIC_FUNCTION_CODE() throws RecognitionException {
        try {
            int _type = DYNAMIC_FUNCTION_CODE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:585:30: ( D Y N A M I C Underscore F U N C T I O N Underscore C O D E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:585:34: D Y N A M I C Underscore F U N C T I O N Underscore C O D E
            {
            mD(); 
            mY(); 
            mN(); 
            mA(); 
            mM(); 
            mI(); 
            mC(); 
            mUnderscore(); 
            mF(); 
            mU(); 
            mN(); 
            mC(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 
            mUnderscore(); 
            mC(); 
            mO(); 
            mD(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DYNAMIC_FUNCTION_CODE"

    // $ANTLR start "EQUALS"
    public final void mEQUALS() throws RecognitionException {
        try {
            int _type = EQUALS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:586:30: ( E Q U A L S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:586:34: E Q U A L S
            {
            mE(); 
            mQ(); 
            mU(); 
            mA(); 
            mL(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "EQUALS"

    // $ANTLR start "EVERY"
    public final void mEVERY() throws RecognitionException {
        try {
            int _type = EVERY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:587:30: ( E V E R Y )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:587:34: E V E R Y
            {
            mE(); 
            mV(); 
            mE(); 
            mR(); 
            mY(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "EVERY"

    // $ANTLR start "EXCEPTION"
    public final void mEXCEPTION() throws RecognitionException {
        try {
            int _type = EXCEPTION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:588:30: ( E X C E P T I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:588:34: E X C E P T I O N
            {
            mE(); 
            mX(); 
            mC(); 
            mE(); 
            mP(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "EXCEPTION"

    // $ANTLR start "EXCLUDE"
    public final void mEXCLUDE() throws RecognitionException {
        try {
            int _type = EXCLUDE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:589:30: ( E X C L U D E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:589:34: E X C L U D E
            {
            mE(); 
            mX(); 
            mC(); 
            mL(); 
            mU(); 
            mD(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "EXCLUDE"

    // $ANTLR start "EXCLUDING"
    public final void mEXCLUDING() throws RecognitionException {
        try {
            int _type = EXCLUDING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:590:30: ( E X C L U D I N G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:590:34: E X C L U D I N G
            {
            mE(); 
            mX(); 
            mC(); 
            mL(); 
            mU(); 
            mD(); 
            mI(); 
            mN(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "EXCLUDING"

    // $ANTLR start "EXP"
    public final void mEXP() throws RecognitionException {
        try {
            int _type = EXP;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:591:30: ( E X P )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:591:34: E X P
            {
            mE(); 
            mX(); 
            mP(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "EXP"

    // $ANTLR start "EXTERN"
    public final void mEXTERN() throws RecognitionException {
        try {
            int _type = EXTERN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:592:30: ( E X T E R N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:592:34: E X T E R N
            {
            mE(); 
            mX(); 
            mT(); 
            mE(); 
            mR(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "EXTERN"

    // $ANTLR start "EXTRACT"
    public final void mEXTRACT() throws RecognitionException {
        try {
            int _type = EXTRACT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:593:30: ( E X T R A C T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:593:34: E X T R A C T
            {
            mE(); 
            mX(); 
            mT(); 
            mR(); 
            mA(); 
            mC(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "EXTRACT"

    // $ANTLR start "FINAL"
    public final void mFINAL() throws RecognitionException {
        try {
            int _type = FINAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:594:30: ( F I N A L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:594:34: F I N A L
            {
            mF(); 
            mI(); 
            mN(); 
            mA(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "FINAL"

    // $ANTLR start "FIRST"
    public final void mFIRST() throws RecognitionException {
        try {
            int _type = FIRST;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:595:30: ( F I R S T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:595:34: F I R S T
            {
            mF(); 
            mI(); 
            mR(); 
            mS(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "FIRST"

    // $ANTLR start "FIXED"
    public final void mFIXED() throws RecognitionException {
        try {
            int _type = FIXED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:596:30: ( F I X E D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:596:34: F I X E D
            {
            mF(); 
            mI(); 
            mX(); 
            mE(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "FIXED"

    // $ANTLR start "FLOAT"
    public final void mFLOAT() throws RecognitionException {
        try {
            int _type = FLOAT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:597:30: ( F L O A T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:597:34: F L O A T
            {
            mF(); 
            mL(); 
            mO(); 
            mA(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "FLOAT"

    // $ANTLR start "FLOOR"
    public final void mFLOOR() throws RecognitionException {
        try {
            int _type = FLOOR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:598:30: ( F L O O R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:598:34: F L O O R
            {
            mF(); 
            mL(); 
            mO(); 
            mO(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "FLOOR"

    // $ANTLR start "FOLLOWING"
    public final void mFOLLOWING() throws RecognitionException {
        try {
            int _type = FOLLOWING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:599:30: ( F O L L O W I N G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:599:34: F O L L O W I N G
            {
            mF(); 
            mO(); 
            mL(); 
            mL(); 
            mO(); 
            mW(); 
            mI(); 
            mN(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "FOLLOWING"

    // $ANTLR start "FORTRAN"
    public final void mFORTRAN() throws RecognitionException {
        try {
            int _type = FORTRAN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:600:30: ( F O R T R A N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:600:34: F O R T R A N
            {
            mF(); 
            mO(); 
            mR(); 
            mT(); 
            mR(); 
            mA(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "FORTRAN"

    // $ANTLR start "FOUND"
    public final void mFOUND() throws RecognitionException {
        try {
            int _type = FOUND;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:601:30: ( F O U N D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:601:34: F O U N D
            {
            mF(); 
            mO(); 
            mU(); 
            mN(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "FOUND"

    // $ANTLR start "FUSION"
    public final void mFUSION() throws RecognitionException {
        try {
            int _type = FUSION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:602:30: ( F U S I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:602:34: F U S I O N
            {
            mF(); 
            mU(); 
            mS(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "FUSION"

    // $ANTLR start "GENERAL"
    public final void mGENERAL() throws RecognitionException {
        try {
            int _type = GENERAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:603:30: ( G E N E R A L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:603:34: G E N E R A L
            {
            mG(); 
            mE(); 
            mN(); 
            mE(); 
            mR(); 
            mA(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "GENERAL"

    // $ANTLR start "GOTO"
    public final void mGOTO() throws RecognitionException {
        try {
            int _type = GOTO;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:604:30: ( G O T O )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:604:34: G O T O
            {
            mG(); 
            mO(); 
            mT(); 
            mO(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "GOTO"

    // $ANTLR start "GO"
    public final void mGO() throws RecognitionException {
        try {
            int _type = GO;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:605:30: ( G O )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:605:34: G O
            {
            mG(); 
            mO(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "GO"

    // $ANTLR start "GRANTED"
    public final void mGRANTED() throws RecognitionException {
        try {
            int _type = GRANTED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:606:30: ( G R A N T E D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:606:34: G R A N T E D
            {
            mG(); 
            mR(); 
            mA(); 
            mN(); 
            mT(); 
            mE(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "GRANTED"

    // $ANTLR start "HIERARCHY"
    public final void mHIERARCHY() throws RecognitionException {
        try {
            int _type = HIERARCHY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:607:30: ( H I E R A R C H Y )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:607:34: H I E R A R C H Y
            {
            mH(); 
            mI(); 
            mE(); 
            mR(); 
            mA(); 
            mR(); 
            mC(); 
            mH(); 
            mY(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "HIERARCHY"

    // $ANTLR start "HOURS"
    public final void mHOURS() throws RecognitionException {
        try {
            int _type = HOURS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:608:30: ( H O U R S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:608:34: H O U R S
            {
            mH(); 
            mO(); 
            mU(); 
            mR(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "HOURS"

    // $ANTLR start "IMPLEMENTATION"
    public final void mIMPLEMENTATION() throws RecognitionException {
        try {
            int _type = IMPLEMENTATION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:609:30: ( I M P L E M E N T A T I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:609:34: I M P L E M E N T A T I O N
            {
            mI(); 
            mM(); 
            mP(); 
            mL(); 
            mE(); 
            mM(); 
            mE(); 
            mN(); 
            mT(); 
            mA(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "IMPLEMENTATION"

    // $ANTLR start "INCLUDING"
    public final void mINCLUDING() throws RecognitionException {
        try {
            int _type = INCLUDING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:610:30: ( I N C L U D I N G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:610:34: I N C L U D I N G
            {
            mI(); 
            mN(); 
            mC(); 
            mL(); 
            mU(); 
            mD(); 
            mI(); 
            mN(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "INCLUDING"

    // $ANTLR start "INCREMENT"
    public final void mINCREMENT() throws RecognitionException {
        try {
            int _type = INCREMENT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:611:30: ( I N C R E M E N T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:611:34: I N C R E M E N T
            {
            mI(); 
            mN(); 
            mC(); 
            mR(); 
            mE(); 
            mM(); 
            mE(); 
            mN(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "INCREMENT"

    // $ANTLR start "INDICATOR_TYPE"
    public final void mINDICATOR_TYPE() throws RecognitionException {
        try {
            int _type = INDICATOR_TYPE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:612:30: ( I N D I C A T O R Underscore T Y P E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:612:34: I N D I C A T O R Underscore T Y P E
            {
            mI(); 
            mN(); 
            mD(); 
            mI(); 
            mC(); 
            mA(); 
            mT(); 
            mO(); 
            mR(); 
            mUnderscore(); 
            mT(); 
            mY(); 
            mP(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "INDICATOR_TYPE"

    // $ANTLR start "INITIALLY"
    public final void mINITIALLY() throws RecognitionException {
        try {
            int _type = INITIALLY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:613:30: ( I N I T I A L L Y )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:613:34: I N I T I A L L Y
            {
            mI(); 
            mN(); 
            mI(); 
            mT(); 
            mI(); 
            mA(); 
            mL(); 
            mL(); 
            mY(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "INITIALLY"

    // $ANTLR start "INSTANCE"
    public final void mINSTANCE() throws RecognitionException {
        try {
            int _type = INSTANCE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:614:30: ( I N S T A N C E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:614:34: I N S T A N C E
            {
            mI(); 
            mN(); 
            mS(); 
            mT(); 
            mA(); 
            mN(); 
            mC(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "INSTANCE"

    // $ANTLR start "INSTANTIABLE"
    public final void mINSTANTIABLE() throws RecognitionException {
        try {
            int _type = INSTANTIABLE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:615:30: ( I N S T A N T I A B L E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:615:34: I N S T A N T I A B L E
            {
            mI(); 
            mN(); 
            mS(); 
            mT(); 
            mA(); 
            mN(); 
            mT(); 
            mI(); 
            mA(); 
            mB(); 
            mL(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "INSTANTIABLE"

    // $ANTLR start "INTERFACES"
    public final void mINTERFACES() throws RecognitionException {
        try {
            int _type = INTERFACES;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:616:30: ( I N T E R F A C E S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:616:34: I N T E R F A C E S
            {
            mI(); 
            mN(); 
            mT(); 
            mE(); 
            mR(); 
            mF(); 
            mA(); 
            mC(); 
            mE(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "INTERFACES"

    // $ANTLR start "INTERSECTION"
    public final void mINTERSECTION() throws RecognitionException {
        try {
            int _type = INTERSECTION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:617:30: ( I N T E R S E C T I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:617:34: I N T E R S E C T I O N
            {
            mI(); 
            mN(); 
            mT(); 
            mE(); 
            mR(); 
            mS(); 
            mE(); 
            mC(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "INTERSECTION"

    // $ANTLR start "INVOKER"
    public final void mINVOKER() throws RecognitionException {
        try {
            int _type = INVOKER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:618:30: ( I N V O K E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:618:34: I N V O K E R
            {
            mI(); 
            mN(); 
            mV(); 
            mO(); 
            mK(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "INVOKER"

    // $ANTLR start "KEY_MEMBER"
    public final void mKEY_MEMBER() throws RecognitionException {
        try {
            int _type = KEY_MEMBER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:619:30: ( K E Y Underscore M E M B E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:619:34: K E Y Underscore M E M B E R
            {
            mK(); 
            mE(); 
            mY(); 
            mUnderscore(); 
            mM(); 
            mE(); 
            mM(); 
            mB(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "KEY_MEMBER"

    // $ANTLR start "KEY_TYPE"
    public final void mKEY_TYPE() throws RecognitionException {
        try {
            int _type = KEY_TYPE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:620:30: ( K E Y Underscore T Y P E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:620:34: K E Y Underscore T Y P E
            {
            mK(); 
            mE(); 
            mY(); 
            mUnderscore(); 
            mT(); 
            mY(); 
            mP(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "KEY_TYPE"

    // $ANTLR start "KEY"
    public final void mKEY() throws RecognitionException {
        try {
            int _type = KEY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:621:30: ( K E Y )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:621:34: K E Y
            {
            mK(); 
            mE(); 
            mY(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "KEY"

    // $ANTLR start "KIND"
    public final void mKIND() throws RecognitionException {
        try {
            int _type = KIND;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:622:30: ( K I N D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:622:34: K I N D
            {
            mK(); 
            mI(); 
            mN(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "KIND"

    // $ANTLR start "LAST"
    public final void mLAST() throws RecognitionException {
        try {
            int _type = LAST;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:623:30: ( L A S T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:623:34: L A S T
            {
            mL(); 
            mA(); 
            mS(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "LAST"

    // $ANTLR start "LENGTH"
    public final void mLENGTH() throws RecognitionException {
        try {
            int _type = LENGTH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:624:30: ( L E N G T H )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:624:34: L E N G T H
            {
            mL(); 
            mE(); 
            mN(); 
            mG(); 
            mT(); 
            mH(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "LENGTH"

    // $ANTLR start "LEN"
    public final void mLEN() throws RecognitionException {
        try {
            int _type = LEN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:625:30: ( L E N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:625:34: L E N
            {
            mL(); 
            mE(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "LEN"

    // $ANTLR start "LEVEL"
    public final void mLEVEL() throws RecognitionException {
        try {
            int _type = LEVEL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:626:30: ( L E V E L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:626:34: L E V E L
            {
            mL(); 
            mE(); 
            mV(); 
            mE(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "LEVEL"

    // $ANTLR start "LOGICAL"
    public final void mLOGICAL() throws RecognitionException {
        try {
            int _type = LOGICAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:627:30: ( L O G I C A L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:627:34: L O G I C A L
            {
            mL(); 
            mO(); 
            mG(); 
            mI(); 
            mC(); 
            mA(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "LOGICAL"

    // $ANTLR start "LONG"
    public final void mLONG() throws RecognitionException {
        try {
            int _type = LONG;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:628:30: ( L O N G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:628:34: L O N G
            {
            mL(); 
            mO(); 
            mN(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "LONG"

    // $ANTLR start "LN"
    public final void mLN() throws RecognitionException {
        try {
            int _type = LN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:629:30: ( L N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:629:34: L N
            {
            mL(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "LN"

    // $ANTLR start "LOCATOR"
    public final void mLOCATOR() throws RecognitionException {
        try {
            int _type = LOCATOR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:630:30: ( L O C A T O R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:630:34: L O C A T O R
            {
            mL(); 
            mO(); 
            mC(); 
            mA(); 
            mT(); 
            mO(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "LOCATOR"

    // $ANTLR start "LOWER"
    public final void mLOWER() throws RecognitionException {
        try {
            int _type = LOWER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:631:30: ( L O W E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:631:34: L O W E R
            {
            mL(); 
            mO(); 
            mW(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "LOWER"

    // $ANTLR start "MAP"
    public final void mMAP() throws RecognitionException {
        try {
            int _type = MAP;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:632:30: ( M A P )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:632:34: M A P
            {
            mM(); 
            mA(); 
            mP(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MAP"

    // $ANTLR start "MATCHED"
    public final void mMATCHED() throws RecognitionException {
        try {
            int _type = MATCHED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:633:30: ( M A T C H E D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:633:34: M A T C H E D
            {
            mM(); 
            mA(); 
            mT(); 
            mC(); 
            mH(); 
            mE(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MATCHED"

    // $ANTLR start "MAXVALUE"
    public final void mMAXVALUE() throws RecognitionException {
        try {
            int _type = MAXVALUE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:634:30: ( M A X V A L U E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:634:34: M A X V A L U E
            {
            mM(); 
            mA(); 
            mX(); 
            mV(); 
            mA(); 
            mL(); 
            mU(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MAXVALUE"

    // $ANTLR start "MAX"
    public final void mMAX() throws RecognitionException {
        try {
            int _type = MAX;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:635:30: ( M A X )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:635:34: M A X
            {
            mM(); 
            mA(); 
            mX(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MAX"

    // $ANTLR start "MESSAGE_LENGTH"
    public final void mMESSAGE_LENGTH() throws RecognitionException {
        try {
            int _type = MESSAGE_LENGTH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:636:30: ( M E S S A G E Underscore L E N G T H )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:636:34: M E S S A G E Underscore L E N G T H
            {
            mM(); 
            mE(); 
            mS(); 
            mS(); 
            mA(); 
            mG(); 
            mE(); 
            mUnderscore(); 
            mL(); 
            mE(); 
            mN(); 
            mG(); 
            mT(); 
            mH(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MESSAGE_LENGTH"

    // $ANTLR start "MESSAGE_OCTET_LENGTH"
    public final void mMESSAGE_OCTET_LENGTH() throws RecognitionException {
        try {
            int _type = MESSAGE_OCTET_LENGTH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:637:30: ( M E S S A G E Underscore O C T E T Underscore L E N G T H )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:637:34: M E S S A G E Underscore O C T E T Underscore L E N G T H
            {
            mM(); 
            mE(); 
            mS(); 
            mS(); 
            mA(); 
            mG(); 
            mE(); 
            mUnderscore(); 
            mO(); 
            mC(); 
            mT(); 
            mE(); 
            mT(); 
            mUnderscore(); 
            mL(); 
            mE(); 
            mN(); 
            mG(); 
            mT(); 
            mH(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MESSAGE_OCTET_LENGTH"

    // $ANTLR start "MESSAGE_TEXT"
    public final void mMESSAGE_TEXT() throws RecognitionException {
        try {
            int _type = MESSAGE_TEXT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:638:30: ( M E S S A G E Underscore T E X T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:638:34: M E S S A G E Underscore T E X T
            {
            mM(); 
            mE(); 
            mS(); 
            mS(); 
            mA(); 
            mG(); 
            mE(); 
            mUnderscore(); 
            mT(); 
            mE(); 
            mX(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MESSAGE_TEXT"

    // $ANTLR start "MINVALUE"
    public final void mMINVALUE() throws RecognitionException {
        try {
            int _type = MINVALUE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:639:30: ( M I N V A L U E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:639:34: M I N V A L U E
            {
            mM(); 
            mI(); 
            mN(); 
            mV(); 
            mA(); 
            mL(); 
            mU(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MINVALUE"

    // $ANTLR start "MIN"
    public final void mMIN() throws RecognitionException {
        try {
            int _type = MIN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:640:30: ( M I N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:640:34: M I N
            {
            mM(); 
            mI(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MIN"

    // $ANTLR start "MOD"
    public final void mMOD() throws RecognitionException {
        try {
            int _type = MOD;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:641:30: ( M O D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:641:34: M O D
            {
            mM(); 
            mO(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MOD"

    // $ANTLR start "MORE"
    public final void mMORE() throws RecognitionException {
        try {
            int _type = MORE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:642:30: ( M O R E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:642:34: M O R E
            {
            mM(); 
            mO(); 
            mR(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MORE"

    // $ANTLR start "MUMPS"
    public final void mMUMPS() throws RecognitionException {
        try {
            int _type = MUMPS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:643:30: ( M U M P S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:643:34: M U M P S
            {
            mM(); 
            mU(); 
            mM(); 
            mP(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MUMPS"

    // $ANTLR start "NAMES"
    public final void mNAMES() throws RecognitionException {
        try {
            int _type = NAMES;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:644:30: ( N A M E S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:644:34: N A M E S
            {
            mN(); 
            mA(); 
            mM(); 
            mE(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NAMES"

    // $ANTLR start "NAME"
    public final void mNAME() throws RecognitionException {
        try {
            int _type = NAME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:645:30: ( N A M E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:645:34: N A M E
            {
            mN(); 
            mA(); 
            mM(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NAME"

    // $ANTLR start "NESTING"
    public final void mNESTING() throws RecognitionException {
        try {
            int _type = NESTING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:646:30: ( N E S T I N G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:646:34: N E S T I N G
            {
            mN(); 
            mE(); 
            mS(); 
            mT(); 
            mI(); 
            mN(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NESTING"

    // $ANTLR start "NEXT"
    public final void mNEXT() throws RecognitionException {
        try {
            int _type = NEXT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:647:30: ( N E X T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:647:34: N E X T
            {
            mN(); 
            mE(); 
            mX(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NEXT"

    // $ANTLR start "NORMALIZED"
    public final void mNORMALIZED() throws RecognitionException {
        try {
            int _type = NORMALIZED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:648:30: ( N O R M A L I Z E D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:648:34: N O R M A L I Z E D
            {
            mN(); 
            mO(); 
            mR(); 
            mM(); 
            mA(); 
            mL(); 
            mI(); 
            mZ(); 
            mE(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NORMALIZED"

    // $ANTLR start "NORMALIZE"
    public final void mNORMALIZE() throws RecognitionException {
        try {
            int _type = NORMALIZE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:649:30: ( N O R M A L I Z E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:649:34: N O R M A L I Z E
            {
            mN(); 
            mO(); 
            mR(); 
            mM(); 
            mA(); 
            mL(); 
            mI(); 
            mZ(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NORMALIZE"

    // $ANTLR start "NULLABLE"
    public final void mNULLABLE() throws RecognitionException {
        try {
            int _type = NULLABLE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:650:30: ( N U L L A B L E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:650:34: N U L L A B L E
            {
            mN(); 
            mU(); 
            mL(); 
            mL(); 
            mA(); 
            mB(); 
            mL(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NULLABLE"

    // $ANTLR start "NULLIF"
    public final void mNULLIF() throws RecognitionException {
        try {
            int _type = NULLIF;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:651:30: ( N U L L I F )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:651:34: N U L L I F
            {
            mN(); 
            mU(); 
            mL(); 
            mL(); 
            mI(); 
            mF(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NULLIF"

    // $ANTLR start "NULLS"
    public final void mNULLS() throws RecognitionException {
        try {
            int _type = NULLS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:652:30: ( N U L L S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:652:34: N U L L S
            {
            mN(); 
            mU(); 
            mL(); 
            mL(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NULLS"

    // $ANTLR start "NUMBER"
    public final void mNUMBER() throws RecognitionException {
        try {
            int _type = NUMBER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:653:30: ( N U M B E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:653:34: N U M B E R
            {
            mN(); 
            mU(); 
            mM(); 
            mB(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NUMBER"

    // $ANTLR start "OBJECT"
    public final void mOBJECT() throws RecognitionException {
        try {
            int _type = OBJECT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:654:30: ( O B J E C T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:654:34: O B J E C T
            {
            mO(); 
            mB(); 
            mJ(); 
            mE(); 
            mC(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "OBJECT"

    // $ANTLR start "OCTETS"
    public final void mOCTETS() throws RecognitionException {
        try {
            int _type = OCTETS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:655:30: ( O C T E T S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:655:34: O C T E T S
            {
            mO(); 
            mC(); 
            mT(); 
            mE(); 
            mT(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "OCTETS"

    // $ANTLR start "OCTET_LENGTH"
    public final void mOCTET_LENGTH() throws RecognitionException {
        try {
            int _type = OCTET_LENGTH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:656:30: ( O C T E T Underscore L E N G T H )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:656:34: O C T E T Underscore L E N G T H
            {
            mO(); 
            mC(); 
            mT(); 
            mE(); 
            mT(); 
            mUnderscore(); 
            mL(); 
            mE(); 
            mN(); 
            mG(); 
            mT(); 
            mH(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "OCTET_LENGTH"

    // $ANTLR start "OPTION"
    public final void mOPTION() throws RecognitionException {
        try {
            int _type = OPTION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:657:30: ( O P T I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:657:34: O P T I O N
            {
            mO(); 
            mP(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "OPTION"

    // $ANTLR start "OPTIONS"
    public final void mOPTIONS() throws RecognitionException {
        try {
            int _type = OPTIONS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:658:30: ( O P T I O N S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:658:34: O P T I O N S
            {
            mO(); 
            mP(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "OPTIONS"

    // $ANTLR start "ORDERING"
    public final void mORDERING() throws RecognitionException {
        try {
            int _type = ORDERING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:659:30: ( O R D E R I N G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:659:34: O R D E R I N G
            {
            mO(); 
            mR(); 
            mD(); 
            mE(); 
            mR(); 
            mI(); 
            mN(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ORDERING"

    // $ANTLR start "ORDINALITY"
    public final void mORDINALITY() throws RecognitionException {
        try {
            int _type = ORDINALITY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:660:30: ( O R D I N A L I T Y )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:660:34: O R D I N A L I T Y
            {
            mO(); 
            mR(); 
            mD(); 
            mI(); 
            mN(); 
            mA(); 
            mL(); 
            mI(); 
            mT(); 
            mY(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ORDINALITY"

    // $ANTLR start "OTHERS"
    public final void mOTHERS() throws RecognitionException {
        try {
            int _type = OTHERS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:661:30: ( O T H E R S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:661:34: O T H E R S
            {
            mO(); 
            mT(); 
            mH(); 
            mE(); 
            mR(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "OTHERS"

    // $ANTLR start "OVERLAY"
    public final void mOVERLAY() throws RecognitionException {
        try {
            int _type = OVERLAY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:662:30: ( O V E R L A Y )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:662:34: O V E R L A Y
            {
            mO(); 
            mV(); 
            mE(); 
            mR(); 
            mL(); 
            mA(); 
            mY(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "OVERLAY"

    // $ANTLR start "OVERRIDING"
    public final void mOVERRIDING() throws RecognitionException {
        try {
            int _type = OVERRIDING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:663:30: ( O V E R R I D I N G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:663:34: O V E R R I D I N G
            {
            mO(); 
            mV(); 
            mE(); 
            mR(); 
            mR(); 
            mI(); 
            mD(); 
            mI(); 
            mN(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "OVERRIDING"

    // $ANTLR start "PACKED"
    public final void mPACKED() throws RecognitionException {
        try {
            int _type = PACKED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:664:30: ( P A C K E D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:664:34: P A C K E D
            {
            mP(); 
            mA(); 
            mC(); 
            mK(); 
            mE(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PACKED"

    // $ANTLR start "PAD"
    public final void mPAD() throws RecognitionException {
        try {
            int _type = PAD;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:665:30: ( P A D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:665:34: P A D
            {
            mP(); 
            mA(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PAD"

    // $ANTLR start "PARAMETER_MODE"
    public final void mPARAMETER_MODE() throws RecognitionException {
        try {
            int _type = PARAMETER_MODE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:666:30: ( P A R A M E T E R Underscore M O D E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:666:34: P A R A M E T E R Underscore M O D E
            {
            mP(); 
            mA(); 
            mR(); 
            mA(); 
            mM(); 
            mE(); 
            mT(); 
            mE(); 
            mR(); 
            mUnderscore(); 
            mM(); 
            mO(); 
            mD(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PARAMETER_MODE"

    // $ANTLR start "PARAMETER_NAME"
    public final void mPARAMETER_NAME() throws RecognitionException {
        try {
            int _type = PARAMETER_NAME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:667:30: ( P A R A M E T E R Underscore N A M E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:667:34: P A R A M E T E R Underscore N A M E
            {
            mP(); 
            mA(); 
            mR(); 
            mA(); 
            mM(); 
            mE(); 
            mT(); 
            mE(); 
            mR(); 
            mUnderscore(); 
            mN(); 
            mA(); 
            mM(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PARAMETER_NAME"

    // $ANTLR start "PARAMETER_ORDINAL_POSITION"
    public final void mPARAMETER_ORDINAL_POSITION() throws RecognitionException {
        try {
            int _type = PARAMETER_ORDINAL_POSITION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:668:30: ( P A R A M E T E R Underscore O R D I N A L Underscore P O S I T I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:668:34: P A R A M E T E R Underscore O R D I N A L Underscore P O S I T I O N
            {
            mP(); 
            mA(); 
            mR(); 
            mA(); 
            mM(); 
            mE(); 
            mT(); 
            mE(); 
            mR(); 
            mUnderscore(); 
            mO(); 
            mR(); 
            mD(); 
            mI(); 
            mN(); 
            mA(); 
            mL(); 
            mUnderscore(); 
            mP(); 
            mO(); 
            mS(); 
            mI(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PARAMETER_ORDINAL_POSITION"

    // $ANTLR start "PARAMETER_SPECIFIC_CATALOG"
    public final void mPARAMETER_SPECIFIC_CATALOG() throws RecognitionException {
        try {
            int _type = PARAMETER_SPECIFIC_CATALOG;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:669:30: ( P A R A M E T E R Underscore S P E C I F I C Underscore C A T A L O G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:669:34: P A R A M E T E R Underscore S P E C I F I C Underscore C A T A L O G
            {
            mP(); 
            mA(); 
            mR(); 
            mA(); 
            mM(); 
            mE(); 
            mT(); 
            mE(); 
            mR(); 
            mUnderscore(); 
            mS(); 
            mP(); 
            mE(); 
            mC(); 
            mI(); 
            mF(); 
            mI(); 
            mC(); 
            mUnderscore(); 
            mC(); 
            mA(); 
            mT(); 
            mA(); 
            mL(); 
            mO(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PARAMETER_SPECIFIC_CATALOG"

    // $ANTLR start "PARAMETER_SPECIFIC_NAME"
    public final void mPARAMETER_SPECIFIC_NAME() throws RecognitionException {
        try {
            int _type = PARAMETER_SPECIFIC_NAME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:670:30: ( P A R A M E T E R Underscore S P E C I F I C Underscore N A M E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:670:34: P A R A M E T E R Underscore S P E C I F I C Underscore N A M E
            {
            mP(); 
            mA(); 
            mR(); 
            mA(); 
            mM(); 
            mE(); 
            mT(); 
            mE(); 
            mR(); 
            mUnderscore(); 
            mS(); 
            mP(); 
            mE(); 
            mC(); 
            mI(); 
            mF(); 
            mI(); 
            mC(); 
            mUnderscore(); 
            mN(); 
            mA(); 
            mM(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PARAMETER_SPECIFIC_NAME"

    // $ANTLR start "PARAMETER_SPECIFIC_SCHEMA"
    public final void mPARAMETER_SPECIFIC_SCHEMA() throws RecognitionException {
        try {
            int _type = PARAMETER_SPECIFIC_SCHEMA;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:671:30: ( P A R A M E T E R Underscore S P E C I F I C Underscore S C H E M A )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:671:34: P A R A M E T E R Underscore S P E C I F I C Underscore S C H E M A
            {
            mP(); 
            mA(); 
            mR(); 
            mA(); 
            mM(); 
            mE(); 
            mT(); 
            mE(); 
            mR(); 
            mUnderscore(); 
            mS(); 
            mP(); 
            mE(); 
            mC(); 
            mI(); 
            mF(); 
            mI(); 
            mC(); 
            mUnderscore(); 
            mS(); 
            mC(); 
            mH(); 
            mE(); 
            mM(); 
            mA(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PARAMETER_SPECIFIC_SCHEMA"

    // $ANTLR start "PARTIAL"
    public final void mPARTIAL() throws RecognitionException {
        try {
            int _type = PARTIAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:672:30: ( P A R T I A L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:672:34: P A R T I A L
            {
            mP(); 
            mA(); 
            mR(); 
            mT(); 
            mI(); 
            mA(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PARTIAL"

    // $ANTLR start "PASCAL"
    public final void mPASCAL() throws RecognitionException {
        try {
            int _type = PASCAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:673:30: ( P A S C A L )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:673:34: P A S C A L
            {
            mP(); 
            mA(); 
            mS(); 
            mC(); 
            mA(); 
            mL(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PASCAL"

    // $ANTLR start "PATH"
    public final void mPATH() throws RecognitionException {
        try {
            int _type = PATH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:674:30: ( P A T H )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:674:34: P A T H
            {
            mP(); 
            mA(); 
            mT(); 
            mH(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PATH"

    // $ANTLR start "PERCENTILE_CONT"
    public final void mPERCENTILE_CONT() throws RecognitionException {
        try {
            int _type = PERCENTILE_CONT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:675:30: ( P E R C E N T I L E Underscore C O N T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:675:34: P E R C E N T I L E Underscore C O N T
            {
            mP(); 
            mE(); 
            mR(); 
            mC(); 
            mE(); 
            mN(); 
            mT(); 
            mI(); 
            mL(); 
            mE(); 
            mUnderscore(); 
            mC(); 
            mO(); 
            mN(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PERCENTILE_CONT"

    // $ANTLR start "PERCENTILE_DISC"
    public final void mPERCENTILE_DISC() throws RecognitionException {
        try {
            int _type = PERCENTILE_DISC;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:676:30: ( P E R C E N T I L E Underscore D I S C )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:676:34: P E R C E N T I L E Underscore D I S C
            {
            mP(); 
            mE(); 
            mR(); 
            mC(); 
            mE(); 
            mN(); 
            mT(); 
            mI(); 
            mL(); 
            mE(); 
            mUnderscore(); 
            mD(); 
            mI(); 
            mS(); 
            mC(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PERCENTILE_DISC"

    // $ANTLR start "PERCENT_RANK"
    public final void mPERCENT_RANK() throws RecognitionException {
        try {
            int _type = PERCENT_RANK;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:677:30: ( P E R C E N T Underscore R A N K )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:677:34: P E R C E N T Underscore R A N K
            {
            mP(); 
            mE(); 
            mR(); 
            mC(); 
            mE(); 
            mN(); 
            mT(); 
            mUnderscore(); 
            mR(); 
            mA(); 
            mN(); 
            mK(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PERCENT_RANK"

    // $ANTLR start "PICTURE"
    public final void mPICTURE() throws RecognitionException {
        try {
            int _type = PICTURE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:678:30: ( P I C T U R E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:678:34: P I C T U R E
            {
            mP(); 
            mI(); 
            mC(); 
            mT(); 
            mU(); 
            mR(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PICTURE"

    // $ANTLR start "PIC"
    public final void mPIC() throws RecognitionException {
        try {
            int _type = PIC;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:679:30: ( P I C )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:679:34: P I C
            {
            mP(); 
            mI(); 
            mC(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PIC"

    // $ANTLR start "PLACING"
    public final void mPLACING() throws RecognitionException {
        try {
            int _type = PLACING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:680:30: ( P L A C I N G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:680:34: P L A C I N G
            {
            mP(); 
            mL(); 
            mA(); 
            mC(); 
            mI(); 
            mN(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PLACING"

    // $ANTLR start "PLI"
    public final void mPLI() throws RecognitionException {
        try {
            int _type = PLI;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:681:30: ( P L I | P L '1' )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0=='P'||LA9_0=='p') ) {
                int LA9_1 = input.LA(2);

                if ( (LA9_1=='L'||LA9_1=='l') ) {
                    int LA9_2 = input.LA(3);

                    if ( (LA9_2=='1') ) {
                        alt9=2;
                    }
                    else if ( (LA9_2=='I'||LA9_2=='i') ) {
                        alt9=1;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 9, 2, input);

                        throw nvae;
                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:681:34: P L I
                    {
                    mP(); 
                    mL(); 
                    mI(); 

                    }
                    break;
                case 2 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:681:42: P L '1'
                    {
                    mP(); 
                    mL(); 
                    match('1'); 

                    }
                    break;

            }
            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PLI"

    // $ANTLR start "POSITION"
    public final void mPOSITION() throws RecognitionException {
        try {
            int _type = POSITION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:682:30: ( P O S I T I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:682:34: P O S I T I O N
            {
            mP(); 
            mO(); 
            mS(); 
            mI(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "POSITION"

    // $ANTLR start "POWER"
    public final void mPOWER() throws RecognitionException {
        try {
            int _type = POWER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:683:30: ( P O W E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:683:34: P O W E R
            {
            mP(); 
            mO(); 
            mW(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "POWER"

    // $ANTLR start "PRECEDING"
    public final void mPRECEDING() throws RecognitionException {
        try {
            int _type = PRECEDING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:684:30: ( P R E C E D I N G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:684:34: P R E C E D I N G
            {
            mP(); 
            mR(); 
            mE(); 
            mC(); 
            mE(); 
            mD(); 
            mI(); 
            mN(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PRECEDING"

    // $ANTLR start "PRESERVE"
    public final void mPRESERVE() throws RecognitionException {
        try {
            int _type = PRESERVE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:685:30: ( P R E S E R V E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:685:34: P R E S E R V E
            {
            mP(); 
            mR(); 
            mE(); 
            mS(); 
            mE(); 
            mR(); 
            mV(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PRESERVE"

    // $ANTLR start "PRIOR"
    public final void mPRIOR() throws RecognitionException {
        try {
            int _type = PRIOR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:686:30: ( P R I O R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:686:34: P R I O R
            {
            mP(); 
            mR(); 
            mI(); 
            mO(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PRIOR"

    // $ANTLR start "PRIVILEGES"
    public final void mPRIVILEGES() throws RecognitionException {
        try {
            int _type = PRIVILEGES;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:687:30: ( P R I V I L E G E S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:687:34: P R I V I L E G E S
            {
            mP(); 
            mR(); 
            mI(); 
            mV(); 
            mI(); 
            mL(); 
            mE(); 
            mG(); 
            mE(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PRIVILEGES"

    // $ANTLR start "PUBLIC"
    public final void mPUBLIC() throws RecognitionException {
        try {
            int _type = PUBLIC;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:688:30: ( P U B L I C )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:688:34: P U B L I C
            {
            mP(); 
            mU(); 
            mB(); 
            mL(); 
            mI(); 
            mC(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "PUBLIC"

    // $ANTLR start "RANK"
    public final void mRANK() throws RecognitionException {
        try {
            int _type = RANK;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:689:30: ( R A N K )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:689:34: R A N K
            {
            mR(); 
            mA(); 
            mN(); 
            mK(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "RANK"

    // $ANTLR start "READ"
    public final void mREAD() throws RecognitionException {
        try {
            int _type = READ;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:690:30: ( R E A D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:690:34: R E A D
            {
            mR(); 
            mE(); 
            mA(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "READ"

    // $ANTLR start "REGR_AVGX"
    public final void mREGR_AVGX() throws RecognitionException {
        try {
            int _type = REGR_AVGX;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:691:30: ( R E G R Underscore A V G X )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:691:34: R E G R Underscore A V G X
            {
            mR(); 
            mE(); 
            mG(); 
            mR(); 
            mUnderscore(); 
            mA(); 
            mV(); 
            mG(); 
            mX(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "REGR_AVGX"

    // $ANTLR start "REGR_AVGY"
    public final void mREGR_AVGY() throws RecognitionException {
        try {
            int _type = REGR_AVGY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:692:30: ( R E G R Underscore A V G Y )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:692:34: R E G R Underscore A V G Y
            {
            mR(); 
            mE(); 
            mG(); 
            mR(); 
            mUnderscore(); 
            mA(); 
            mV(); 
            mG(); 
            mY(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "REGR_AVGY"

    // $ANTLR start "REGR_COUNT"
    public final void mREGR_COUNT() throws RecognitionException {
        try {
            int _type = REGR_COUNT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:693:30: ( R E G R Underscore C O U N T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:693:34: R E G R Underscore C O U N T
            {
            mR(); 
            mE(); 
            mG(); 
            mR(); 
            mUnderscore(); 
            mC(); 
            mO(); 
            mU(); 
            mN(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "REGR_COUNT"

    // $ANTLR start "REGR_INTERCEPT"
    public final void mREGR_INTERCEPT() throws RecognitionException {
        try {
            int _type = REGR_INTERCEPT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:694:30: ( R E G R Underscore I N T E R C E P T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:694:34: R E G R Underscore I N T E R C E P T
            {
            mR(); 
            mE(); 
            mG(); 
            mR(); 
            mUnderscore(); 
            mI(); 
            mN(); 
            mT(); 
            mE(); 
            mR(); 
            mC(); 
            mE(); 
            mP(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "REGR_INTERCEPT"

    // $ANTLR start "REGR_R2"
    public final void mREGR_R2() throws RecognitionException {
        try {
            int _type = REGR_R2;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:695:30: ( R E G R Underscore R '2' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:695:34: R E G R Underscore R '2'
            {
            mR(); 
            mE(); 
            mG(); 
            mR(); 
            mUnderscore(); 
            mR(); 
            match('2'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "REGR_R2"

    // $ANTLR start "REGR_SLOPE"
    public final void mREGR_SLOPE() throws RecognitionException {
        try {
            int _type = REGR_SLOPE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:696:30: ( R E G R Underscore S L O P E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:696:34: R E G R Underscore S L O P E
            {
            mR(); 
            mE(); 
            mG(); 
            mR(); 
            mUnderscore(); 
            mS(); 
            mL(); 
            mO(); 
            mP(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "REGR_SLOPE"

    // $ANTLR start "REGR_SXX"
    public final void mREGR_SXX() throws RecognitionException {
        try {
            int _type = REGR_SXX;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:697:30: ( R E G R Underscore S X X )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:697:34: R E G R Underscore S X X
            {
            mR(); 
            mE(); 
            mG(); 
            mR(); 
            mUnderscore(); 
            mS(); 
            mX(); 
            mX(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "REGR_SXX"

    // $ANTLR start "REGR_SXY"
    public final void mREGR_SXY() throws RecognitionException {
        try {
            int _type = REGR_SXY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:698:30: ( R E G R Underscore S X Y )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:698:34: R E G R Underscore S X Y
            {
            mR(); 
            mE(); 
            mG(); 
            mR(); 
            mUnderscore(); 
            mS(); 
            mX(); 
            mY(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "REGR_SXY"

    // $ANTLR start "REGR_SYY"
    public final void mREGR_SYY() throws RecognitionException {
        try {
            int _type = REGR_SYY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:699:30: ( R E G R Underscore S Y Y )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:699:34: R E G R Underscore S Y Y
            {
            mR(); 
            mE(); 
            mG(); 
            mR(); 
            mUnderscore(); 
            mS(); 
            mY(); 
            mY(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "REGR_SYY"

    // $ANTLR start "RELATIVE"
    public final void mRELATIVE() throws RecognitionException {
        try {
            int _type = RELATIVE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:700:30: ( R E L A T I V E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:700:34: R E L A T I V E
            {
            mR(); 
            mE(); 
            mL(); 
            mA(); 
            mT(); 
            mI(); 
            mV(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "RELATIVE"

    // $ANTLR start "REPEATABLE"
    public final void mREPEATABLE() throws RecognitionException {
        try {
            int _type = REPEATABLE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:701:30: ( R E P E A T A B L E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:701:34: R E P E A T A B L E
            {
            mR(); 
            mE(); 
            mP(); 
            mE(); 
            mA(); 
            mT(); 
            mA(); 
            mB(); 
            mL(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "REPEATABLE"

    // $ANTLR start "RESTART"
    public final void mRESTART() throws RecognitionException {
        try {
            int _type = RESTART;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:702:30: ( R E S T A R T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:702:34: R E S T A R T
            {
            mR(); 
            mE(); 
            mS(); 
            mT(); 
            mA(); 
            mR(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "RESTART"

    // $ANTLR start "RESTRICT"
    public final void mRESTRICT() throws RecognitionException {
        try {
            int _type = RESTRICT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:703:30: ( R E S T R I C T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:703:34: R E S T R I C T
            {
            mR(); 
            mE(); 
            mS(); 
            mT(); 
            mR(); 
            mI(); 
            mC(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "RESTRICT"

    // $ANTLR start "RESULT"
    public final void mRESULT() throws RecognitionException {
        try {
            int _type = RESULT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:704:30: ( R E S U L T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:704:34: R E S U L T
            {
            mR(); 
            mE(); 
            mS(); 
            mU(); 
            mL(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "RESULT"

    // $ANTLR start "RETURNED_CARDINALITY"
    public final void mRETURNED_CARDINALITY() throws RecognitionException {
        try {
            int _type = RETURNED_CARDINALITY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:705:30: ( R E T U R N E D Underscore C A R D I N A L I T Y )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:705:34: R E T U R N E D Underscore C A R D I N A L I T Y
            {
            mR(); 
            mE(); 
            mT(); 
            mU(); 
            mR(); 
            mN(); 
            mE(); 
            mD(); 
            mUnderscore(); 
            mC(); 
            mA(); 
            mR(); 
            mD(); 
            mI(); 
            mN(); 
            mA(); 
            mL(); 
            mI(); 
            mT(); 
            mY(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "RETURNED_CARDINALITY"

    // $ANTLR start "RETURNED_LENGTH"
    public final void mRETURNED_LENGTH() throws RecognitionException {
        try {
            int _type = RETURNED_LENGTH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:706:30: ( R E T U R N E D Underscore L E N G T H )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:706:34: R E T U R N E D Underscore L E N G T H
            {
            mR(); 
            mE(); 
            mT(); 
            mU(); 
            mR(); 
            mN(); 
            mE(); 
            mD(); 
            mUnderscore(); 
            mL(); 
            mE(); 
            mN(); 
            mG(); 
            mT(); 
            mH(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "RETURNED_LENGTH"

    // $ANTLR start "RETURNED_OCTET_LENGTH"
    public final void mRETURNED_OCTET_LENGTH() throws RecognitionException {
        try {
            int _type = RETURNED_OCTET_LENGTH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:707:30: ( R E T U R N E D Underscore O C T E T Underscore L E N G T H )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:707:34: R E T U R N E D Underscore O C T E T Underscore L E N G T H
            {
            mR(); 
            mE(); 
            mT(); 
            mU(); 
            mR(); 
            mN(); 
            mE(); 
            mD(); 
            mUnderscore(); 
            mO(); 
            mC(); 
            mT(); 
            mE(); 
            mT(); 
            mUnderscore(); 
            mL(); 
            mE(); 
            mN(); 
            mG(); 
            mT(); 
            mH(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "RETURNED_OCTET_LENGTH"

    // $ANTLR start "RETURNED_SQLSTATE"
    public final void mRETURNED_SQLSTATE() throws RecognitionException {
        try {
            int _type = RETURNED_SQLSTATE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:708:30: ( R E T U R N E D Underscore S Q L S T A T E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:708:34: R E T U R N E D Underscore S Q L S T A T E
            {
            mR(); 
            mE(); 
            mT(); 
            mU(); 
            mR(); 
            mN(); 
            mE(); 
            mD(); 
            mUnderscore(); 
            mS(); 
            mQ(); 
            mL(); 
            mS(); 
            mT(); 
            mA(); 
            mT(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "RETURNED_SQLSTATE"

    // $ANTLR start "ROLE"
    public final void mROLE() throws RecognitionException {
        try {
            int _type = ROLE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:709:30: ( R O L E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:709:34: R O L E
            {
            mR(); 
            mO(); 
            mL(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ROLE"

    // $ANTLR start "ROUTINE_CATALOG"
    public final void mROUTINE_CATALOG() throws RecognitionException {
        try {
            int _type = ROUTINE_CATALOG;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:710:30: ( R O U T I N E Underscore C A T A L O G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:710:34: R O U T I N E Underscore C A T A L O G
            {
            mR(); 
            mO(); 
            mU(); 
            mT(); 
            mI(); 
            mN(); 
            mE(); 
            mUnderscore(); 
            mC(); 
            mA(); 
            mT(); 
            mA(); 
            mL(); 
            mO(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ROUTINE_CATALOG"

    // $ANTLR start "ROUTINE_NAME"
    public final void mROUTINE_NAME() throws RecognitionException {
        try {
            int _type = ROUTINE_NAME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:711:30: ( R O U T I N E Underscore N A M E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:711:34: R O U T I N E Underscore N A M E
            {
            mR(); 
            mO(); 
            mU(); 
            mT(); 
            mI(); 
            mN(); 
            mE(); 
            mUnderscore(); 
            mN(); 
            mA(); 
            mM(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ROUTINE_NAME"

    // $ANTLR start "ROUTINE_SCHEMA"
    public final void mROUTINE_SCHEMA() throws RecognitionException {
        try {
            int _type = ROUTINE_SCHEMA;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:712:30: ( R O U T I N E Underscore S C H E M A )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:712:34: R O U T I N E Underscore S C H E M A
            {
            mR(); 
            mO(); 
            mU(); 
            mT(); 
            mI(); 
            mN(); 
            mE(); 
            mUnderscore(); 
            mS(); 
            mC(); 
            mH(); 
            mE(); 
            mM(); 
            mA(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ROUTINE_SCHEMA"

    // $ANTLR start "ROUTINE"
    public final void mROUTINE() throws RecognitionException {
        try {
            int _type = ROUTINE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:713:30: ( R O U T I N E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:713:34: R O U T I N E
            {
            mR(); 
            mO(); 
            mU(); 
            mT(); 
            mI(); 
            mN(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ROUTINE"

    // $ANTLR start "ROW_COUNT"
    public final void mROW_COUNT() throws RecognitionException {
        try {
            int _type = ROW_COUNT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:714:30: ( R O W Underscore C O U N T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:714:34: R O W Underscore C O U N T
            {
            mR(); 
            mO(); 
            mW(); 
            mUnderscore(); 
            mC(); 
            mO(); 
            mU(); 
            mN(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ROW_COUNT"

    // $ANTLR start "ROW_NUMBER"
    public final void mROW_NUMBER() throws RecognitionException {
        try {
            int _type = ROW_NUMBER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:715:30: ( R O W Underscore N U M B E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:715:34: R O W Underscore N U M B E R
            {
            mR(); 
            mO(); 
            mW(); 
            mUnderscore(); 
            mN(); 
            mU(); 
            mM(); 
            mB(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ROW_NUMBER"

    // $ANTLR start "SCALE"
    public final void mSCALE() throws RecognitionException {
        try {
            int _type = SCALE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:716:30: ( S C A L E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:716:34: S C A L E
            {
            mS(); 
            mC(); 
            mA(); 
            mL(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SCALE"

    // $ANTLR start "SCHEMA_NAME"
    public final void mSCHEMA_NAME() throws RecognitionException {
        try {
            int _type = SCHEMA_NAME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:717:30: ( S C H E M A Underscore N A M E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:717:34: S C H E M A Underscore N A M E
            {
            mS(); 
            mC(); 
            mH(); 
            mE(); 
            mM(); 
            mA(); 
            mUnderscore(); 
            mN(); 
            mA(); 
            mM(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SCHEMA_NAME"

    // $ANTLR start "SCHEMA"
    public final void mSCHEMA() throws RecognitionException {
        try {
            int _type = SCHEMA;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:718:30: ( S C H E M A )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:718:34: S C H E M A
            {
            mS(); 
            mC(); 
            mH(); 
            mE(); 
            mM(); 
            mA(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SCHEMA"

    // $ANTLR start "SCOPE_CATALOG"
    public final void mSCOPE_CATALOG() throws RecognitionException {
        try {
            int _type = SCOPE_CATALOG;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:719:30: ( S C O P E Underscore C A T A L O G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:719:34: S C O P E Underscore C A T A L O G
            {
            mS(); 
            mC(); 
            mO(); 
            mP(); 
            mE(); 
            mUnderscore(); 
            mC(); 
            mA(); 
            mT(); 
            mA(); 
            mL(); 
            mO(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SCOPE_CATALOG"

    // $ANTLR start "SCOPE_NAME"
    public final void mSCOPE_NAME() throws RecognitionException {
        try {
            int _type = SCOPE_NAME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:720:30: ( S C O P E Underscore N A M E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:720:34: S C O P E Underscore N A M E
            {
            mS(); 
            mC(); 
            mO(); 
            mP(); 
            mE(); 
            mUnderscore(); 
            mN(); 
            mA(); 
            mM(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SCOPE_NAME"

    // $ANTLR start "SCOPE_SCHEMA"
    public final void mSCOPE_SCHEMA() throws RecognitionException {
        try {
            int _type = SCOPE_SCHEMA;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:721:30: ( S C O P E Underscore S C H E M A )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:721:34: S C O P E Underscore S C H E M A
            {
            mS(); 
            mC(); 
            mO(); 
            mP(); 
            mE(); 
            mUnderscore(); 
            mS(); 
            mC(); 
            mH(); 
            mE(); 
            mM(); 
            mA(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SCOPE_SCHEMA"

    // $ANTLR start "SECTION"
    public final void mSECTION() throws RecognitionException {
        try {
            int _type = SECTION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:722:30: ( S E C T I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:722:34: S E C T I O N
            {
            mS(); 
            mE(); 
            mC(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SECTION"

    // $ANTLR start "SECURITY"
    public final void mSECURITY() throws RecognitionException {
        try {
            int _type = SECURITY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:723:30: ( S E C U R I T Y )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:723:34: S E C U R I T Y
            {
            mS(); 
            mE(); 
            mC(); 
            mU(); 
            mR(); 
            mI(); 
            mT(); 
            mY(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SECURITY"

    // $ANTLR start "SELF"
    public final void mSELF() throws RecognitionException {
        try {
            int _type = SELF;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:724:30: ( S E L F )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:724:34: S E L F
            {
            mS(); 
            mE(); 
            mL(); 
            mF(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SELF"

    // $ANTLR start "SEPARATE"
    public final void mSEPARATE() throws RecognitionException {
        try {
            int _type = SEPARATE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:725:30: ( S E P A R A T E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:725:34: S E P A R A T E
            {
            mS(); 
            mE(); 
            mP(); 
            mA(); 
            mR(); 
            mA(); 
            mT(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SEPARATE"

    // $ANTLR start "SEQUENCE"
    public final void mSEQUENCE() throws RecognitionException {
        try {
            int _type = SEQUENCE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:726:30: ( S E Q U E N C E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:726:34: S E Q U E N C E
            {
            mS(); 
            mE(); 
            mQ(); 
            mU(); 
            mE(); 
            mN(); 
            mC(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SEQUENCE"

    // $ANTLR start "SERIALIZABLE"
    public final void mSERIALIZABLE() throws RecognitionException {
        try {
            int _type = SERIALIZABLE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:727:30: ( S E R I A L I Z A B L E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:727:34: S E R I A L I Z A B L E
            {
            mS(); 
            mE(); 
            mR(); 
            mI(); 
            mA(); 
            mL(); 
            mI(); 
            mZ(); 
            mA(); 
            mB(); 
            mL(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SERIALIZABLE"

    // $ANTLR start "SERVER_NAME"
    public final void mSERVER_NAME() throws RecognitionException {
        try {
            int _type = SERVER_NAME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:728:30: ( S E R V E R Underscore N A M E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:728:34: S E R V E R Underscore N A M E
            {
            mS(); 
            mE(); 
            mR(); 
            mV(); 
            mE(); 
            mR(); 
            mUnderscore(); 
            mN(); 
            mA(); 
            mM(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SERVER_NAME"

    // $ANTLR start "SESSION"
    public final void mSESSION() throws RecognitionException {
        try {
            int _type = SESSION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:729:30: ( S E S S I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:729:34: S E S S I O N
            {
            mS(); 
            mE(); 
            mS(); 
            mS(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SESSION"

    // $ANTLR start "SETS"
    public final void mSETS() throws RecognitionException {
        try {
            int _type = SETS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:730:30: ( S E T S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:730:34: S E T S
            {
            mS(); 
            mE(); 
            mT(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SETS"

    // $ANTLR start "SHORT"
    public final void mSHORT() throws RecognitionException {
        try {
            int _type = SHORT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:731:30: ( S H O R T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:731:34: S H O R T
            {
            mS(); 
            mH(); 
            mO(); 
            mR(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SHORT"

    // $ANTLR start "SIGNED"
    public final void mSIGNED() throws RecognitionException {
        try {
            int _type = SIGNED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:732:30: ( S I G N E D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:732:34: S I G N E D
            {
            mS(); 
            mI(); 
            mG(); 
            mN(); 
            mE(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SIGNED"

    // $ANTLR start "SIGN"
    public final void mSIGN() throws RecognitionException {
        try {
            int _type = SIGN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:733:30: ( S I G N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:733:34: S I G N
            {
            mS(); 
            mI(); 
            mG(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SIGN"

    // $ANTLR start "SIMPLE"
    public final void mSIMPLE() throws RecognitionException {
        try {
            int _type = SIMPLE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:734:30: ( S I M P L E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:734:34: S I M P L E
            {
            mS(); 
            mI(); 
            mM(); 
            mP(); 
            mL(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SIMPLE"

    // $ANTLR start "SIZE"
    public final void mSIZE() throws RecognitionException {
        try {
            int _type = SIZE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:735:30: ( S I Z E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:735:34: S I Z E
            {
            mS(); 
            mI(); 
            mZ(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SIZE"

    // $ANTLR start "SOURCE"
    public final void mSOURCE() throws RecognitionException {
        try {
            int _type = SOURCE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:736:30: ( S O U R C E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:736:34: S O U R C E
            {
            mS(); 
            mO(); 
            mU(); 
            mR(); 
            mC(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SOURCE"

    // $ANTLR start "SPACE"
    public final void mSPACE() throws RecognitionException {
        try {
            int _type = SPACE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:737:30: ( S P A C E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:737:34: S P A C E
            {
            mS(); 
            mP(); 
            mA(); 
            mC(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SPACE"

    // $ANTLR start "SPECIFIC_NAME"
    public final void mSPECIFIC_NAME() throws RecognitionException {
        try {
            int _type = SPECIFIC_NAME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:738:30: ( S P E C I F I C Underscore N A M E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:738:34: S P E C I F I C Underscore N A M E
            {
            mS(); 
            mP(); 
            mE(); 
            mC(); 
            mI(); 
            mF(); 
            mI(); 
            mC(); 
            mUnderscore(); 
            mN(); 
            mA(); 
            mM(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SPECIFIC_NAME"

    // $ANTLR start "SQLSTATE_TYPE"
    public final void mSQLSTATE_TYPE() throws RecognitionException {
        try {
            int _type = SQLSTATE_TYPE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:739:30: ( S Q L S T A T E Underscore T Y P E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:739:34: S Q L S T A T E Underscore T Y P E
            {
            mS(); 
            mQ(); 
            mL(); 
            mS(); 
            mT(); 
            mA(); 
            mT(); 
            mE(); 
            mUnderscore(); 
            mT(); 
            mY(); 
            mP(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SQLSTATE_TYPE"

    // $ANTLR start "SQRT"
    public final void mSQRT() throws RecognitionException {
        try {
            int _type = SQRT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:740:30: ( S Q R T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:740:34: S Q R T
            {
            mS(); 
            mQ(); 
            mR(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SQRT"

    // $ANTLR start "STATEMENT"
    public final void mSTATEMENT() throws RecognitionException {
        try {
            int _type = STATEMENT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:741:30: ( S T A T E M E N T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:741:34: S T A T E M E N T
            {
            mS(); 
            mT(); 
            mA(); 
            mT(); 
            mE(); 
            mM(); 
            mE(); 
            mN(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "STATEMENT"

    // $ANTLR start "STATE"
    public final void mSTATE() throws RecognitionException {
        try {
            int _type = STATE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:742:30: ( S T A T E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:742:34: S T A T E
            {
            mS(); 
            mT(); 
            mA(); 
            mT(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "STATE"

    // $ANTLR start "STDDEV_POP"
    public final void mSTDDEV_POP() throws RecognitionException {
        try {
            int _type = STDDEV_POP;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:743:30: ( S T D D E V Underscore P O P )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:743:34: S T D D E V Underscore P O P
            {
            mS(); 
            mT(); 
            mD(); 
            mD(); 
            mE(); 
            mV(); 
            mUnderscore(); 
            mP(); 
            mO(); 
            mP(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "STDDEV_POP"

    // $ANTLR start "STDDEV_SAMP"
    public final void mSTDDEV_SAMP() throws RecognitionException {
        try {
            int _type = STDDEV_SAMP;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:744:30: ( S T D D E V Underscore S A M P )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:744:34: S T D D E V Underscore S A M P
            {
            mS(); 
            mT(); 
            mD(); 
            mD(); 
            mE(); 
            mV(); 
            mUnderscore(); 
            mS(); 
            mA(); 
            mM(); 
            mP(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "STDDEV_SAMP"

    // $ANTLR start "STRUCTURE"
    public final void mSTRUCTURE() throws RecognitionException {
        try {
            int _type = STRUCTURE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:745:30: ( S T R U C T U R E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:745:34: S T R U C T U R E
            {
            mS(); 
            mT(); 
            mR(); 
            mU(); 
            mC(); 
            mT(); 
            mU(); 
            mR(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "STRUCTURE"

    // $ANTLR start "STYLE"
    public final void mSTYLE() throws RecognitionException {
        try {
            int _type = STYLE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:746:30: ( S T Y L E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:746:34: S T Y L E
            {
            mS(); 
            mT(); 
            mY(); 
            mL(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "STYLE"

    // $ANTLR start "SUBCLASS_ORIGIN"
    public final void mSUBCLASS_ORIGIN() throws RecognitionException {
        try {
            int _type = SUBCLASS_ORIGIN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:747:30: ( S U B C L A S S Underscore O R I G I N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:747:34: S U B C L A S S Underscore O R I G I N
            {
            mS(); 
            mU(); 
            mB(); 
            mC(); 
            mL(); 
            mA(); 
            mS(); 
            mS(); 
            mUnderscore(); 
            mO(); 
            mR(); 
            mI(); 
            mG(); 
            mI(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SUBCLASS_ORIGIN"

    // $ANTLR start "SUBSTRING"
    public final void mSUBSTRING() throws RecognitionException {
        try {
            int _type = SUBSTRING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:748:30: ( S U B S T R I N G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:748:34: S U B S T R I N G
            {
            mS(); 
            mU(); 
            mB(); 
            mS(); 
            mT(); 
            mR(); 
            mI(); 
            mN(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SUBSTRING"

    // $ANTLR start "SUM"
    public final void mSUM() throws RecognitionException {
        try {
            int _type = SUM;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:749:30: ( S U M )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:749:34: S U M
            {
            mS(); 
            mU(); 
            mM(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "SUM"

    // $ANTLR start "TABLESAMPLE"
    public final void mTABLESAMPLE() throws RecognitionException {
        try {
            int _type = TABLESAMPLE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:750:30: ( T A B L E S A M P L E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:750:34: T A B L E S A M P L E
            {
            mT(); 
            mA(); 
            mB(); 
            mL(); 
            mE(); 
            mS(); 
            mA(); 
            mM(); 
            mP(); 
            mL(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TABLESAMPLE"

    // $ANTLR start "TABLE_NAME"
    public final void mTABLE_NAME() throws RecognitionException {
        try {
            int _type = TABLE_NAME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:751:30: ( T A B L E Underscore N A M E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:751:34: T A B L E Underscore N A M E
            {
            mT(); 
            mA(); 
            mB(); 
            mL(); 
            mE(); 
            mUnderscore(); 
            mN(); 
            mA(); 
            mM(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TABLE_NAME"

    // $ANTLR start "TEMPORARY"
    public final void mTEMPORARY() throws RecognitionException {
        try {
            int _type = TEMPORARY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:752:30: ( T E M P O R A R Y )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:752:34: T E M P O R A R Y
            {
            mT(); 
            mE(); 
            mM(); 
            mP(); 
            mO(); 
            mR(); 
            mA(); 
            mR(); 
            mY(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TEMPORARY"

    // $ANTLR start "TIES"
    public final void mTIES() throws RecognitionException {
        try {
            int _type = TIES;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:753:30: ( T I E S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:753:34: T I E S
            {
            mT(); 
            mI(); 
            mE(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TIES"

    // $ANTLR start "TOP_LEVEL_COUNT"
    public final void mTOP_LEVEL_COUNT() throws RecognitionException {
        try {
            int _type = TOP_LEVEL_COUNT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:754:30: ( T O P Underscore L E V E L Underscore C O U N T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:754:34: T O P Underscore L E V E L Underscore C O U N T
            {
            mT(); 
            mO(); 
            mP(); 
            mUnderscore(); 
            mL(); 
            mE(); 
            mV(); 
            mE(); 
            mL(); 
            mUnderscore(); 
            mC(); 
            mO(); 
            mU(); 
            mN(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TOP_LEVEL_COUNT"

    // $ANTLR start "TRANSACTIONS_COMMITTED"
    public final void mTRANSACTIONS_COMMITTED() throws RecognitionException {
        try {
            int _type = TRANSACTIONS_COMMITTED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:755:30: ( T R A N S A C T I O N S Underscore C O M M I T T E D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:755:34: T R A N S A C T I O N S Underscore C O M M I T T E D
            {
            mT(); 
            mR(); 
            mA(); 
            mN(); 
            mS(); 
            mA(); 
            mC(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 
            mS(); 
            mUnderscore(); 
            mC(); 
            mO(); 
            mM(); 
            mM(); 
            mI(); 
            mT(); 
            mT(); 
            mE(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TRANSACTIONS_COMMITTED"

    // $ANTLR start "TRANSACTIONS_ROLLED_BACK"
    public final void mTRANSACTIONS_ROLLED_BACK() throws RecognitionException {
        try {
            int _type = TRANSACTIONS_ROLLED_BACK;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:756:30: ( T R A N S A C T I O N S Underscore R O L L E D Underscore B A C K )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:756:34: T R A N S A C T I O N S Underscore R O L L E D Underscore B A C K
            {
            mT(); 
            mR(); 
            mA(); 
            mN(); 
            mS(); 
            mA(); 
            mC(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 
            mS(); 
            mUnderscore(); 
            mR(); 
            mO(); 
            mL(); 
            mL(); 
            mE(); 
            mD(); 
            mUnderscore(); 
            mB(); 
            mA(); 
            mC(); 
            mK(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TRANSACTIONS_ROLLED_BACK"

    // $ANTLR start "TRANSACTION_ACTIVE"
    public final void mTRANSACTION_ACTIVE() throws RecognitionException {
        try {
            int _type = TRANSACTION_ACTIVE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:757:30: ( T R A N S A C T I O N Underscore A C T I V E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:757:34: T R A N S A C T I O N Underscore A C T I V E
            {
            mT(); 
            mR(); 
            mA(); 
            mN(); 
            mS(); 
            mA(); 
            mC(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 
            mUnderscore(); 
            mA(); 
            mC(); 
            mT(); 
            mI(); 
            mV(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TRANSACTION_ACTIVE"

    // $ANTLR start "TRANSACTION"
    public final void mTRANSACTION() throws RecognitionException {
        try {
            int _type = TRANSACTION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:758:30: ( T R A N S A C T I O N )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:758:34: T R A N S A C T I O N
            {
            mT(); 
            mR(); 
            mA(); 
            mN(); 
            mS(); 
            mA(); 
            mC(); 
            mT(); 
            mI(); 
            mO(); 
            mN(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TRANSACTION"

    // $ANTLR start "TRANSFORMS"
    public final void mTRANSFORMS() throws RecognitionException {
        try {
            int _type = TRANSFORMS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:759:30: ( T R A N S F O R M S )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:759:34: T R A N S F O R M S
            {
            mT(); 
            mR(); 
            mA(); 
            mN(); 
            mS(); 
            mF(); 
            mO(); 
            mR(); 
            mM(); 
            mS(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TRANSFORMS"

    // $ANTLR start "TRANSFORM"
    public final void mTRANSFORM() throws RecognitionException {
        try {
            int _type = TRANSFORM;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:760:30: ( T R A N S F O R M )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:760:34: T R A N S F O R M
            {
            mT(); 
            mR(); 
            mA(); 
            mN(); 
            mS(); 
            mF(); 
            mO(); 
            mR(); 
            mM(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TRANSFORM"

    // $ANTLR start "TRANSLATE"
    public final void mTRANSLATE() throws RecognitionException {
        try {
            int _type = TRANSLATE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:761:30: ( T R A N S L A T E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:761:34: T R A N S L A T E
            {
            mT(); 
            mR(); 
            mA(); 
            mN(); 
            mS(); 
            mL(); 
            mA(); 
            mT(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TRANSLATE"

    // $ANTLR start "TRIGGER_CATALOG"
    public final void mTRIGGER_CATALOG() throws RecognitionException {
        try {
            int _type = TRIGGER_CATALOG;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:762:30: ( T R I G G E R Underscore C A T A L O G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:762:34: T R I G G E R Underscore C A T A L O G
            {
            mT(); 
            mR(); 
            mI(); 
            mG(); 
            mG(); 
            mE(); 
            mR(); 
            mUnderscore(); 
            mC(); 
            mA(); 
            mT(); 
            mA(); 
            mL(); 
            mO(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TRIGGER_CATALOG"

    // $ANTLR start "TRIGGER_NAME"
    public final void mTRIGGER_NAME() throws RecognitionException {
        try {
            int _type = TRIGGER_NAME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:763:30: ( T R I G G E R Underscore N A M E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:763:34: T R I G G E R Underscore N A M E
            {
            mT(); 
            mR(); 
            mI(); 
            mG(); 
            mG(); 
            mE(); 
            mR(); 
            mUnderscore(); 
            mN(); 
            mA(); 
            mM(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TRIGGER_NAME"

    // $ANTLR start "TRIGGER_SCHEMA"
    public final void mTRIGGER_SCHEMA() throws RecognitionException {
        try {
            int _type = TRIGGER_SCHEMA;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:764:30: ( T R I G G E R Underscore S C H E M A )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:764:34: T R I G G E R Underscore S C H E M A
            {
            mT(); 
            mR(); 
            mI(); 
            mG(); 
            mG(); 
            mE(); 
            mR(); 
            mUnderscore(); 
            mS(); 
            mC(); 
            mH(); 
            mE(); 
            mM(); 
            mA(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TRIGGER_SCHEMA"

    // $ANTLR start "TRIM"
    public final void mTRIM() throws RecognitionException {
        try {
            int _type = TRIM;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:765:30: ( T R I M )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:765:34: T R I M
            {
            mT(); 
            mR(); 
            mI(); 
            mM(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TRIM"

    // $ANTLR start "TYPE"
    public final void mTYPE() throws RecognitionException {
        try {
            int _type = TYPE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:766:30: ( T Y P E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:766:34: T Y P E
            {
            mT(); 
            mY(); 
            mP(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TYPE"

    // $ANTLR start "UNBOUNDED"
    public final void mUNBOUNDED() throws RecognitionException {
        try {
            int _type = UNBOUNDED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:767:30: ( U N B O U N D E D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:767:34: U N B O U N D E D
            {
            mU(); 
            mN(); 
            mB(); 
            mO(); 
            mU(); 
            mN(); 
            mD(); 
            mE(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "UNBOUNDED"

    // $ANTLR start "UNCOMMITTED"
    public final void mUNCOMMITTED() throws RecognitionException {
        try {
            int _type = UNCOMMITTED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:768:30: ( U N C O M M I T T E D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:768:34: U N C O M M I T T E D
            {
            mU(); 
            mN(); 
            mC(); 
            mO(); 
            mM(); 
            mM(); 
            mI(); 
            mT(); 
            mT(); 
            mE(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "UNCOMMITTED"

    // $ANTLR start "UNDER"
    public final void mUNDER() throws RecognitionException {
        try {
            int _type = UNDER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:769:30: ( U N D E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:769:34: U N D E R
            {
            mU(); 
            mN(); 
            mD(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "UNDER"

    // $ANTLR start "UNNAMED"
    public final void mUNNAMED() throws RecognitionException {
        try {
            int _type = UNNAMED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:770:30: ( U N N A M E D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:770:34: U N N A M E D
            {
            mU(); 
            mN(); 
            mN(); 
            mA(); 
            mM(); 
            mE(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "UNNAMED"

    // $ANTLR start "UNSIGNED"
    public final void mUNSIGNED() throws RecognitionException {
        try {
            int _type = UNSIGNED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:771:30: ( U N S I G N E D )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:771:34: U N S I G N E D
            {
            mU(); 
            mN(); 
            mS(); 
            mI(); 
            mG(); 
            mN(); 
            mE(); 
            mD(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "UNSIGNED"

    // $ANTLR start "UPPER"
    public final void mUPPER() throws RecognitionException {
        try {
            int _type = UPPER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:772:30: ( U P P E R )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:772:34: U P P E R
            {
            mU(); 
            mP(); 
            mP(); 
            mE(); 
            mR(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "UPPER"

    // $ANTLR start "USAGE"
    public final void mUSAGE() throws RecognitionException {
        try {
            int _type = USAGE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:773:30: ( U S A G E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:773:34: U S A G E
            {
            mU(); 
            mS(); 
            mA(); 
            mG(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "USAGE"

    // $ANTLR start "USER_DEFINED_TYPE_CATALOG"
    public final void mUSER_DEFINED_TYPE_CATALOG() throws RecognitionException {
        try {
            int _type = USER_DEFINED_TYPE_CATALOG;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:774:30: ( U S E R Underscore D E F I N E D Underscore T Y P E Underscore C A T A L O G )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:774:34: U S E R Underscore D E F I N E D Underscore T Y P E Underscore C A T A L O G
            {
            mU(); 
            mS(); 
            mE(); 
            mR(); 
            mUnderscore(); 
            mD(); 
            mE(); 
            mF(); 
            mI(); 
            mN(); 
            mE(); 
            mD(); 
            mUnderscore(); 
            mT(); 
            mY(); 
            mP(); 
            mE(); 
            mUnderscore(); 
            mC(); 
            mA(); 
            mT(); 
            mA(); 
            mL(); 
            mO(); 
            mG(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "USER_DEFINED_TYPE_CATALOG"

    // $ANTLR start "USER_DEFINED_TYPE_CODE"
    public final void mUSER_DEFINED_TYPE_CODE() throws RecognitionException {
        try {
            int _type = USER_DEFINED_TYPE_CODE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:775:30: ( U S E R Underscore D E F I N E D Underscore T Y P E Underscore C O D E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:775:34: U S E R Underscore D E F I N E D Underscore T Y P E Underscore C O D E
            {
            mU(); 
            mS(); 
            mE(); 
            mR(); 
            mUnderscore(); 
            mD(); 
            mE(); 
            mF(); 
            mI(); 
            mN(); 
            mE(); 
            mD(); 
            mUnderscore(); 
            mT(); 
            mY(); 
            mP(); 
            mE(); 
            mUnderscore(); 
            mC(); 
            mO(); 
            mD(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "USER_DEFINED_TYPE_CODE"

    // $ANTLR start "USER_DEFINED_TYPE_NAME"
    public final void mUSER_DEFINED_TYPE_NAME() throws RecognitionException {
        try {
            int _type = USER_DEFINED_TYPE_NAME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:776:30: ( U S E R Underscore D E F I N E D Underscore T Y P E Underscore N A M E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:776:34: U S E R Underscore D E F I N E D Underscore T Y P E Underscore N A M E
            {
            mU(); 
            mS(); 
            mE(); 
            mR(); 
            mUnderscore(); 
            mD(); 
            mE(); 
            mF(); 
            mI(); 
            mN(); 
            mE(); 
            mD(); 
            mUnderscore(); 
            mT(); 
            mY(); 
            mP(); 
            mE(); 
            mUnderscore(); 
            mN(); 
            mA(); 
            mM(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "USER_DEFINED_TYPE_NAME"

    // $ANTLR start "USER_DEFINED_TYPE_SCHEMA"
    public final void mUSER_DEFINED_TYPE_SCHEMA() throws RecognitionException {
        try {
            int _type = USER_DEFINED_TYPE_SCHEMA;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:777:30: ( U S E R Underscore D E F I N E D Underscore T Y P E Underscore S C H E M A )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:777:34: U S E R Underscore D E F I N E D Underscore T Y P E Underscore S C H E M A
            {
            mU(); 
            mS(); 
            mE(); 
            mR(); 
            mUnderscore(); 
            mD(); 
            mE(); 
            mF(); 
            mI(); 
            mN(); 
            mE(); 
            mD(); 
            mUnderscore(); 
            mT(); 
            mY(); 
            mP(); 
            mE(); 
            mUnderscore(); 
            mS(); 
            mC(); 
            mH(); 
            mE(); 
            mM(); 
            mA(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "USER_DEFINED_TYPE_SCHEMA"

    // $ANTLR start "VAR_POP"
    public final void mVAR_POP() throws RecognitionException {
        try {
            int _type = VAR_POP;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:778:30: ( V A R Underscore P O P )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:778:34: V A R Underscore P O P
            {
            mV(); 
            mA(); 
            mR(); 
            mUnderscore(); 
            mP(); 
            mO(); 
            mP(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "VAR_POP"

    // $ANTLR start "VAR_SAMP"
    public final void mVAR_SAMP() throws RecognitionException {
        try {
            int _type = VAR_SAMP;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:779:30: ( V A R Underscore S A M P )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:779:34: V A R Underscore S A M P
            {
            mV(); 
            mA(); 
            mR(); 
            mUnderscore(); 
            mS(); 
            mA(); 
            mM(); 
            mP(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "VAR_SAMP"

    // $ANTLR start "VIEW"
    public final void mVIEW() throws RecognitionException {
        try {
            int _type = VIEW;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:780:30: ( V I E W )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:780:34: V I E W
            {
            mV(); 
            mI(); 
            mE(); 
            mW(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "VIEW"

    // $ANTLR start "VOLATILE"
    public final void mVOLATILE() throws RecognitionException {
        try {
            int _type = VOLATILE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:781:30: ( V O L A T I L E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:781:34: V O L A T I L E
            {
            mV(); 
            mO(); 
            mL(); 
            mA(); 
            mT(); 
            mI(); 
            mL(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "VOLATILE"

    // $ANTLR start "WIDTH_BUCKET"
    public final void mWIDTH_BUCKET() throws RecognitionException {
        try {
            int _type = WIDTH_BUCKET;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:782:30: ( W I D T H Underscore B U C K E T )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:782:34: W I D T H Underscore B U C K E T
            {
            mW(); 
            mI(); 
            mD(); 
            mT(); 
            mH(); 
            mUnderscore(); 
            mB(); 
            mU(); 
            mC(); 
            mK(); 
            mE(); 
            mT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "WIDTH_BUCKET"

    // $ANTLR start "WORK"
    public final void mWORK() throws RecognitionException {
        try {
            int _type = WORK;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:783:30: ( W O R K )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:783:34: W O R K
            {
            mW(); 
            mO(); 
            mR(); 
            mK(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "WORK"

    // $ANTLR start "WRITE"
    public final void mWRITE() throws RecognitionException {
        try {
            int _type = WRITE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:784:30: ( W R I T E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:784:34: W R I T E
            {
            mW(); 
            mR(); 
            mI(); 
            mT(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "WRITE"

    // $ANTLR start "ZONE"
    public final void mZONE() throws RecognitionException {
        try {
            int _type = ZONE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:785:30: ( Z O N E )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:785:34: Z O N E
            {
            mZ(); 
            mO(); 
            mN(); 
            mE(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ZONE"

    // $ANTLR start "Not_Equals_Operator"
    public final void mNot_Equals_Operator() throws RecognitionException {
        try {
            int _type = Not_Equals_Operator;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:790:2: ( '<>' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:790:5: '<>'
            {
            match("<>"); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Not_Equals_Operator"

    // $ANTLR start "Greater_Or_Equals_Operator"
    public final void mGreater_Or_Equals_Operator() throws RecognitionException {
        try {
            int _type = Greater_Or_Equals_Operator;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:792:2: ( '>=' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:792:5: '>='
            {
            match(">="); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Greater_Or_Equals_Operator"

    // $ANTLR start "Less_Or_Equals_Operator"
    public final void mLess_Or_Equals_Operator() throws RecognitionException {
        try {
            int _type = Less_Or_Equals_Operator;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:794:2: ( '<=' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:794:5: '<='
            {
            match("<="); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Less_Or_Equals_Operator"

    // $ANTLR start "Concatenation_Operator"
    public final void mConcatenation_Operator() throws RecognitionException {
        try {
            int _type = Concatenation_Operator;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:796:2: ( '||' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:796:5: '||'
            {
            match("||"); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Concatenation_Operator"

    // $ANTLR start "Right_Arrow"
    public final void mRight_Arrow() throws RecognitionException {
        try {
            int _type = Right_Arrow;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:798:2: ( '->' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:798:5: '->'
            {
            match("->"); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Right_Arrow"

    // $ANTLR start "Double_Colon"
    public final void mDouble_Colon() throws RecognitionException {
        try {
            int _type = Double_Colon;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:800:2: ( '::' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:800:5: '::'
            {
            match("::"); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Double_Colon"

    // $ANTLR start "Double_Period"
    public final void mDouble_Period() throws RecognitionException {
        try {
            int _type = Double_Period;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:802:2: ( '..' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:802:5: '..'
            {
            match(".."); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Double_Period"

    // $ANTLR start "Back_Quote"
    public final void mBack_Quote() throws RecognitionException {
        try {
            int _type = Back_Quote;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:805:2: ( '`' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:805:5: '`'
            {
            match('`'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Back_Quote"

    // $ANTLR start "Tilde"
    public final void mTilde() throws RecognitionException {
        try {
            int _type = Tilde;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:807:2: ( '~' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:807:5: '~'
            {
            match('~'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Tilde"

    // $ANTLR start "Exclamation"
    public final void mExclamation() throws RecognitionException {
        try {
            int _type = Exclamation;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:809:2: ( '!' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:809:5: '!'
            {
            match('!'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Exclamation"

    // $ANTLR start "AT_Sign"
    public final void mAT_Sign() throws RecognitionException {
        try {
            int _type = AT_Sign;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:811:2: ( '@' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:811:5: '@'
            {
            match('@'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "AT_Sign"

    // $ANTLR start "Percent"
    public final void mPercent() throws RecognitionException {
        try {
            int _type = Percent;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:813:2: ( '\\%' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:813:5: '\\%'
            {
            match('%'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Percent"

    // $ANTLR start "Circumflex"
    public final void mCircumflex() throws RecognitionException {
        try {
            int _type = Circumflex;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:815:2: ( '^' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:815:5: '^'
            {
            match('^'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Circumflex"

    // $ANTLR start "Ampersand"
    public final void mAmpersand() throws RecognitionException {
        try {
            int _type = Ampersand;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:817:2: ( '&' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:817:5: '&'
            {
            match('&'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Ampersand"

    // $ANTLR start "Asterisk"
    public final void mAsterisk() throws RecognitionException {
        try {
            int _type = Asterisk;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:819:2: ( '*' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:819:5: '*'
            {
            match('*'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Asterisk"

    // $ANTLR start "Left_Paren"
    public final void mLeft_Paren() throws RecognitionException {
        try {
            int _type = Left_Paren;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:821:2: ( '(' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:821:5: '('
            {
            match('('); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Left_Paren"

    // $ANTLR start "Right_Paren"
    public final void mRight_Paren() throws RecognitionException {
        try {
            int _type = Right_Paren;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:823:2: ( ')' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:823:5: ')'
            {
            match(')'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Right_Paren"

    // $ANTLR start "Plus_Sign"
    public final void mPlus_Sign() throws RecognitionException {
        try {
            int _type = Plus_Sign;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:825:2: ( '+' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:825:5: '+'
            {
            match('+'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Plus_Sign"

    // $ANTLR start "Minus_Sign"
    public final void mMinus_Sign() throws RecognitionException {
        try {
            int _type = Minus_Sign;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:827:2: ( '-' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:827:5: '-'
            {
            match('-'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Minus_Sign"

    // $ANTLR start "Hyphen"
    public final void mHyphen() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:830:2: ( '-' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:830:5: '-'
            {
            match('-'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Hyphen"

    // $ANTLR start "Equals_Operator"
    public final void mEquals_Operator() throws RecognitionException {
        try {
            int _type = Equals_Operator;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:832:2: ( '=' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:832:5: '='
            {
            match('='); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Equals_Operator"

    // $ANTLR start "Left_Brace"
    public final void mLeft_Brace() throws RecognitionException {
        try {
            int _type = Left_Brace;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:834:2: ( '{' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:834:5: '{'
            {
            match('{'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Left_Brace"

    // $ANTLR start "Right_Brace"
    public final void mRight_Brace() throws RecognitionException {
        try {
            int _type = Right_Brace;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:836:2: ( '}' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:836:5: '}'
            {
            match('}'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Right_Brace"

    // $ANTLR start "Left_Bracket"
    public final void mLeft_Bracket() throws RecognitionException {
        try {
            int _type = Left_Bracket;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:841:2: ( '[' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:841:5: '['
            {
            match('['); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Left_Bracket"

    // $ANTLR start "Left_Bracket_Trigraph"
    public final void mLeft_Bracket_Trigraph() throws RecognitionException {
        try {
            int _type = Left_Bracket_Trigraph;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:843:2: ( '??(' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:843:5: '??('
            {
            match("??("); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Left_Bracket_Trigraph"

    // $ANTLR start "Right_Bracket"
    public final void mRight_Bracket() throws RecognitionException {
        try {
            int _type = Right_Bracket;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:845:2: ( ']' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:845:5: ']'
            {
            match(']'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Right_Bracket"

    // $ANTLR start "Right_Bracket_Trigraph"
    public final void mRight_Bracket_Trigraph() throws RecognitionException {
        try {
            int _type = Right_Bracket_Trigraph;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:847:2: ( '??)' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:847:5: '??)'
            {
            match("??)"); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Right_Bracket_Trigraph"

    // $ANTLR start "Vertical_Bar"
    public final void mVertical_Bar() throws RecognitionException {
        try {
            int _type = Vertical_Bar;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:850:2: ( '|' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:850:5: '|'
            {
            match('|'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Vertical_Bar"

    // $ANTLR start "Colon"
    public final void mColon() throws RecognitionException {
        try {
            int _type = Colon;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:852:2: ( ':' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:852:5: ':'
            {
            match(':'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Colon"

    // $ANTLR start "Semicolon"
    public final void mSemicolon() throws RecognitionException {
        try {
            int _type = Semicolon;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:854:2: ( ';' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:854:5: ';'
            {
            match(';'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Semicolon"

    // $ANTLR start "Double_Quote"
    public final void mDouble_Quote() throws RecognitionException {
        try {
            int _type = Double_Quote;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:856:2: ( '\"' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:856:5: '\"'
            {
            match('\"'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Double_Quote"

    // $ANTLR start "Quote"
    public final void mQuote() throws RecognitionException {
        try {
            int _type = Quote;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:858:2: ( '\\'' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:858:5: '\\''
            {
            match('\''); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Quote"

    // $ANTLR start "Less_Than_Operator"
    public final void mLess_Than_Operator() throws RecognitionException {
        try {
            int _type = Less_Than_Operator;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:860:2: ( '<' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:860:5: '<'
            {
            match('<'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Less_Than_Operator"

    // $ANTLR start "Greater_Than_Operator"
    public final void mGreater_Than_Operator() throws RecognitionException {
        try {
            int _type = Greater_Than_Operator;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:862:2: ( '>' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:862:5: '>'
            {
            match('>'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Greater_Than_Operator"

    // $ANTLR start "Comma"
    public final void mComma() throws RecognitionException {
        try {
            int _type = Comma;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:864:2: ( ',' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:864:5: ','
            {
            match(','); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Comma"

    // $ANTLR start "Period"
    public final void mPeriod() throws RecognitionException {
        try {
            int _type = Period;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:866:2: ( '.' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:866:5: '.'
            {
            match('.'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Period"

    // $ANTLR start "Question_Mark"
    public final void mQuestion_Mark() throws RecognitionException {
        try {
            int _type = Question_Mark;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:868:2: ( '?' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:868:5: '?'
            {
            match('?'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Question_Mark"

    // $ANTLR start "Slash"
    public final void mSlash() throws RecognitionException {
        try {
            int _type = Slash;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:870:2: ( '/' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:870:5: '/'
            {
            match('/'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Slash"

    // $ANTLR start "Underscore"
    public final void mUnderscore() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:873:12: ( '_' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:873:14: '_'
            {
            match('_'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Underscore"

    // $ANTLR start "Back_Slash"
    public final void mBack_Slash() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:875:13: ( '\\\\' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:875:15: '\\\\'
            {
            match('\\'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Back_Slash"

    // $ANTLR start "Hash_Sign"
    public final void mHash_Sign() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:877:13: ( '#' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:877:15: '#'
            {
            match('#'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Hash_Sign"

    // $ANTLR start "Dollar_Sign"
    public final void mDollar_Sign() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:879:13: ( '$' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:879:15: '$'
            {
            match('$'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Dollar_Sign"

    // $ANTLR start "Unicode_Permitted_Identifier_Character"
    public final void mUnicode_Permitted_Identifier_Character() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:884:41: ( Basic_Latin_Without_Quotes | Latin1_Supplement | Latin_ExtendedA | Latin_ExtendedB | IPA_Extensions | Combining_Diacritical_Marks | Greek_and_Coptic | Cyrillic | Cyrillic_Supplementary | Armenian | Hebrew | Arabic | Syriac | Thaana | Devanagari | Bengali | Gurmukhi | Gujarati | Oriya | Tamil | Telugu | Kannada | Malayalam | Sinhala | Thai | Lao | Tibetan | Myanmar | Georgian | Hangul_Jamo | Ethiopic | Cherokee | Unified_Canadian_Aboriginal | Ogham | Runic | Tagalog | Hanunoo | Buhid | Tagbanwa | Khmer | Mongolian | Limbu | Tai_Le | Khmer_Symbols | Phonetic_Extensions | Latin_Extended_Additional | Greek_Extended | Superscripts_and_Subscripts | Currency_Symbols | Combining_Diacritical_Symbol_Marks | Letterlike_Symbols | Number_Forms | Enclosed_Alphanumerics | CJK_Radicals_Supplement | Kangxi_Radicals | Ideographic_Description_Characters | CJK_Symbols_and_Punctuation | Hiragana | Katakana | Bopomofo | Hangul_Compatibility_Jamo | Kanbun | Bopomofo_Extended | Katakana_Phonetic_Extensions | Enclosed_CJK_Letters_and_Months | CJK_Compatibility | CJK_Unified_Ideographs_ExtensionA | CJK_Unified_Ideographs | Yi_Syllables | Yi_Radicals | Hangul_Syllables | High_Surrogates | High_Private_Use_Surrogates | Low_Surrogates | Private_Use_Area | CJK_Compatibility_Ideographs | Alphabetic_Presentation_Forms | Arabic_Presentation_FormsA | Variation_Selectors | Combining_Half_Marks | CJK_Compatibility_Forms | Small_Form_Variants | Arabic_Presentation_FormsB | Halfwidth_and_Fullwidth_Forms )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( (input.LA(1)>=' ' && input.LA(1)<='!')||(input.LA(1)>='#' && input.LA(1)<='&')||(input.LA(1)>='(' && input.LA(1)<='~')||(input.LA(1)>='\u00A0' && input.LA(1)<='\u02AF')||(input.LA(1)>='\u0300' && input.LA(1)<='\u074F')||(input.LA(1)>='\u0780' && input.LA(1)<='\u07BF')||(input.LA(1)>='\u0900' && input.LA(1)<='\u137F')||(input.LA(1)>='\u13A0' && input.LA(1)<='\u18AF')||(input.LA(1)>='\u1900' && input.LA(1)<='\u197F')||(input.LA(1)>='\u19E0' && input.LA(1)<='\u19FF')||(input.LA(1)>='\u1D00' && input.LA(1)<='\u1D7F')||(input.LA(1)>='\u1E00' && input.LA(1)<='\u1FFF')||(input.LA(1)>='\u2070' && input.LA(1)<='\u218F')||(input.LA(1)>='\u2460' && input.LA(1)<='\u24FF')||(input.LA(1)>='\u2E80' && input.LA(1)<='\u2FDF')||(input.LA(1)>='\u2FF0' && input.LA(1)<='\u31BF')||(input.LA(1)>='\u31F0' && input.LA(1)<='\u4DBF')||(input.LA(1)>='\u4E00' && input.LA(1)<='\uA4CF')||(input.LA(1)>='\uAC00' && input.LA(1)<='\uD7AF')||(input.LA(1)>='\uD800' && input.LA(1)<='\uFE0F')||(input.LA(1)>='\uFE20' && input.LA(1)<='\uFFEF') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "Unicode_Permitted_Identifier_Character"

    // $ANTLR start "Unicode_Forbidden_Identifier_Characters"
    public final void mUnicode_Forbidden_Identifier_Characters() throws RecognitionException {
        try {
            int _type = Unicode_Forbidden_Identifier_Characters;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:972:42: ( ( Unicode_Forbidden_Identifier_Character )+ )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:972:45: ( Unicode_Forbidden_Identifier_Character )+
            {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:972:45: ( Unicode_Forbidden_Identifier_Character )+
            int cnt10=0;
            loop10:
            do {
                int alt10=2;
                int LA10_0 = input.LA(1);

                if ( ((LA10_0>='\u0001' && LA10_0<='\u001F')||(LA10_0>='\u02B0' && LA10_0<='\u02FF')||(LA10_0>='\u2000' && LA10_0<='\u206F')||(LA10_0>='\u2190' && LA10_0<='\u245F')||(LA10_0>='\u2500' && LA10_0<='\u2BFF')||(LA10_0>='\u4DC0' && LA10_0<='\u4DFF')||(LA10_0>='\uFFF0' && LA10_0<='\uFFFF')) ) {
                    alt10=1;
                }


                switch (alt10) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:972:47: Unicode_Forbidden_Identifier_Character
            	    {
            	    mUnicode_Forbidden_Identifier_Character(); 

            	    }
            	    break;

            	default :
            	    if ( cnt10 >= 1 ) break loop10;
                        EarlyExitException eee =
                            new EarlyExitException(10, input);
                        throw eee;
                }
                cnt10++;
            } while (true);


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Unicode_Forbidden_Identifier_Characters"

    // $ANTLR start "Unicode_Forbidden_Identifier_Character"
    public final void mUnicode_Forbidden_Identifier_Character() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:975:41: ( Control_Characters | Spacing_Modifier_Letters | General_Punctuation | Arrows | Mathematical_Operators | Miscellaneous_Technical | Control_Pictures | Optical_Character_Recognition | Box_Drawing | Block_Elements | Geometric_Shapes | Miscellaneous_Symbols | Dingbats | Miscellaneous_Mathematical_SymbolsA | Supplemental_ArrowsA | Braille_Patterns | Supplemental_ArrowsB | Miscellaneous_Mathematical_SymbolsB | Supplemental_Mathematical_Operators | Miscellaneous_Symbols_and_Arrows | Yijing_Hexagram_Symbols | Specials )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( (input.LA(1)>='\u0001' && input.LA(1)<='\u001F')||(input.LA(1)>='\u02B0' && input.LA(1)<='\u02FF')||(input.LA(1)>='\u2000' && input.LA(1)<='\u206F')||(input.LA(1)>='\u2190' && input.LA(1)<='\u245F')||(input.LA(1)>='\u2500' && input.LA(1)<='\u2BFF')||(input.LA(1)>='\u4DC0' && input.LA(1)<='\u4DFF')||(input.LA(1)>='\uFFF0' && input.LA(1)<='\uFFFF') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "Unicode_Forbidden_Identifier_Character"

    // $ANTLR start "Unicode_Character_Without_Quotes"
    public final void mUnicode_Character_Without_Quotes() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1003:37: ( Basic_Latin_Without_Quotes | '\\u00A0' .. '\\uFFFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( (input.LA(1)>=' ' && input.LA(1)<='!')||(input.LA(1)>='#' && input.LA(1)<='&')||(input.LA(1)>='(' && input.LA(1)<='~')||(input.LA(1)>='\u00A0' && input.LA(1)<='\uFFFF') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "Unicode_Character_Without_Quotes"

    // $ANTLR start "Extended_Latin_Without_Quotes"
    public final void mExtended_Latin_Without_Quotes() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1006:37: ( '\\u0001' .. '!' | '#' .. '&' | '(' .. '\\u00FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( (input.LA(1)>='\u0001' && input.LA(1)<='!')||(input.LA(1)>='#' && input.LA(1)<='&')||(input.LA(1)>='(' && input.LA(1)<='\u00FF') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "Extended_Latin_Without_Quotes"

    // $ANTLR start "Control_Characters"
    public final void mControl_Characters() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1008:37: ( '\\u0001' .. '\\u001F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1008:41: '\\u0001' .. '\\u001F'
            {
            matchRange('\u0001','\u001F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Control_Characters"

    // $ANTLR start "Basic_Latin"
    public final void mBasic_Latin() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1010:37: ( '\\u0020' .. '\\u007F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1010:41: '\\u0020' .. '\\u007F'
            {
            matchRange(' ','\u007F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Basic_Latin"

    // $ANTLR start "Basic_Latin_Without_Quotes"
    public final void mBasic_Latin_Without_Quotes() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1012:37: ( ' ' .. '!' | '#' .. '&' | '(' .. '~' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( (input.LA(1)>=' ' && input.LA(1)<='!')||(input.LA(1)>='#' && input.LA(1)<='&')||(input.LA(1)>='(' && input.LA(1)<='~') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "Basic_Latin_Without_Quotes"

    // $ANTLR start "Regex_Non_Escaped_Unicode"
    public final void mRegex_Non_Escaped_Unicode() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1014:37: (~ ( '|' | '*' | '+' | '-' | '?' | '\\%' | '_' | '^' | ':' | '{' | '}' | '(' | ')' | '[' | '\\\\' ) )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1014:41: ~ ( '|' | '*' | '+' | '-' | '?' | '\\%' | '_' | '^' | ':' | '{' | '}' | '(' | ')' | '[' | '\\\\' )
            {
            if ( (input.LA(1)>='\u0000' && input.LA(1)<='$')||(input.LA(1)>='&' && input.LA(1)<='\'')||input.LA(1)==','||(input.LA(1)>='.' && input.LA(1)<='9')||(input.LA(1)>=';' && input.LA(1)<='>')||(input.LA(1)>='@' && input.LA(1)<='Z')||input.LA(1)==']'||(input.LA(1)>='`' && input.LA(1)<='z')||(input.LA(1)>='~' && input.LA(1)<='\uFFFF') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "Regex_Non_Escaped_Unicode"

    // $ANTLR start "Regex_Escaped_Unicode"
    public final void mRegex_Escaped_Unicode() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1016:37: ( ' ' .. '[' | ']' .. '~' | '\\u00A0' .. '\\uFFFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( (input.LA(1)>=' ' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='~')||(input.LA(1)>='\u00A0' && input.LA(1)<='\uFFFF') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "Regex_Escaped_Unicode"

    // $ANTLR start "Unicode_Allowed_Escape_Chracter"
    public final void mUnicode_Allowed_Escape_Chracter() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1018:34: ( '!' | '#' .. '&' | '(' .. '/' | ':' .. '@' | '[' .. '`' | '{' .. '~' | '\\u0080' .. '\\u00BF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='!'||(input.LA(1)>='#' && input.LA(1)<='&')||(input.LA(1)>='(' && input.LA(1)<='/')||(input.LA(1)>=':' && input.LA(1)<='@')||(input.LA(1)>='[' && input.LA(1)<='`')||(input.LA(1)>='{' && input.LA(1)<='~')||(input.LA(1)>='\u0080' && input.LA(1)<='\u00BF') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "Unicode_Allowed_Escape_Chracter"

    // $ANTLR start "Full_Unicode"
    public final void mFull_Unicode() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1020:19: ( '\\u0001' .. '\\uFFFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1020:21: '\\u0001' .. '\\uFFFF'
            {
            matchRange('\u0001','\uFFFF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Full_Unicode"

    // $ANTLR start "Extended_Control_Characters"
    public final void mExtended_Control_Characters() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1022:37: ( '\\u0080' .. '\\u009F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1022:41: '\\u0080' .. '\\u009F'
            {
            matchRange('\u0080','\u009F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Extended_Control_Characters"

    // $ANTLR start "Latin1_Supplement"
    public final void mLatin1_Supplement() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1024:37: ( '\\u00A0' .. '\\u00FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1024:41: '\\u00A0' .. '\\u00FF'
            {
            matchRange('\u00A0','\u00FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Latin1_Supplement"

    // $ANTLR start "Latin_ExtendedA"
    public final void mLatin_ExtendedA() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1026:37: ( '\\u0100' .. '\\u017F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1026:41: '\\u0100' .. '\\u017F'
            {
            matchRange('\u0100','\u017F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Latin_ExtendedA"

    // $ANTLR start "Latin_ExtendedB"
    public final void mLatin_ExtendedB() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1028:37: ( '\\u0180' .. '\\u024F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1028:41: '\\u0180' .. '\\u024F'
            {
            matchRange('\u0180','\u024F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Latin_ExtendedB"

    // $ANTLR start "IPA_Extensions"
    public final void mIPA_Extensions() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1030:37: ( '\\u0250' .. '\\u02AF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1030:41: '\\u0250' .. '\\u02AF'
            {
            matchRange('\u0250','\u02AF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "IPA_Extensions"

    // $ANTLR start "Spacing_Modifier_Letters"
    public final void mSpacing_Modifier_Letters() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1032:37: ( '\\u02B0' .. '\\u02FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1032:41: '\\u02B0' .. '\\u02FF'
            {
            matchRange('\u02B0','\u02FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Spacing_Modifier_Letters"

    // $ANTLR start "Combining_Diacritical_Marks"
    public final void mCombining_Diacritical_Marks() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1034:37: ( '\\u0300' .. '\\u036F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1034:41: '\\u0300' .. '\\u036F'
            {
            matchRange('\u0300','\u036F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Combining_Diacritical_Marks"

    // $ANTLR start "Greek_and_Coptic"
    public final void mGreek_and_Coptic() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1036:37: ( '\\u0370' .. '\\u03FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1036:41: '\\u0370' .. '\\u03FF'
            {
            matchRange('\u0370','\u03FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Greek_and_Coptic"

    // $ANTLR start "Cyrillic"
    public final void mCyrillic() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1038:37: ( '\\u0400' .. '\\u04FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1038:41: '\\u0400' .. '\\u04FF'
            {
            matchRange('\u0400','\u04FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Cyrillic"

    // $ANTLR start "Cyrillic_Supplementary"
    public final void mCyrillic_Supplementary() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1040:37: ( '\\u0500' .. '\\u052F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1040:41: '\\u0500' .. '\\u052F'
            {
            matchRange('\u0500','\u052F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Cyrillic_Supplementary"

    // $ANTLR start "Armenian"
    public final void mArmenian() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1042:37: ( '\\u0530' .. '\\u058F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1042:41: '\\u0530' .. '\\u058F'
            {
            matchRange('\u0530','\u058F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Armenian"

    // $ANTLR start "Hebrew"
    public final void mHebrew() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1044:37: ( '\\u0590' .. '\\u05FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1044:41: '\\u0590' .. '\\u05FF'
            {
            matchRange('\u0590','\u05FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Hebrew"

    // $ANTLR start "Arabic"
    public final void mArabic() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1046:37: ( '\\u0600' .. '\\u06FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1046:41: '\\u0600' .. '\\u06FF'
            {
            matchRange('\u0600','\u06FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Arabic"

    // $ANTLR start "Syriac"
    public final void mSyriac() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1048:37: ( '\\u0700' .. '\\u074F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1048:41: '\\u0700' .. '\\u074F'
            {
            matchRange('\u0700','\u074F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Syriac"

    // $ANTLR start "Thaana"
    public final void mThaana() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1050:37: ( '\\u0780' .. '\\u07BF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1050:41: '\\u0780' .. '\\u07BF'
            {
            matchRange('\u0780','\u07BF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Thaana"

    // $ANTLR start "Devanagari"
    public final void mDevanagari() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1052:37: ( '\\u0900' .. '\\u097F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1052:41: '\\u0900' .. '\\u097F'
            {
            matchRange('\u0900','\u097F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Devanagari"

    // $ANTLR start "Bengali"
    public final void mBengali() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1054:37: ( '\\u0980' .. '\\u09FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1054:41: '\\u0980' .. '\\u09FF'
            {
            matchRange('\u0980','\u09FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Bengali"

    // $ANTLR start "Gurmukhi"
    public final void mGurmukhi() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1056:37: ( '\\u0A00' .. '\\u0A7F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1056:41: '\\u0A00' .. '\\u0A7F'
            {
            matchRange('\u0A00','\u0A7F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Gurmukhi"

    // $ANTLR start "Gujarati"
    public final void mGujarati() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1058:37: ( '\\u0A80' .. '\\u0AFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1058:41: '\\u0A80' .. '\\u0AFF'
            {
            matchRange('\u0A80','\u0AFF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Gujarati"

    // $ANTLR start "Oriya"
    public final void mOriya() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1060:37: ( '\\u0B00' .. '\\u0B7F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1060:41: '\\u0B00' .. '\\u0B7F'
            {
            matchRange('\u0B00','\u0B7F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Oriya"

    // $ANTLR start "Tamil"
    public final void mTamil() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1062:37: ( '\\u0B80' .. '\\u0BFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1062:41: '\\u0B80' .. '\\u0BFF'
            {
            matchRange('\u0B80','\u0BFF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Tamil"

    // $ANTLR start "Telugu"
    public final void mTelugu() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1064:37: ( '\\u0C00' .. '\\u0C7F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1064:41: '\\u0C00' .. '\\u0C7F'
            {
            matchRange('\u0C00','\u0C7F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Telugu"

    // $ANTLR start "Kannada"
    public final void mKannada() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1066:37: ( '\\u0C80' .. '\\u0CFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1066:41: '\\u0C80' .. '\\u0CFF'
            {
            matchRange('\u0C80','\u0CFF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Kannada"

    // $ANTLR start "Malayalam"
    public final void mMalayalam() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1068:37: ( '\\u0D00' .. '\\u0D7F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1068:41: '\\u0D00' .. '\\u0D7F'
            {
            matchRange('\u0D00','\u0D7F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Malayalam"

    // $ANTLR start "Sinhala"
    public final void mSinhala() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1070:37: ( '\\u0D80' .. '\\u0DFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1070:41: '\\u0D80' .. '\\u0DFF'
            {
            matchRange('\u0D80','\u0DFF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Sinhala"

    // $ANTLR start "Thai"
    public final void mThai() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1072:37: ( '\\u0E00' .. '\\u0E7F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1072:41: '\\u0E00' .. '\\u0E7F'
            {
            matchRange('\u0E00','\u0E7F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Thai"

    // $ANTLR start "Lao"
    public final void mLao() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1074:37: ( '\\u0E80' .. '\\u0EFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1074:41: '\\u0E80' .. '\\u0EFF'
            {
            matchRange('\u0E80','\u0EFF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Lao"

    // $ANTLR start "Tibetan"
    public final void mTibetan() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1076:37: ( '\\u0F00' .. '\\u0FFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1076:41: '\\u0F00' .. '\\u0FFF'
            {
            matchRange('\u0F00','\u0FFF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Tibetan"

    // $ANTLR start "Myanmar"
    public final void mMyanmar() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1078:37: ( '\\u1000' .. '\\u109F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1078:41: '\\u1000' .. '\\u109F'
            {
            matchRange('\u1000','\u109F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Myanmar"

    // $ANTLR start "Georgian"
    public final void mGeorgian() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1080:37: ( '\\u10A0' .. '\\u10FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1080:41: '\\u10A0' .. '\\u10FF'
            {
            matchRange('\u10A0','\u10FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Georgian"

    // $ANTLR start "Hangul_Jamo"
    public final void mHangul_Jamo() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1082:37: ( '\\u1100' .. '\\u11FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1082:41: '\\u1100' .. '\\u11FF'
            {
            matchRange('\u1100','\u11FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Hangul_Jamo"

    // $ANTLR start "Ethiopic"
    public final void mEthiopic() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1084:37: ( '\\u1200' .. '\\u137F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1084:41: '\\u1200' .. '\\u137F'
            {
            matchRange('\u1200','\u137F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Ethiopic"

    // $ANTLR start "Cherokee"
    public final void mCherokee() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1086:37: ( '\\u13A0' .. '\\u13FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1086:41: '\\u13A0' .. '\\u13FF'
            {
            matchRange('\u13A0','\u13FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Cherokee"

    // $ANTLR start "Unified_Canadian_Aboriginal"
    public final void mUnified_Canadian_Aboriginal() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1088:37: ( '\\u1400' .. '\\u167F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1088:41: '\\u1400' .. '\\u167F'
            {
            matchRange('\u1400','\u167F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Unified_Canadian_Aboriginal"

    // $ANTLR start "Ogham"
    public final void mOgham() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1090:37: ( '\\u1680' .. '\\u169F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1090:41: '\\u1680' .. '\\u169F'
            {
            matchRange('\u1680','\u169F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Ogham"

    // $ANTLR start "Runic"
    public final void mRunic() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1092:37: ( '\\u16A0' .. '\\u16FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1092:41: '\\u16A0' .. '\\u16FF'
            {
            matchRange('\u16A0','\u16FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Runic"

    // $ANTLR start "Tagalog"
    public final void mTagalog() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1094:37: ( '\\u1700' .. '\\u171F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1094:41: '\\u1700' .. '\\u171F'
            {
            matchRange('\u1700','\u171F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Tagalog"

    // $ANTLR start "Hanunoo"
    public final void mHanunoo() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1096:37: ( '\\u1720' .. '\\u173F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1096:41: '\\u1720' .. '\\u173F'
            {
            matchRange('\u1720','\u173F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Hanunoo"

    // $ANTLR start "Buhid"
    public final void mBuhid() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1098:37: ( '\\u1740' .. '\\u175F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1098:41: '\\u1740' .. '\\u175F'
            {
            matchRange('\u1740','\u175F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Buhid"

    // $ANTLR start "Tagbanwa"
    public final void mTagbanwa() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1100:37: ( '\\u1760' .. '\\u177F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1100:41: '\\u1760' .. '\\u177F'
            {
            matchRange('\u1760','\u177F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Tagbanwa"

    // $ANTLR start "Khmer"
    public final void mKhmer() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1102:37: ( '\\u1780' .. '\\u17FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1102:41: '\\u1780' .. '\\u17FF'
            {
            matchRange('\u1780','\u17FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Khmer"

    // $ANTLR start "Mongolian"
    public final void mMongolian() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1104:37: ( '\\u1800' .. '\\u18AF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1104:41: '\\u1800' .. '\\u18AF'
            {
            matchRange('\u1800','\u18AF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Mongolian"

    // $ANTLR start "Limbu"
    public final void mLimbu() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1106:37: ( '\\u1900' .. '\\u194F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1106:41: '\\u1900' .. '\\u194F'
            {
            matchRange('\u1900','\u194F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Limbu"

    // $ANTLR start "Tai_Le"
    public final void mTai_Le() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1108:37: ( '\\u1950' .. '\\u197F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1108:41: '\\u1950' .. '\\u197F'
            {
            matchRange('\u1950','\u197F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Tai_Le"

    // $ANTLR start "Khmer_Symbols"
    public final void mKhmer_Symbols() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1110:37: ( '\\u19E0' .. '\\u19FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1110:41: '\\u19E0' .. '\\u19FF'
            {
            matchRange('\u19E0','\u19FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Khmer_Symbols"

    // $ANTLR start "Phonetic_Extensions"
    public final void mPhonetic_Extensions() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1112:37: ( '\\u1D00' .. '\\u1D7F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1112:41: '\\u1D00' .. '\\u1D7F'
            {
            matchRange('\u1D00','\u1D7F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Phonetic_Extensions"

    // $ANTLR start "Latin_Extended_Additional"
    public final void mLatin_Extended_Additional() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1114:37: ( '\\u1E00' .. '\\u1EFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1114:41: '\\u1E00' .. '\\u1EFF'
            {
            matchRange('\u1E00','\u1EFF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Latin_Extended_Additional"

    // $ANTLR start "Greek_Extended"
    public final void mGreek_Extended() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1116:37: ( '\\u1F00' .. '\\u1FFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1116:41: '\\u1F00' .. '\\u1FFF'
            {
            matchRange('\u1F00','\u1FFF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Greek_Extended"

    // $ANTLR start "General_Punctuation"
    public final void mGeneral_Punctuation() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1118:37: ( '\\u2000' .. '\\u206F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1118:41: '\\u2000' .. '\\u206F'
            {
            matchRange('\u2000','\u206F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "General_Punctuation"

    // $ANTLR start "Superscripts_and_Subscripts"
    public final void mSuperscripts_and_Subscripts() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1120:37: ( '\\u2070' .. '\\u209F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1120:41: '\\u2070' .. '\\u209F'
            {
            matchRange('\u2070','\u209F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Superscripts_and_Subscripts"

    // $ANTLR start "Currency_Symbols"
    public final void mCurrency_Symbols() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1122:37: ( '\\u20A0' .. '\\u20CF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1122:41: '\\u20A0' .. '\\u20CF'
            {
            matchRange('\u20A0','\u20CF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Currency_Symbols"

    // $ANTLR start "Combining_Diacritical_Symbol_Marks"
    public final void mCombining_Diacritical_Symbol_Marks() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1124:37: ( '\\u20D0' .. '\\u20FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1124:41: '\\u20D0' .. '\\u20FF'
            {
            matchRange('\u20D0','\u20FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Combining_Diacritical_Symbol_Marks"

    // $ANTLR start "Letterlike_Symbols"
    public final void mLetterlike_Symbols() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1126:37: ( '\\u2100' .. '\\u214F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1126:41: '\\u2100' .. '\\u214F'
            {
            matchRange('\u2100','\u214F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Letterlike_Symbols"

    // $ANTLR start "Number_Forms"
    public final void mNumber_Forms() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1128:37: ( '\\u2150' .. '\\u218F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1128:41: '\\u2150' .. '\\u218F'
            {
            matchRange('\u2150','\u218F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Number_Forms"

    // $ANTLR start "Arrows"
    public final void mArrows() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1130:37: ( '\\u2190' .. '\\u21FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1130:41: '\\u2190' .. '\\u21FF'
            {
            matchRange('\u2190','\u21FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Arrows"

    // $ANTLR start "Mathematical_Operators"
    public final void mMathematical_Operators() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1132:37: ( '\\u2200' .. '\\u22FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1132:41: '\\u2200' .. '\\u22FF'
            {
            matchRange('\u2200','\u22FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Mathematical_Operators"

    // $ANTLR start "Miscellaneous_Technical"
    public final void mMiscellaneous_Technical() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1134:37: ( '\\u2300' .. '\\u23FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1134:41: '\\u2300' .. '\\u23FF'
            {
            matchRange('\u2300','\u23FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Miscellaneous_Technical"

    // $ANTLR start "Control_Pictures"
    public final void mControl_Pictures() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1136:37: ( '\\u2400' .. '\\u243F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1136:41: '\\u2400' .. '\\u243F'
            {
            matchRange('\u2400','\u243F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Control_Pictures"

    // $ANTLR start "Optical_Character_Recognition"
    public final void mOptical_Character_Recognition() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1138:37: ( '\\u2440' .. '\\u245F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1138:41: '\\u2440' .. '\\u245F'
            {
            matchRange('\u2440','\u245F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Optical_Character_Recognition"

    // $ANTLR start "Enclosed_Alphanumerics"
    public final void mEnclosed_Alphanumerics() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1140:37: ( '\\u2460' .. '\\u24FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1140:41: '\\u2460' .. '\\u24FF'
            {
            matchRange('\u2460','\u24FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Enclosed_Alphanumerics"

    // $ANTLR start "Box_Drawing"
    public final void mBox_Drawing() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1142:37: ( '\\u2500' .. '\\u257F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1142:41: '\\u2500' .. '\\u257F'
            {
            matchRange('\u2500','\u257F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Box_Drawing"

    // $ANTLR start "Block_Elements"
    public final void mBlock_Elements() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1144:37: ( '\\u2580' .. '\\u259F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1144:41: '\\u2580' .. '\\u259F'
            {
            matchRange('\u2580','\u259F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Block_Elements"

    // $ANTLR start "Geometric_Shapes"
    public final void mGeometric_Shapes() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1146:37: ( '\\u25A0' .. '\\u25FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1146:41: '\\u25A0' .. '\\u25FF'
            {
            matchRange('\u25A0','\u25FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Geometric_Shapes"

    // $ANTLR start "Miscellaneous_Symbols"
    public final void mMiscellaneous_Symbols() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1148:37: ( '\\u2600' .. '\\u26FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1148:41: '\\u2600' .. '\\u26FF'
            {
            matchRange('\u2600','\u26FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Miscellaneous_Symbols"

    // $ANTLR start "Dingbats"
    public final void mDingbats() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1150:37: ( '\\u2700' .. '\\u27BF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1150:41: '\\u2700' .. '\\u27BF'
            {
            matchRange('\u2700','\u27BF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Dingbats"

    // $ANTLR start "Miscellaneous_Mathematical_SymbolsA"
    public final void mMiscellaneous_Mathematical_SymbolsA() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1152:38: ( '\\u27C0' .. '\\u27EF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1152:43: '\\u27C0' .. '\\u27EF'
            {
            matchRange('\u27C0','\u27EF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Miscellaneous_Mathematical_SymbolsA"

    // $ANTLR start "Supplemental_ArrowsA"
    public final void mSupplemental_ArrowsA() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1154:37: ( '\\u27F0' .. '\\u27FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1154:41: '\\u27F0' .. '\\u27FF'
            {
            matchRange('\u27F0','\u27FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Supplemental_ArrowsA"

    // $ANTLR start "Braille_Patterns"
    public final void mBraille_Patterns() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1156:37: ( '\\u2800' .. '\\u28FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1156:41: '\\u2800' .. '\\u28FF'
            {
            matchRange('\u2800','\u28FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Braille_Patterns"

    // $ANTLR start "Supplemental_ArrowsB"
    public final void mSupplemental_ArrowsB() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1158:37: ( '\\u2900' .. '\\u297F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1158:41: '\\u2900' .. '\\u297F'
            {
            matchRange('\u2900','\u297F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Supplemental_ArrowsB"

    // $ANTLR start "Miscellaneous_Mathematical_SymbolsB"
    public final void mMiscellaneous_Mathematical_SymbolsB() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1160:38: ( '\\u2980' .. '\\u29FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1160:43: '\\u2980' .. '\\u29FF'
            {
            matchRange('\u2980','\u29FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Miscellaneous_Mathematical_SymbolsB"

    // $ANTLR start "Supplemental_Mathematical_Operators"
    public final void mSupplemental_Mathematical_Operators() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1162:38: ( '\\u2A00' .. '\\u2AFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1162:43: '\\u2A00' .. '\\u2AFF'
            {
            matchRange('\u2A00','\u2AFF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Supplemental_Mathematical_Operators"

    // $ANTLR start "Miscellaneous_Symbols_and_Arrows"
    public final void mMiscellaneous_Symbols_and_Arrows() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1164:37: ( '\\u2B00' .. '\\u2BFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1164:41: '\\u2B00' .. '\\u2BFF'
            {
            matchRange('\u2B00','\u2BFF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Miscellaneous_Symbols_and_Arrows"

    // $ANTLR start "CJK_Radicals_Supplement"
    public final void mCJK_Radicals_Supplement() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1166:37: ( '\\u2E80' .. '\\u2EFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1166:41: '\\u2E80' .. '\\u2EFF'
            {
            matchRange('\u2E80','\u2EFF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "CJK_Radicals_Supplement"

    // $ANTLR start "Kangxi_Radicals"
    public final void mKangxi_Radicals() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1168:37: ( '\\u2F00' .. '\\u2FDF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1168:41: '\\u2F00' .. '\\u2FDF'
            {
            matchRange('\u2F00','\u2FDF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Kangxi_Radicals"

    // $ANTLR start "Ideographic_Description_Characters"
    public final void mIdeographic_Description_Characters() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1170:37: ( '\\u2FF0' .. '\\u2FFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1170:41: '\\u2FF0' .. '\\u2FFF'
            {
            matchRange('\u2FF0','\u2FFF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Ideographic_Description_Characters"

    // $ANTLR start "CJK_Symbols_and_Punctuation"
    public final void mCJK_Symbols_and_Punctuation() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1172:37: ( '\\u3000' .. '\\u303F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1172:41: '\\u3000' .. '\\u303F'
            {
            matchRange('\u3000','\u303F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "CJK_Symbols_and_Punctuation"

    // $ANTLR start "Hiragana"
    public final void mHiragana() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1174:37: ( '\\u3040' .. '\\u309F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1174:41: '\\u3040' .. '\\u309F'
            {
            matchRange('\u3040','\u309F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Hiragana"

    // $ANTLR start "Katakana"
    public final void mKatakana() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1176:37: ( '\\u30A0' .. '\\u30FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1176:41: '\\u30A0' .. '\\u30FF'
            {
            matchRange('\u30A0','\u30FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Katakana"

    // $ANTLR start "Bopomofo"
    public final void mBopomofo() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1178:37: ( '\\u3100' .. '\\u312F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1178:41: '\\u3100' .. '\\u312F'
            {
            matchRange('\u3100','\u312F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Bopomofo"

    // $ANTLR start "Hangul_Compatibility_Jamo"
    public final void mHangul_Compatibility_Jamo() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1180:37: ( '\\u3130' .. '\\u318F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1180:41: '\\u3130' .. '\\u318F'
            {
            matchRange('\u3130','\u318F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Hangul_Compatibility_Jamo"

    // $ANTLR start "Kanbun"
    public final void mKanbun() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1182:37: ( '\\u3190' .. '\\u319F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1182:41: '\\u3190' .. '\\u319F'
            {
            matchRange('\u3190','\u319F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Kanbun"

    // $ANTLR start "Bopomofo_Extended"
    public final void mBopomofo_Extended() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1184:37: ( '\\u31A0' .. '\\u31BF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1184:41: '\\u31A0' .. '\\u31BF'
            {
            matchRange('\u31A0','\u31BF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Bopomofo_Extended"

    // $ANTLR start "Katakana_Phonetic_Extensions"
    public final void mKatakana_Phonetic_Extensions() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1186:37: ( '\\u31F0' .. '\\u31FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1186:41: '\\u31F0' .. '\\u31FF'
            {
            matchRange('\u31F0','\u31FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Katakana_Phonetic_Extensions"

    // $ANTLR start "Enclosed_CJK_Letters_and_Months"
    public final void mEnclosed_CJK_Letters_and_Months() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1188:37: ( '\\u3200' .. '\\u32FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1188:41: '\\u3200' .. '\\u32FF'
            {
            matchRange('\u3200','\u32FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Enclosed_CJK_Letters_and_Months"

    // $ANTLR start "CJK_Compatibility"
    public final void mCJK_Compatibility() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1190:37: ( '\\u3300' .. '\\u33FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1190:41: '\\u3300' .. '\\u33FF'
            {
            matchRange('\u3300','\u33FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "CJK_Compatibility"

    // $ANTLR start "CJK_Unified_Ideographs_ExtensionA"
    public final void mCJK_Unified_Ideographs_ExtensionA() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1192:37: ( '\\u3400' .. '\\u4DBF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1192:41: '\\u3400' .. '\\u4DBF'
            {
            matchRange('\u3400','\u4DBF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "CJK_Unified_Ideographs_ExtensionA"

    // $ANTLR start "CJK_Unified_Ideographs"
    public final void mCJK_Unified_Ideographs() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1194:37: ( '\\u4E00' .. '\\u9FFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1194:41: '\\u4E00' .. '\\u9FFF'
            {
            matchRange('\u4E00','\u9FFF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "CJK_Unified_Ideographs"

    // $ANTLR start "Yijing_Hexagram_Symbols"
    public final void mYijing_Hexagram_Symbols() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1196:37: ( '\\u4DC0' .. '\\u4DFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1196:41: '\\u4DC0' .. '\\u4DFF'
            {
            matchRange('\u4DC0','\u4DFF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Yijing_Hexagram_Symbols"

    // $ANTLR start "Yi_Syllables"
    public final void mYi_Syllables() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1198:37: ( '\\uA000' .. '\\uA48F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1198:41: '\\uA000' .. '\\uA48F'
            {
            matchRange('\uA000','\uA48F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Yi_Syllables"

    // $ANTLR start "Yi_Radicals"
    public final void mYi_Radicals() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1200:37: ( '\\uA490' .. '\\uA4CF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1200:41: '\\uA490' .. '\\uA4CF'
            {
            matchRange('\uA490','\uA4CF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Yi_Radicals"

    // $ANTLR start "Hangul_Syllables"
    public final void mHangul_Syllables() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1202:37: ( '\\uAC00' .. '\\uD7AF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1202:41: '\\uAC00' .. '\\uD7AF'
            {
            matchRange('\uAC00','\uD7AF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Hangul_Syllables"

    // $ANTLR start "High_Surrogates"
    public final void mHigh_Surrogates() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1204:37: ( '\\uD800' .. '\\uDB7F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1204:41: '\\uD800' .. '\\uDB7F'
            {
            matchRange('\uD800','\uDB7F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "High_Surrogates"

    // $ANTLR start "High_Private_Use_Surrogates"
    public final void mHigh_Private_Use_Surrogates() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1206:37: ( '\\uDB80' .. '\\uDBFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1206:41: '\\uDB80' .. '\\uDBFF'
            {
            matchRange('\uDB80','\uDBFF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "High_Private_Use_Surrogates"

    // $ANTLR start "Low_Surrogates"
    public final void mLow_Surrogates() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1208:37: ( '\\uDC00' .. '\\uDFFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1208:41: '\\uDC00' .. '\\uDFFF'
            {
            matchRange('\uDC00','\uDFFF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Low_Surrogates"

    // $ANTLR start "Private_Use_Area"
    public final void mPrivate_Use_Area() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1210:37: ( '\\uE000' .. '\\uF8FF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1210:41: '\\uE000' .. '\\uF8FF'
            {
            matchRange('\uE000','\uF8FF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Private_Use_Area"

    // $ANTLR start "CJK_Compatibility_Ideographs"
    public final void mCJK_Compatibility_Ideographs() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1212:37: ( '\\uF900' .. '\\uFAFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1212:41: '\\uF900' .. '\\uFAFF'
            {
            matchRange('\uF900','\uFAFF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "CJK_Compatibility_Ideographs"

    // $ANTLR start "Alphabetic_Presentation_Forms"
    public final void mAlphabetic_Presentation_Forms() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1214:37: ( '\\uFB00' .. '\\uFB4F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1214:41: '\\uFB00' .. '\\uFB4F'
            {
            matchRange('\uFB00','\uFB4F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Alphabetic_Presentation_Forms"

    // $ANTLR start "Arabic_Presentation_FormsA"
    public final void mArabic_Presentation_FormsA() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1216:37: ( '\\uFB50' .. '\\uFDFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1216:41: '\\uFB50' .. '\\uFDFF'
            {
            matchRange('\uFB50','\uFDFF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Arabic_Presentation_FormsA"

    // $ANTLR start "Variation_Selectors"
    public final void mVariation_Selectors() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1218:37: ( '\\uFE00' .. '\\uFE0F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1218:41: '\\uFE00' .. '\\uFE0F'
            {
            matchRange('\uFE00','\uFE0F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Variation_Selectors"

    // $ANTLR start "Combining_Half_Marks"
    public final void mCombining_Half_Marks() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1220:37: ( '\\uFE20' .. '\\uFE2F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1220:41: '\\uFE20' .. '\\uFE2F'
            {
            matchRange('\uFE20','\uFE2F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Combining_Half_Marks"

    // $ANTLR start "CJK_Compatibility_Forms"
    public final void mCJK_Compatibility_Forms() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1222:37: ( '\\uFE30' .. '\\uFE4F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1222:41: '\\uFE30' .. '\\uFE4F'
            {
            matchRange('\uFE30','\uFE4F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "CJK_Compatibility_Forms"

    // $ANTLR start "Small_Form_Variants"
    public final void mSmall_Form_Variants() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1224:37: ( '\\uFE50' .. '\\uFE6F' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1224:41: '\\uFE50' .. '\\uFE6F'
            {
            matchRange('\uFE50','\uFE6F'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Small_Form_Variants"

    // $ANTLR start "Arabic_Presentation_FormsB"
    public final void mArabic_Presentation_FormsB() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1226:37: ( '\\uFE70' .. '\\uFEFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1226:41: '\\uFE70' .. '\\uFEFF'
            {
            matchRange('\uFE70','\uFEFF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Arabic_Presentation_FormsB"

    // $ANTLR start "Halfwidth_and_Fullwidth_Forms"
    public final void mHalfwidth_and_Fullwidth_Forms() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1228:37: ( '\\uFF00' .. '\\uFFEF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1228:41: '\\uFF00' .. '\\uFFEF'
            {
            matchRange('\uFF00','\uFFEF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Halfwidth_and_Fullwidth_Forms"

    // $ANTLR start "Specials"
    public final void mSpecials() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1230:37: ( '\\uFFF0' .. '\\uFFFF' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1230:41: '\\uFFF0' .. '\\uFFFF'
            {
            matchRange('\uFFF0','\uFFFF'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Specials"

    // $ANTLR start "Unicode_Identifier_Part"
    public final void mUnicode_Identifier_Part() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1236:34: ( Unicode_Escape_Value | Unicode_Permitted_Identifier_Character )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0=='\\') ) {
                int LA11_1 = input.LA(2);

                if ( (LA11_1=='+'||(LA11_1>='0' && LA11_1<='9')||(LA11_1>='A' && LA11_1<='F')||(LA11_1>='a' && LA11_1<='f')) ) {
                    alt11=1;
                }
                else {
                    alt11=2;}
            }
            else if ( ((LA11_0>=' ' && LA11_0<='!')||(LA11_0>='#' && LA11_0<='&')||(LA11_0>='(' && LA11_0<='[')||(LA11_0>=']' && LA11_0<='~')||(LA11_0>='\u00A0' && LA11_0<='\u02AF')||(LA11_0>='\u0300' && LA11_0<='\u074F')||(LA11_0>='\u0780' && LA11_0<='\u07BF')||(LA11_0>='\u0900' && LA11_0<='\u137F')||(LA11_0>='\u13A0' && LA11_0<='\u18AF')||(LA11_0>='\u1900' && LA11_0<='\u197F')||(LA11_0>='\u19E0' && LA11_0<='\u19FF')||(LA11_0>='\u1D00' && LA11_0<='\u1D7F')||(LA11_0>='\u1E00' && LA11_0<='\u1FFF')||(LA11_0>='\u2070' && LA11_0<='\u218F')||(LA11_0>='\u2460' && LA11_0<='\u24FF')||(LA11_0>='\u2E80' && LA11_0<='\u2FDF')||(LA11_0>='\u2FF0' && LA11_0<='\u31BF')||(LA11_0>='\u31F0' && LA11_0<='\u4DBF')||(LA11_0>='\u4E00' && LA11_0<='\uA4CF')||(LA11_0>='\uAC00' && LA11_0<='\uD7AF')||(LA11_0>='\uD800' && LA11_0<='\uFE0F')||(LA11_0>='\uFE20' && LA11_0<='\uFFEF')) ) {
                alt11=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1236:37: Unicode_Escape_Value
                    {
                    mUnicode_Escape_Value(); 

                    }
                    break;
                case 2 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1236:60: Unicode_Permitted_Identifier_Character
                    {
                    mUnicode_Permitted_Identifier_Character(); 

                    }
                    break;

            }
        }
        finally {
        }
    }
    // $ANTLR end "Unicode_Identifier_Part"

    // $ANTLR start "Unicode_Escape_Value"
    public final void mUnicode_Escape_Value() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1239:34: ( Unicode_4_Digit_Escape_Value | Unicode_6_Digit_Escape_Value )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0=='\\') ) {
                int LA12_1 = input.LA(2);

                if ( (LA12_1=='+') ) {
                    alt12=2;
                }
                else if ( ((LA12_1>='0' && LA12_1<='9')||(LA12_1>='A' && LA12_1<='F')||(LA12_1>='a' && LA12_1<='f')) ) {
                    alt12=1;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 12, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }
            switch (alt12) {
                case 1 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1239:37: Unicode_4_Digit_Escape_Value
                    {
                    mUnicode_4_Digit_Escape_Value(); 

                    }
                    break;
                case 2 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1239:69: Unicode_6_Digit_Escape_Value
                    {
                    mUnicode_6_Digit_Escape_Value(); 

                    }
                    break;

            }
        }
        finally {
        }
    }
    // $ANTLR end "Unicode_Escape_Value"

    // $ANTLR start "Unicode_4_Digit_Escape_Value"
    public final void mUnicode_4_Digit_Escape_Value() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1242:34: ( Escape_Character Hexit Hexit Hexit Hexit )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1242:37: Escape_Character Hexit Hexit Hexit Hexit
            {
            mEscape_Character(); 
            mHexit(); 
            mHexit(); 
            mHexit(); 
            mHexit(); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Unicode_4_Digit_Escape_Value"

    // $ANTLR start "Unicode_6_Digit_Escape_Value"
    public final void mUnicode_6_Digit_Escape_Value() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1245:34: ( Escape_Character Plus_Sign Hexit Hexit Hexit Hexit Hexit Hexit )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1245:37: Escape_Character Plus_Sign Hexit Hexit Hexit Hexit Hexit Hexit
            {
            mEscape_Character(); 
            mPlus_Sign(); 
            mHexit(); 
            mHexit(); 
            mHexit(); 
            mHexit(); 
            mHexit(); 
            mHexit(); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Unicode_6_Digit_Escape_Value"

    // $ANTLR start "Escape_Character"
    public final void mEscape_Character() throws RecognitionException {
        try {
            int _type = Escape_Character;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1247:34: ( '\\\\' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1247:37: '\\\\'
            {
            match('\\'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Escape_Character"

    // $ANTLR start "HexPair"
    public final void mHexPair() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1256:13: ( Hexit Hexit )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1256:17: Hexit Hexit
            {
            mHexit(); 
            mHexit(); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "HexPair"

    // $ANTLR start "HexQuad"
    public final void mHexQuad() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1259:13: ( Hexit Hexit Hexit Hexit )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1259:17: Hexit Hexit Hexit Hexit
            {
            mHexit(); 
            mHexit(); 
            mHexit(); 
            mHexit(); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "HexQuad"

    // $ANTLR start "Unsigned_Integer"
    public final void mUnsigned_Integer() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1262:18: ( ( '0' ( ( 'x' | 'X' ) HexPair ( HexPair ( HexQuad ( HexQuad HexQuad )? )? )? | OctalDigit ( OctalDigit )* | {...}? ( '0' )* ) | ( '1' .. '9' ) ( Digit )* ) )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1263:2: ( '0' ( ( 'x' | 'X' ) HexPair ( HexPair ( HexQuad ( HexQuad HexQuad )? )? )? | OctalDigit ( OctalDigit )* | {...}? ( '0' )* ) | ( '1' .. '9' ) ( Digit )* )
            {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1263:2: ( '0' ( ( 'x' | 'X' ) HexPair ( HexPair ( HexQuad ( HexQuad HexQuad )? )? )? | OctalDigit ( OctalDigit )* | {...}? ( '0' )* ) | ( '1' .. '9' ) ( Digit )* )
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0=='0') ) {
                alt20=1;
            }
            else if ( ((LA20_0>='1' && LA20_0<='9')) ) {
                alt20=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;
            }
            switch (alt20) {
                case 1 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1263:4: '0' ( ( 'x' | 'X' ) HexPair ( HexPair ( HexQuad ( HexQuad HexQuad )? )? )? | OctalDigit ( OctalDigit )* | {...}? ( '0' )* )
                    {
                    match('0'); 
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1264:4: ( ( 'x' | 'X' ) HexPair ( HexPair ( HexQuad ( HexQuad HexQuad )? )? )? | OctalDigit ( OctalDigit )* | {...}? ( '0' )* )
                    int alt18=3;
                    switch ( input.LA(1) ) {
                    case 'X':
                    case 'x':
                        {
                        alt18=1;
                        }
                        break;
                    case '0':
                        {
                        int LA18_2 = input.LA(2);

                        if ( (!(((true)))) ) {
                            alt18=2;
                        }
                        else if ( ((true)) ) {
                            alt18=3;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 18, 2, input);

                            throw nvae;
                        }
                        }
                        break;
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                        {
                        alt18=2;
                        }
                        break;
                    default:
                        alt18=3;}

                    switch (alt18) {
                        case 1 :
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1264:6: ( 'x' | 'X' ) HexPair ( HexPair ( HexQuad ( HexQuad HexQuad )? )? )?
                            {
                            if ( input.LA(1)=='X'||input.LA(1)=='x' ) {
                                input.consume();

                            }
                            else {
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                recover(mse);
                                throw mse;}

                            mHexPair(); 
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1265:13: ( HexPair ( HexQuad ( HexQuad HexQuad )? )? )?
                            int alt15=2;
                            int LA15_0 = input.LA(1);

                            if ( ((LA15_0>='0' && LA15_0<='9')||(LA15_0>='A' && LA15_0<='F')||(LA15_0>='a' && LA15_0<='f')) ) {
                                alt15=1;
                            }
                            switch (alt15) {
                                case 1 :
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1265:15: HexPair ( HexQuad ( HexQuad HexQuad )? )?
                                    {
                                    mHexPair(); 
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1265:23: ( HexQuad ( HexQuad HexQuad )? )?
                                    int alt14=2;
                                    int LA14_0 = input.LA(1);

                                    if ( ((LA14_0>='0' && LA14_0<='9')||(LA14_0>='A' && LA14_0<='F')||(LA14_0>='a' && LA14_0<='f')) ) {
                                        alt14=1;
                                    }
                                    switch (alt14) {
                                        case 1 :
                                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1265:25: HexQuad ( HexQuad HexQuad )?
                                            {
                                            mHexQuad(); 
                                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1265:33: ( HexQuad HexQuad )?
                                            int alt13=2;
                                            int LA13_0 = input.LA(1);

                                            if ( ((LA13_0>='0' && LA13_0<='9')||(LA13_0>='A' && LA13_0<='F')||(LA13_0>='a' && LA13_0<='f')) ) {
                                                alt13=1;
                                            }
                                            switch (alt13) {
                                                case 1 :
                                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1265:34: HexQuad HexQuad
                                                    {
                                                    mHexQuad(); 
                                                    mHexQuad(); 

                                                    }
                                                    break;

                                            }


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1266:6: OctalDigit ( OctalDigit )*
                            {
                            mOctalDigit(); 
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1266:17: ( OctalDigit )*
                            loop16:
                            do {
                                int alt16=2;
                                int LA16_0 = input.LA(1);

                                if ( ((LA16_0>='0' && LA16_0<='7')) ) {
                                    alt16=1;
                                }


                                switch (alt16) {
                            	case 1 :
                            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1266:19: OctalDigit
                            	    {
                            	    mOctalDigit(); 

                            	    }
                            	    break;

                            	default :
                            	    break loop16;
                                }
                            } while (true);


                            }
                            break;
                        case 3 :
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1267:6: {...}? ( '0' )*
                            {
                            if ( !((true)) ) {
                                throw new FailedPredicateException(input, "Unsigned_Integer", "true");
                            }
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1268:5: ( '0' )*
                            loop17:
                            do {
                                int alt17=2;
                                int LA17_0 = input.LA(1);

                                if ( (LA17_0=='0') ) {
                                    alt17=1;
                                }


                                switch (alt17) {
                            	case 1 :
                            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1268:7: '0'
                            	    {
                            	    match('0'); 

                            	    }
                            	    break;

                            	default :
                            	    break loop17;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1270:4: ( '1' .. '9' ) ( Digit )*
                    {
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1270:4: ( '1' .. '9' )
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1270:6: '1' .. '9'
                    {
                    matchRange('1','9'); 

                    }

                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1270:17: ( Digit )*
                    loop19:
                    do {
                        int alt19=2;
                        int LA19_0 = input.LA(1);

                        if ( ((LA19_0>='0' && LA19_0<='9')) ) {
                            alt19=1;
                        }


                        switch (alt19) {
                    	case 1 :
                    	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1270:19: Digit
                    	    {
                    	    mDigit(); 

                    	    }
                    	    break;

                    	default :
                    	    break loop19;
                        }
                    } while (true);


                    }
                    break;

            }


            }

        }
        finally {
        }
    }
    // $ANTLR end "Unsigned_Integer"

    // $ANTLR start "Signed_Integer"
    public final void mSigned_Integer() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1274:16: ( ( Plus_Sign | Minus_Sign ) ( Digit )+ )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1275:2: ( Plus_Sign | Minus_Sign ) ( Digit )+
            {
            if ( input.LA(1)=='+'||input.LA(1)=='-' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}

            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1275:29: ( Digit )+
            int cnt21=0;
            loop21:
            do {
                int alt21=2;
                int LA21_0 = input.LA(1);

                if ( ((LA21_0>='0' && LA21_0<='9')) ) {
                    alt21=1;
                }


                switch (alt21) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1275:31: Digit
            	    {
            	    mDigit(); 

            	    }
            	    break;

            	default :
            	    if ( cnt21 >= 1 ) break loop21;
                        EarlyExitException eee =
                            new EarlyExitException(21, input);
                        throw eee;
                }
                cnt21++;
            } while (true);


            }

        }
        finally {
        }
    }
    // $ANTLR end "Signed_Integer"

    // $ANTLR start "Number"
    public final void mNumber() throws RecognitionException {
        try {
            int _type = Number;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1278:8: ( ( '0' ( ( 'x' | 'X' ) HexPair ( HexPair ( HexQuad ( HexQuad HexQuad )? )? )? ( ( 'K' | 'M' | 'G' ) | {...}?) | ( OctalDigit )* ( ( 'K' | 'M' | 'G' ) | {...}?) | Period ( Digit )+ ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )? | '8' .. '9' ( Digit )* ( ( 'K' | 'M' | 'G' ) | {...}?) ) | ( Plus_Sign | Minus_Sign ) ( Digit )+ ( Period ( Digit )+ ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )? | ( ( 'K' | 'M' | 'G' ) | {...}?) ) | ( '1' .. '9' ) ( Digit )* ( Period ( Digit )+ ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )? | ( ( 'K' | 'M' | 'G' ) | {...}?) ) | Period ( Digit )+ ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )? ) )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1279:2: ( '0' ( ( 'x' | 'X' ) HexPair ( HexPair ( HexQuad ( HexQuad HexQuad )? )? )? ( ( 'K' | 'M' | 'G' ) | {...}?) | ( OctalDigit )* ( ( 'K' | 'M' | 'G' ) | {...}?) | Period ( Digit )+ ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )? | '8' .. '9' ( Digit )* ( ( 'K' | 'M' | 'G' ) | {...}?) ) | ( Plus_Sign | Minus_Sign ) ( Digit )+ ( Period ( Digit )+ ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )? | ( ( 'K' | 'M' | 'G' ) | {...}?) ) | ( '1' .. '9' ) ( Digit )* ( Period ( Digit )+ ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )? | ( ( 'K' | 'M' | 'G' ) | {...}?) ) | Period ( Digit )+ ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )? )
            {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1279:2: ( '0' ( ( 'x' | 'X' ) HexPair ( HexPair ( HexQuad ( HexQuad HexQuad )? )? )? ( ( 'K' | 'M' | 'G' ) | {...}?) | ( OctalDigit )* ( ( 'K' | 'M' | 'G' ) | {...}?) | Period ( Digit )+ ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )? | '8' .. '9' ( Digit )* ( ( 'K' | 'M' | 'G' ) | {...}?) ) | ( Plus_Sign | Minus_Sign ) ( Digit )+ ( Period ( Digit )+ ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )? | ( ( 'K' | 'M' | 'G' ) | {...}?) ) | ( '1' .. '9' ) ( Digit )* ( Period ( Digit )+ ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )? | ( ( 'K' | 'M' | 'G' ) | {...}?) ) | Period ( Digit )+ ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )? )
            int alt57=4;
            switch ( input.LA(1) ) {
            case '0':
                {
                alt57=1;
                }
                break;
            case '+':
            case '-':
                {
                alt57=2;
                }
                break;
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
                {
                alt57=3;
                }
                break;
            case '.':
                {
                alt57=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;
            }

            switch (alt57) {
                case 1 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1279:4: '0' ( ( 'x' | 'X' ) HexPair ( HexPair ( HexQuad ( HexQuad HexQuad )? )? )? ( ( 'K' | 'M' | 'G' ) | {...}?) | ( OctalDigit )* ( ( 'K' | 'M' | 'G' ) | {...}?) | Period ( Digit )+ ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )? | '8' .. '9' ( Digit )* ( ( 'K' | 'M' | 'G' ) | {...}?) )
                    {
                    match('0'); 
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1280:4: ( ( 'x' | 'X' ) HexPair ( HexPair ( HexQuad ( HexQuad HexQuad )? )? )? ( ( 'K' | 'M' | 'G' ) | {...}?) | ( OctalDigit )* ( ( 'K' | 'M' | 'G' ) | {...}?) | Period ( Digit )+ ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )? | '8' .. '9' ( Digit )* ( ( 'K' | 'M' | 'G' ) | {...}?) )
                    int alt35=4;
                    switch ( input.LA(1) ) {
                    case 'X':
                    case 'x':
                        {
                        alt35=1;
                        }
                        break;
                    case '.':
                        {
                        alt35=3;
                        }
                        break;
                    case '8':
                    case '9':
                        {
                        alt35=4;
                        }
                        break;
                    default:
                        alt35=2;}

                    switch (alt35) {
                        case 1 :
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1280:6: ( 'x' | 'X' ) HexPair ( HexPair ( HexQuad ( HexQuad HexQuad )? )? )? ( ( 'K' | 'M' | 'G' ) | {...}?)
                            {
                            if ( input.LA(1)=='X'||input.LA(1)=='x' ) {
                                input.consume();

                            }
                            else {
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                recover(mse);
                                throw mse;}

                            mHexPair(); 
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1281:13: ( HexPair ( HexQuad ( HexQuad HexQuad )? )? )?
                            int alt24=2;
                            int LA24_0 = input.LA(1);

                            if ( ((LA24_0>='0' && LA24_0<='9')||(LA24_0>='A' && LA24_0<='F')||(LA24_0>='a' && LA24_0<='f')) ) {
                                alt24=1;
                            }
                            switch (alt24) {
                                case 1 :
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1281:15: HexPair ( HexQuad ( HexQuad HexQuad )? )?
                                    {
                                    mHexPair(); 
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1281:23: ( HexQuad ( HexQuad HexQuad )? )?
                                    int alt23=2;
                                    int LA23_0 = input.LA(1);

                                    if ( ((LA23_0>='0' && LA23_0<='9')||(LA23_0>='A' && LA23_0<='F')||(LA23_0>='a' && LA23_0<='f')) ) {
                                        alt23=1;
                                    }
                                    switch (alt23) {
                                        case 1 :
                                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1281:25: HexQuad ( HexQuad HexQuad )?
                                            {
                                            mHexQuad(); 
                                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1281:33: ( HexQuad HexQuad )?
                                            int alt22=2;
                                            int LA22_0 = input.LA(1);

                                            if ( ((LA22_0>='0' && LA22_0<='9')||(LA22_0>='A' && LA22_0<='F')||(LA22_0>='a' && LA22_0<='f')) ) {
                                                alt22=1;
                                            }
                                            switch (alt22) {
                                                case 1 :
                                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1281:34: HexQuad HexQuad
                                                    {
                                                    mHexQuad(); 
                                                    mHexQuad(); 

                                                    }
                                                    break;

                                            }


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }

                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1282:5: ( ( 'K' | 'M' | 'G' ) | {...}?)
                            int alt25=2;
                            int LA25_0 = input.LA(1);

                            if ( (LA25_0=='G'||LA25_0=='K'||LA25_0=='M') ) {
                                alt25=1;
                            }
                            else {
                                alt25=2;}
                            switch (alt25) {
                                case 1 :
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1282:7: ( 'K' | 'M' | 'G' )
                                    {
                                    if ( input.LA(1)=='G'||input.LA(1)=='K'||input.LA(1)=='M' ) {
                                        input.consume();

                                    }
                                    else {
                                        MismatchedSetException mse = new MismatchedSetException(null,input);
                                        recover(mse);
                                        throw mse;}


                                    						_type  =  Unsigned_Large_Integer;
                                    					

                                    }
                                    break;
                                case 2 :
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1286:7: {...}?
                                    {
                                    if ( !((true)) ) {
                                        throw new FailedPredicateException(input, "Number", "true");
                                    }

                                    						_type  =  Unsigned_Integer;
                                    					

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1292:6: ( OctalDigit )* ( ( 'K' | 'M' | 'G' ) | {...}?)
                            {
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1292:6: ( OctalDigit )*
                            loop26:
                            do {
                                int alt26=2;
                                int LA26_0 = input.LA(1);

                                if ( ((LA26_0>='0' && LA26_0<='7')) ) {
                                    alt26=1;
                                }


                                switch (alt26) {
                            	case 1 :
                            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1292:8: OctalDigit
                            	    {
                            	    mOctalDigit(); 

                            	    }
                            	    break;

                            	default :
                            	    break loop26;
                                }
                            } while (true);

                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1293:5: ( ( 'K' | 'M' | 'G' ) | {...}?)
                            int alt27=2;
                            int LA27_0 = input.LA(1);

                            if ( (LA27_0=='G'||LA27_0=='K'||LA27_0=='M') ) {
                                alt27=1;
                            }
                            else {
                                alt27=2;}
                            switch (alt27) {
                                case 1 :
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1293:7: ( 'K' | 'M' | 'G' )
                                    {
                                    if ( input.LA(1)=='G'||input.LA(1)=='K'||input.LA(1)=='M' ) {
                                        input.consume();

                                    }
                                    else {
                                        MismatchedSetException mse = new MismatchedSetException(null,input);
                                        recover(mse);
                                        throw mse;}


                                    						_type  =  Unsigned_Large_Integer;
                                    					

                                    }
                                    break;
                                case 2 :
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1297:7: {...}?
                                    {
                                    if ( !((true)) ) {
                                        throw new FailedPredicateException(input, "Number", "true");
                                    }

                                    						_type  =  Unsigned_Integer;
                                    					

                                    }
                                    break;

                            }


                            }
                            break;
                        case 3 :
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1303:6: Period ( Digit )+ ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )?
                            {
                            mPeriod(); 
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1304:5: ( Digit )+
                            int cnt28=0;
                            loop28:
                            do {
                                int alt28=2;
                                int LA28_0 = input.LA(1);

                                if ( ((LA28_0>='0' && LA28_0<='9')) ) {
                                    alt28=1;
                                }


                                switch (alt28) {
                            	case 1 :
                            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1304:7: Digit
                            	    {
                            	    mDigit(); 

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt28 >= 1 ) break loop28;
                                        EarlyExitException eee =
                                            new EarlyExitException(28, input);
                                        throw eee;
                                }
                                cnt28++;
                            } while (true);

                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1304:16: ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )?
                            int alt32=2;
                            int LA32_0 = input.LA(1);

                            if ( ((LA32_0>='D' && LA32_0<='F')||(LA32_0>='d' && LA32_0<='f')) ) {
                                alt32=1;
                            }
                            switch (alt32) {
                                case 1 :
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1304:18: ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )?
                                    {
                                    if ( (input.LA(1)>='D' && input.LA(1)<='F')||(input.LA(1)>='d' && input.LA(1)<='f') ) {
                                        input.consume();

                                    }
                                    else {
                                        MismatchedSetException mse = new MismatchedSetException(null,input);
                                        recover(mse);
                                        throw mse;}

                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1304:56: ( Plus_Sign | Minus_Sign )?
                                    int alt29=2;
                                    int LA29_0 = input.LA(1);

                                    if ( (LA29_0=='+'||LA29_0=='-') ) {
                                        alt29=1;
                                    }
                                    switch (alt29) {
                                        case 1 :
                                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
                                            {
                                            if ( input.LA(1)=='+'||input.LA(1)=='-' ) {
                                                input.consume();

                                            }
                                            else {
                                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                                recover(mse);
                                                throw mse;}


                                            }
                                            break;

                                    }

                                    mDigit(); 
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1304:90: ( Digit ( Digit )? )?
                                    int alt31=2;
                                    int LA31_0 = input.LA(1);

                                    if ( ((LA31_0>='0' && LA31_0<='9')) ) {
                                        alt31=1;
                                    }
                                    switch (alt31) {
                                        case 1 :
                                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1304:92: Digit ( Digit )?
                                            {
                                            mDigit(); 
                                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1304:98: ( Digit )?
                                            int alt30=2;
                                            int LA30_0 = input.LA(1);

                                            if ( ((LA30_0>='0' && LA30_0<='9')) ) {
                                                alt30=1;
                                            }
                                            switch (alt30) {
                                                case 1 :
                                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1304:100: Digit
                                                    {
                                                    mDigit(); 

                                                    }
                                                    break;

                                            }


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            					_type  =  Unsigned_Float;
                            				

                            }
                            break;
                        case 4 :
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1309:6: '8' .. '9' ( Digit )* ( ( 'K' | 'M' | 'G' ) | {...}?)
                            {
                            matchRange('8','9'); 
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1309:15: ( Digit )*
                            loop33:
                            do {
                                int alt33=2;
                                int LA33_0 = input.LA(1);

                                if ( ((LA33_0>='0' && LA33_0<='9')) ) {
                                    alt33=1;
                                }


                                switch (alt33) {
                            	case 1 :
                            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1309:17: Digit
                            	    {
                            	    mDigit(); 

                            	    }
                            	    break;

                            	default :
                            	    break loop33;
                                }
                            } while (true);

                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1310:5: ( ( 'K' | 'M' | 'G' ) | {...}?)
                            int alt34=2;
                            int LA34_0 = input.LA(1);

                            if ( (LA34_0=='G'||LA34_0=='K'||LA34_0=='M') ) {
                                alt34=1;
                            }
                            else {
                                alt34=2;}
                            switch (alt34) {
                                case 1 :
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1310:7: ( 'K' | 'M' | 'G' )
                                    {
                                    if ( input.LA(1)=='G'||input.LA(1)=='K'||input.LA(1)=='M' ) {
                                        input.consume();

                                    }
                                    else {
                                        MismatchedSetException mse = new MismatchedSetException(null,input);
                                        recover(mse);
                                        throw mse;}


                                    						_type  =  Unsigned_Large_Integer;
                                    					

                                    }
                                    break;
                                case 2 :
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1314:7: {...}?
                                    {
                                    if ( !((true)) ) {
                                        throw new FailedPredicateException(input, "Number", "true");
                                    }

                                    						_type  =  Unsigned_Integer;
                                    					

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1320:4: ( Plus_Sign | Minus_Sign ) ( Digit )+ ( Period ( Digit )+ ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )? | ( ( 'K' | 'M' | 'G' ) | {...}?) )
                    {
                    if ( input.LA(1)=='+'||input.LA(1)=='-' ) {
                        input.consume();

                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        recover(mse);
                        throw mse;}

                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1320:31: ( Digit )+
                    int cnt36=0;
                    loop36:
                    do {
                        int alt36=2;
                        int LA36_0 = input.LA(1);

                        if ( ((LA36_0>='0' && LA36_0<='9')) ) {
                            alt36=1;
                        }


                        switch (alt36) {
                    	case 1 :
                    	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1320:33: Digit
                    	    {
                    	    mDigit(); 

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt36 >= 1 ) break loop36;
                                EarlyExitException eee =
                                    new EarlyExitException(36, input);
                                throw eee;
                        }
                        cnt36++;
                    } while (true);

                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1321:4: ( Period ( Digit )+ ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )? | ( ( 'K' | 'M' | 'G' ) | {...}?) )
                    int alt43=2;
                    int LA43_0 = input.LA(1);

                    if ( (LA43_0=='.') ) {
                        alt43=1;
                    }
                    else {
                        alt43=2;}
                    switch (alt43) {
                        case 1 :
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1321:6: Period ( Digit )+ ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )?
                            {
                            mPeriod(); 
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1321:13: ( Digit )+
                            int cnt37=0;
                            loop37:
                            do {
                                int alt37=2;
                                int LA37_0 = input.LA(1);

                                if ( ((LA37_0>='0' && LA37_0<='9')) ) {
                                    alt37=1;
                                }


                                switch (alt37) {
                            	case 1 :
                            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1321:15: Digit
                            	    {
                            	    mDigit(); 

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt37 >= 1 ) break loop37;
                                        EarlyExitException eee =
                                            new EarlyExitException(37, input);
                                        throw eee;
                                }
                                cnt37++;
                            } while (true);

                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1321:24: ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )?
                            int alt41=2;
                            int LA41_0 = input.LA(1);

                            if ( ((LA41_0>='D' && LA41_0<='F')||(LA41_0>='d' && LA41_0<='f')) ) {
                                alt41=1;
                            }
                            switch (alt41) {
                                case 1 :
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1321:26: ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )?
                                    {
                                    if ( (input.LA(1)>='D' && input.LA(1)<='F')||(input.LA(1)>='d' && input.LA(1)<='f') ) {
                                        input.consume();

                                    }
                                    else {
                                        MismatchedSetException mse = new MismatchedSetException(null,input);
                                        recover(mse);
                                        throw mse;}

                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1321:64: ( Plus_Sign | Minus_Sign )?
                                    int alt38=2;
                                    int LA38_0 = input.LA(1);

                                    if ( (LA38_0=='+'||LA38_0=='-') ) {
                                        alt38=1;
                                    }
                                    switch (alt38) {
                                        case 1 :
                                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
                                            {
                                            if ( input.LA(1)=='+'||input.LA(1)=='-' ) {
                                                input.consume();

                                            }
                                            else {
                                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                                recover(mse);
                                                throw mse;}


                                            }
                                            break;

                                    }

                                    mDigit(); 
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1321:98: ( Digit ( Digit )? )?
                                    int alt40=2;
                                    int LA40_0 = input.LA(1);

                                    if ( ((LA40_0>='0' && LA40_0<='9')) ) {
                                        alt40=1;
                                    }
                                    switch (alt40) {
                                        case 1 :
                                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1321:100: Digit ( Digit )?
                                            {
                                            mDigit(); 
                                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1321:106: ( Digit )?
                                            int alt39=2;
                                            int LA39_0 = input.LA(1);

                                            if ( ((LA39_0>='0' && LA39_0<='9')) ) {
                                                alt39=1;
                                            }
                                            switch (alt39) {
                                                case 1 :
                                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1321:108: Digit
                                                    {
                                                    mDigit(); 

                                                    }
                                                    break;

                                            }


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            					_type  =  Signed_Float;
                            				

                            }
                            break;
                        case 2 :
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1326:6: ( ( 'K' | 'M' | 'G' ) | {...}?)
                            {
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1326:6: ( ( 'K' | 'M' | 'G' ) | {...}?)
                            int alt42=2;
                            int LA42_0 = input.LA(1);

                            if ( (LA42_0=='G'||LA42_0=='K'||LA42_0=='M') ) {
                                alt42=1;
                            }
                            else {
                                alt42=2;}
                            switch (alt42) {
                                case 1 :
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1326:8: ( 'K' | 'M' | 'G' )
                                    {
                                    if ( input.LA(1)=='G'||input.LA(1)=='K'||input.LA(1)=='M' ) {
                                        input.consume();

                                    }
                                    else {
                                        MismatchedSetException mse = new MismatchedSetException(null,input);
                                        recover(mse);
                                        throw mse;}


                                    						_type  =  Signed_Large_Integer;
                                    					

                                    }
                                    break;
                                case 2 :
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1330:7: {...}?
                                    {
                                    if ( !((true)) ) {
                                        throw new FailedPredicateException(input, "Number", "true");
                                    }

                                    						_type  =  Signed_Integer;
                                    					

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1336:4: ( '1' .. '9' ) ( Digit )* ( Period ( Digit )+ ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )? | ( ( 'K' | 'M' | 'G' ) | {...}?) )
                    {
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1336:4: ( '1' .. '9' )
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1336:6: '1' .. '9'
                    {
                    matchRange('1','9'); 

                    }

                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1336:17: ( Digit )*
                    loop44:
                    do {
                        int alt44=2;
                        int LA44_0 = input.LA(1);

                        if ( ((LA44_0>='0' && LA44_0<='9')) ) {
                            alt44=1;
                        }


                        switch (alt44) {
                    	case 1 :
                    	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1336:19: Digit
                    	    {
                    	    mDigit(); 

                    	    }
                    	    break;

                    	default :
                    	    break loop44;
                        }
                    } while (true);

                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1337:4: ( Period ( Digit )+ ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )? | ( ( 'K' | 'M' | 'G' ) | {...}?) )
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0=='.') ) {
                        alt51=1;
                    }
                    else {
                        alt51=2;}
                    switch (alt51) {
                        case 1 :
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1337:6: Period ( Digit )+ ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )?
                            {
                            mPeriod(); 
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1337:13: ( Digit )+
                            int cnt45=0;
                            loop45:
                            do {
                                int alt45=2;
                                int LA45_0 = input.LA(1);

                                if ( ((LA45_0>='0' && LA45_0<='9')) ) {
                                    alt45=1;
                                }


                                switch (alt45) {
                            	case 1 :
                            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1337:15: Digit
                            	    {
                            	    mDigit(); 

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt45 >= 1 ) break loop45;
                                        EarlyExitException eee =
                                            new EarlyExitException(45, input);
                                        throw eee;
                                }
                                cnt45++;
                            } while (true);

                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1337:24: ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )?
                            int alt49=2;
                            int LA49_0 = input.LA(1);

                            if ( ((LA49_0>='D' && LA49_0<='F')||(LA49_0>='d' && LA49_0<='f')) ) {
                                alt49=1;
                            }
                            switch (alt49) {
                                case 1 :
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1337:26: ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )?
                                    {
                                    if ( (input.LA(1)>='D' && input.LA(1)<='F')||(input.LA(1)>='d' && input.LA(1)<='f') ) {
                                        input.consume();

                                    }
                                    else {
                                        MismatchedSetException mse = new MismatchedSetException(null,input);
                                        recover(mse);
                                        throw mse;}

                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1337:64: ( Plus_Sign | Minus_Sign )?
                                    int alt46=2;
                                    int LA46_0 = input.LA(1);

                                    if ( (LA46_0=='+'||LA46_0=='-') ) {
                                        alt46=1;
                                    }
                                    switch (alt46) {
                                        case 1 :
                                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
                                            {
                                            if ( input.LA(1)=='+'||input.LA(1)=='-' ) {
                                                input.consume();

                                            }
                                            else {
                                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                                recover(mse);
                                                throw mse;}


                                            }
                                            break;

                                    }

                                    mDigit(); 
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1337:98: ( Digit ( Digit )? )?
                                    int alt48=2;
                                    int LA48_0 = input.LA(1);

                                    if ( ((LA48_0>='0' && LA48_0<='9')) ) {
                                        alt48=1;
                                    }
                                    switch (alt48) {
                                        case 1 :
                                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1337:100: Digit ( Digit )?
                                            {
                                            mDigit(); 
                                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1337:106: ( Digit )?
                                            int alt47=2;
                                            int LA47_0 = input.LA(1);

                                            if ( ((LA47_0>='0' && LA47_0<='9')) ) {
                                                alt47=1;
                                            }
                                            switch (alt47) {
                                                case 1 :
                                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1337:108: Digit
                                                    {
                                                    mDigit(); 

                                                    }
                                                    break;

                                            }


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            					_type  =  Unsigned_Float;
                            				

                            }
                            break;
                        case 2 :
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1342:6: ( ( 'K' | 'M' | 'G' ) | {...}?)
                            {
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1342:6: ( ( 'K' | 'M' | 'G' ) | {...}?)
                            int alt50=2;
                            int LA50_0 = input.LA(1);

                            if ( (LA50_0=='G'||LA50_0=='K'||LA50_0=='M') ) {
                                alt50=1;
                            }
                            else {
                                alt50=2;}
                            switch (alt50) {
                                case 1 :
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1342:8: ( 'K' | 'M' | 'G' )
                                    {
                                    if ( input.LA(1)=='G'||input.LA(1)=='K'||input.LA(1)=='M' ) {
                                        input.consume();

                                    }
                                    else {
                                        MismatchedSetException mse = new MismatchedSetException(null,input);
                                        recover(mse);
                                        throw mse;}


                                    						_type  =  Unsigned_Large_Integer;
                                    					

                                    }
                                    break;
                                case 2 :
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1346:7: {...}?
                                    {
                                    if ( !((true)) ) {
                                        throw new FailedPredicateException(input, "Number", "true");
                                    }

                                    						_type  =  Unsigned_Integer;
                                    					

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1353:4: Period ( Digit )+ ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )?
                    {
                    mPeriod(); 
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1354:4: ( Digit )+
                    int cnt52=0;
                    loop52:
                    do {
                        int alt52=2;
                        int LA52_0 = input.LA(1);

                        if ( ((LA52_0>='0' && LA52_0<='9')) ) {
                            alt52=1;
                        }


                        switch (alt52) {
                    	case 1 :
                    	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1354:6: Digit
                    	    {
                    	    mDigit(); 

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt52 >= 1 ) break loop52;
                                EarlyExitException eee =
                                    new EarlyExitException(52, input);
                                throw eee;
                        }
                        cnt52++;
                    } while (true);

                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1354:15: ( ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )? )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( ((LA56_0>='D' && LA56_0<='F')||(LA56_0>='d' && LA56_0<='f')) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1354:17: ( 'f' | 'F' | 'd' | 'D' | 'e' | 'E' ) ( Plus_Sign | Minus_Sign )? Digit ( Digit ( Digit )? )?
                            {
                            if ( (input.LA(1)>='D' && input.LA(1)<='F')||(input.LA(1)>='d' && input.LA(1)<='f') ) {
                                input.consume();

                            }
                            else {
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                recover(mse);
                                throw mse;}

                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1354:55: ( Plus_Sign | Minus_Sign )?
                            int alt53=2;
                            int LA53_0 = input.LA(1);

                            if ( (LA53_0=='+'||LA53_0=='-') ) {
                                alt53=1;
                            }
                            switch (alt53) {
                                case 1 :
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
                                    {
                                    if ( input.LA(1)=='+'||input.LA(1)=='-' ) {
                                        input.consume();

                                    }
                                    else {
                                        MismatchedSetException mse = new MismatchedSetException(null,input);
                                        recover(mse);
                                        throw mse;}


                                    }
                                    break;

                            }

                            mDigit(); 
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1354:89: ( Digit ( Digit )? )?
                            int alt55=2;
                            int LA55_0 = input.LA(1);

                            if ( ((LA55_0>='0' && LA55_0<='9')) ) {
                                alt55=1;
                            }
                            switch (alt55) {
                                case 1 :
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1354:91: Digit ( Digit )?
                                    {
                                    mDigit(); 
                                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1354:97: ( Digit )?
                                    int alt54=2;
                                    int LA54_0 = input.LA(1);

                                    if ( ((LA54_0>='0' && LA54_0<='9')) ) {
                                        alt54=1;
                                    }
                                    switch (alt54) {
                                        case 1 :
                                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1354:99: Digit
                                            {
                                            mDigit(); 

                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    					_type  =  Unsigned_Float;
                    				

                    }
                    break;

            }


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Number"

    // $ANTLR start "Character_Set_Name"
    public final void mCharacter_Set_Name() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1362:21: ( ( ( ( Regular_Identifier ) Period )? ( Regular_Identifier ) Period )? Regular_Identifier )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1362:23: ( ( ( Regular_Identifier ) Period )? ( Regular_Identifier ) Period )? Regular_Identifier
            {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1362:23: ( ( ( Regular_Identifier ) Period )? ( Regular_Identifier ) Period )?
            int alt59=2;
            alt59 = dfa59.predict(input);
            switch (alt59) {
                case 1 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1362:25: ( ( Regular_Identifier ) Period )? ( Regular_Identifier ) Period
                    {
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1362:25: ( ( Regular_Identifier ) Period )?
                    int alt58=2;
                    alt58 = dfa58.predict(input);
                    switch (alt58) {
                        case 1 :
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1362:27: ( Regular_Identifier ) Period
                            {
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1362:27: ( Regular_Identifier )
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1362:29: Regular_Identifier
                            {
                            mRegular_Identifier(); 

                            }

                            mPeriod(); 

                            }
                            break;

                    }

                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1363:27: ( Regular_Identifier )
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1363:29: Regular_Identifier
                    {
                    mRegular_Identifier(); 

                    }

                    mPeriod(); 

                    }
                    break;

            }

            mRegular_Identifier(); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Character_Set_Name"

    // $ANTLR start "Character_Set"
    public final void mCharacter_Set() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1367:16: ( Underscore Character_Set_Name )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1367:18: Underscore Character_Set_Name
            {
            mUnderscore(); 
            mCharacter_Set_Name(); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Character_Set"

    // $ANTLR start "Character_String_Literal"
    public final void mCharacter_String_Literal() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1370:26: ( Quote ( Extended_Latin_Without_Quotes )* Quote ( Quote ( Extended_Latin_Without_Quotes )* Quote )* )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1371:5: Quote ( Extended_Latin_Without_Quotes )* Quote ( Quote ( Extended_Latin_Without_Quotes )* Quote )*
            {
            mQuote(); 
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1371:11: ( Extended_Latin_Without_Quotes )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( ((LA60_0>='\u0001' && LA60_0<='!')||(LA60_0>='#' && LA60_0<='&')||(LA60_0>='(' && LA60_0<='\u00FF')) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1371:13: Extended_Latin_Without_Quotes
            	    {
            	    mExtended_Latin_Without_Quotes(); 

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);

            mQuote(); 
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1371:53: ( Quote ( Extended_Latin_Without_Quotes )* Quote )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0=='\'') ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1371:55: Quote ( Extended_Latin_Without_Quotes )* Quote
            	    {
            	    mQuote(); 
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1371:61: ( Extended_Latin_Without_Quotes )*
            	    loop61:
            	    do {
            	        int alt61=2;
            	        int LA61_0 = input.LA(1);

            	        if ( ((LA61_0>='\u0001' && LA61_0<='!')||(LA61_0>='#' && LA61_0<='&')||(LA61_0>='(' && LA61_0<='\u00FF')) ) {
            	            alt61=1;
            	        }


            	        switch (alt61) {
            	    	case 1 :
            	    	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1371:63: Extended_Latin_Without_Quotes
            	    	    {
            	    	    mExtended_Latin_Without_Quotes(); 

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop61;
            	        }
            	    } while (true);

            	    mQuote(); 

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);


            }

        }
        finally {
        }
    }
    // $ANTLR end "Character_String_Literal"

    // $ANTLR start "National_Character_String_Literal"
    public final void mNational_Character_String_Literal() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1375:35: ( 'N' Quote ( Extended_Latin_Without_Quotes )* Quote ( Quote ( Extended_Latin_Without_Quotes )* Quote )* )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1376:3: 'N' Quote ( Extended_Latin_Without_Quotes )* Quote ( Quote ( Extended_Latin_Without_Quotes )* Quote )*
            {
            match('N'); 
            mQuote(); 
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1376:13: ( Extended_Latin_Without_Quotes )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( ((LA63_0>='\u0001' && LA63_0<='!')||(LA63_0>='#' && LA63_0<='&')||(LA63_0>='(' && LA63_0<='\u00FF')) ) {
                    alt63=1;
                }


                switch (alt63) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1376:15: Extended_Latin_Without_Quotes
            	    {
            	    mExtended_Latin_Without_Quotes(); 

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);

            mQuote(); 
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1376:55: ( Quote ( Extended_Latin_Without_Quotes )* Quote )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0=='\'') ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1376:57: Quote ( Extended_Latin_Without_Quotes )* Quote
            	    {
            	    mQuote(); 
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1376:63: ( Extended_Latin_Without_Quotes )*
            	    loop64:
            	    do {
            	        int alt64=2;
            	        int LA64_0 = input.LA(1);

            	        if ( ((LA64_0>='\u0001' && LA64_0<='!')||(LA64_0>='#' && LA64_0<='&')||(LA64_0>='(' && LA64_0<='\u00FF')) ) {
            	            alt64=1;
            	        }


            	        switch (alt64) {
            	    	case 1 :
            	    	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1376:65: Extended_Latin_Without_Quotes
            	    	    {
            	    	    mExtended_Latin_Without_Quotes(); 

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop64;
            	        }
            	    } while (true);

            	    mQuote(); 

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            }

        }
        finally {
        }
    }
    // $ANTLR end "National_Character_String_Literal"

    // $ANTLR start "Unicode_Character_String_Literal"
    public final void mUnicode_Character_String_Literal() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1380:35: ( 'U' Ampersand Quote ( Unicode_Character_Without_Quotes )* Quote ( Quote ( Unicode_Character_Without_Quotes )* Quote )* )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1381:3: 'U' Ampersand Quote ( Unicode_Character_Without_Quotes )* Quote ( Quote ( Unicode_Character_Without_Quotes )* Quote )*
            {
            match('U'); 
            mAmpersand(); 
            mQuote(); 
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1381:23: ( Unicode_Character_Without_Quotes )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( ((LA66_0>=' ' && LA66_0<='!')||(LA66_0>='#' && LA66_0<='&')||(LA66_0>='(' && LA66_0<='~')||(LA66_0>='\u00A0' && LA66_0<='\uFFFF')) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1381:25: Unicode_Character_Without_Quotes
            	    {
            	    mUnicode_Character_Without_Quotes(); 

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);

            mQuote(); 
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1381:68: ( Quote ( Unicode_Character_Without_Quotes )* Quote )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0=='\'') ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1381:70: Quote ( Unicode_Character_Without_Quotes )* Quote
            	    {
            	    mQuote(); 
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1381:76: ( Unicode_Character_Without_Quotes )*
            	    loop67:
            	    do {
            	        int alt67=2;
            	        int LA67_0 = input.LA(1);

            	        if ( ((LA67_0>=' ' && LA67_0<='!')||(LA67_0>='#' && LA67_0<='&')||(LA67_0>='(' && LA67_0<='~')||(LA67_0>='\u00A0' && LA67_0<='\uFFFF')) ) {
            	            alt67=1;
            	        }


            	        switch (alt67) {
            	    	case 1 :
            	    	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1381:78: Unicode_Character_Without_Quotes
            	    	    {
            	    	    mUnicode_Character_Without_Quotes(); 

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop67;
            	        }
            	    } while (true);

            	    mQuote(); 

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            }

        }
        finally {
        }
    }
    // $ANTLR end "Unicode_Character_String_Literal"

    // $ANTLR start "Bit"
    public final void mBit() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1385:5: ( ( '0' | '1' ) )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1385:9: ( '0' | '1' )
            {
            if ( (input.LA(1)>='0' && input.LA(1)<='1') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "Bit"

    // $ANTLR start "Bit_String_Literal"
    public final void mBit_String_Literal() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1388:21: ( 'B' Quote ( Bit Bit Bit Bit Bit Bit Bit Bit )* Quote ( Quote ( Bit Bit Bit Bit Bit Bit Bit Bit )* Quote )* )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1389:3: 'B' Quote ( Bit Bit Bit Bit Bit Bit Bit Bit )* Quote ( Quote ( Bit Bit Bit Bit Bit Bit Bit Bit )* Quote )*
            {
            match('B'); 
            mQuote(); 
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1389:13: ( Bit Bit Bit Bit Bit Bit Bit Bit )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( ((LA69_0>='0' && LA69_0<='1')) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1389:15: Bit Bit Bit Bit Bit Bit Bit Bit
            	    {
            	    mBit(); 
            	    mBit(); 
            	    mBit(); 
            	    mBit(); 
            	    mBit(); 
            	    mBit(); 
            	    mBit(); 
            	    mBit(); 

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);

            mQuote(); 
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1389:58: ( Quote ( Bit Bit Bit Bit Bit Bit Bit Bit )* Quote )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0=='\'') ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1389:60: Quote ( Bit Bit Bit Bit Bit Bit Bit Bit )* Quote
            	    {
            	    mQuote(); 
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1389:66: ( Bit Bit Bit Bit Bit Bit Bit Bit )*
            	    loop70:
            	    do {
            	        int alt70=2;
            	        int LA70_0 = input.LA(1);

            	        if ( ((LA70_0>='0' && LA70_0<='1')) ) {
            	            alt70=1;
            	        }


            	        switch (alt70) {
            	    	case 1 :
            	    	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1389:68: Bit Bit Bit Bit Bit Bit Bit Bit
            	    	    {
            	    	    mBit(); 
            	    	    mBit(); 
            	    	    mBit(); 
            	    	    mBit(); 
            	    	    mBit(); 
            	    	    mBit(); 
            	    	    mBit(); 
            	    	    mBit(); 

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop70;
            	        }
            	    } while (true);

            	    mQuote(); 

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            }

        }
        finally {
        }
    }
    // $ANTLR end "Bit_String_Literal"

    // $ANTLR start "Hex_String_Literal"
    public final void mHex_String_Literal() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1393:21: ( 'X' Quote ( Hexit Hexit )* Quote ( Quote ( Hexit Hexit )* Quote )* )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1394:3: 'X' Quote ( Hexit Hexit )* Quote ( Quote ( Hexit Hexit )* Quote )*
            {
            match('X'); 
            mQuote(); 
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1394:13: ( Hexit Hexit )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( ((LA72_0>='0' && LA72_0<='9')||(LA72_0>='A' && LA72_0<='F')||(LA72_0>='a' && LA72_0<='f')) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1394:15: Hexit Hexit
            	    {
            	    mHexit(); 
            	    mHexit(); 

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);

            mQuote(); 
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1394:38: ( Quote ( Hexit Hexit )* Quote )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0=='\'') ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1394:40: Quote ( Hexit Hexit )* Quote
            	    {
            	    mQuote(); 
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1394:46: ( Hexit Hexit )*
            	    loop73:
            	    do {
            	        int alt73=2;
            	        int LA73_0 = input.LA(1);

            	        if ( ((LA73_0>='0' && LA73_0<='9')||(LA73_0>='A' && LA73_0<='F')||(LA73_0>='a' && LA73_0<='f')) ) {
            	            alt73=1;
            	        }


            	        switch (alt73) {
            	    	case 1 :
            	    	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1394:48: Hexit Hexit
            	    	    {
            	    	    mHexit(); 
            	    	    mHexit(); 

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop73;
            	        }
            	    } while (true);

            	    mQuote(); 

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

        }
        finally {
        }
    }
    // $ANTLR end "Hex_String_Literal"

    // $ANTLR start "String_Literal"
    public final void mString_Literal() throws RecognitionException {
        try {
            int _type = String_Literal;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1397:16: ( ( Character_Set ( Unicode_Character_String_Literal | Character_String_Literal ) | Bit_String_Literal | Hex_String_Literal | National_Character_String_Literal | Unicode_Character_String_Literal | Character_String_Literal ) )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1398:2: ( Character_Set ( Unicode_Character_String_Literal | Character_String_Literal ) | Bit_String_Literal | Hex_String_Literal | National_Character_String_Literal | Unicode_Character_String_Literal | Character_String_Literal )
            {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1398:2: ( Character_Set ( Unicode_Character_String_Literal | Character_String_Literal ) | Bit_String_Literal | Hex_String_Literal | National_Character_String_Literal | Unicode_Character_String_Literal | Character_String_Literal )
            int alt76=6;
            switch ( input.LA(1) ) {
            case '_':
                {
                alt76=1;
                }
                break;
            case 'B':
                {
                alt76=2;
                }
                break;
            case 'X':
                {
                alt76=3;
                }
                break;
            case 'N':
                {
                alt76=4;
                }
                break;
            case 'U':
                {
                alt76=5;
                }
                break;
            case '\'':
                {
                alt76=6;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;
            }

            switch (alt76) {
                case 1 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1398:4: Character_Set ( Unicode_Character_String_Literal | Character_String_Literal )
                    {
                    mCharacter_Set(); 
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1399:3: ( Unicode_Character_String_Literal | Character_String_Literal )
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0=='U') ) {
                        alt75=1;
                    }
                    else if ( (LA75_0=='\'') ) {
                        alt75=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 75, 0, input);

                        throw nvae;
                    }
                    switch (alt75) {
                        case 1 :
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1400:4: Unicode_Character_String_Literal
                            {
                            mUnicode_Character_String_Literal(); 

                            					_type  =  Unicode_Character_String_Literal;
                            				

                            }
                            break;
                        case 2 :
                            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1404:5: Character_String_Literal
                            {
                            mCharacter_String_Literal(); 

                            					_type  =  Character_String_Literal;
                            				

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1409:4: Bit_String_Literal
                    {
                    mBit_String_Literal(); 

                    				_type  =  Bit_String_Literal;
                    			

                    }
                    break;
                case 3 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1413:4: Hex_String_Literal
                    {
                    mHex_String_Literal(); 

                    				_type  =  Hex_String_Literal;
                    			

                    }
                    break;
                case 4 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1417:4: National_Character_String_Literal
                    {
                    mNational_Character_String_Literal(); 

                    				_type  =  National_Character_String_Literal;
                    			

                    }
                    break;
                case 5 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1421:4: Unicode_Character_String_Literal
                    {
                    mUnicode_Character_String_Literal(); 

                    				_type  =  Unicode_Character_String_Literal;
                    			

                    }
                    break;
                case 6 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1425:4: Character_String_Literal
                    {
                    mCharacter_String_Literal(); 

                    				_type  =  Character_String_Literal;
                    			

                    }
                    break;

            }


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "String_Literal"

    // $ANTLR start "Regular_Identifier"
    public final void mRegular_Identifier() throws RecognitionException {
        try {
            int _type = Regular_Identifier;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1449:21: ( SQL92_Identifier )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1449:24: SQL92_Identifier
            {
            mSQL92_Identifier(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Regular_Identifier"

    // $ANTLR start "SybaseASA_Identifier"
    public final void mSybaseASA_Identifier() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1463:23: ( SybaseASA_Identifier_Start ( SybaseASA_Identifier_Part )* )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1464:5: SybaseASA_Identifier_Start ( SybaseASA_Identifier_Part )*
            {
            mSybaseASA_Identifier_Start(); 
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1464:32: ( SybaseASA_Identifier_Part )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( ((LA77_0>='#' && LA77_0<='$')||(LA77_0>='0' && LA77_0<='9')||(LA77_0>='@' && LA77_0<='Z')||LA77_0=='_'||(LA77_0>='a' && LA77_0<='z')) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1464:34: SybaseASA_Identifier_Part
            	    {
            	    mSybaseASA_Identifier_Part(); 

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            }

        }
        finally {
        }
    }
    // $ANTLR end "SybaseASA_Identifier"

    // $ANTLR start "SybaseASA_Identifier_Start"
    public final void mSybaseASA_Identifier_Start() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1466:29: ( Simple_Latin_Letter | AT_Sign | Hash_Sign | Dollar_Sign )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( (input.LA(1)>='#' && input.LA(1)<='$')||(input.LA(1)>='@' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "SybaseASA_Identifier_Start"

    // $ANTLR start "SybaseASA_Identifier_Part"
    public final void mSybaseASA_Identifier_Part() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1468:28: ( Simple_Latin_Letter | Digit | Underscore | AT_Sign | Hash_Sign | Dollar_Sign )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( (input.LA(1)>='#' && input.LA(1)<='$')||(input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='@' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "SybaseASA_Identifier_Part"

    // $ANTLR start "SqlServer_Identifier"
    public final void mSqlServer_Identifier() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1475:23: ( SqlServer_Identifier_Start ( SqlServer_Identifier_Part )* )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1476:5: SqlServer_Identifier_Start ( SqlServer_Identifier_Part )*
            {
            mSqlServer_Identifier_Start(); 
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1476:32: ( SqlServer_Identifier_Part )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( ((LA78_0>='#' && LA78_0<='$')||(LA78_0>='0' && LA78_0<='9')||(LA78_0>='@' && LA78_0<='Z')||LA78_0=='_'||(LA78_0>='a' && LA78_0<='z')) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1476:34: SqlServer_Identifier_Part
            	    {
            	    mSqlServer_Identifier_Part(); 

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            }

        }
        finally {
        }
    }
    // $ANTLR end "SqlServer_Identifier"

    // $ANTLR start "SqlServer_Identifier_Start"
    public final void mSqlServer_Identifier_Start() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1478:29: ( Simple_Latin_Letter | AT_Sign | Hash_Sign )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='#'||(input.LA(1)>='@' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "SqlServer_Identifier_Start"

    // $ANTLR start "SqlServer_Identifier_Part"
    public final void mSqlServer_Identifier_Part() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1480:28: ( Simple_Latin_Letter | Digit | Underscore | AT_Sign | Hash_Sign | Dollar_Sign )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( (input.LA(1)>='#' && input.LA(1)<='$')||(input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='@' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "SqlServer_Identifier_Part"

    // $ANTLR start "Teradata_Identifier"
    public final void mTeradata_Identifier() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1487:22: ( Teradata_Identifier_Start ( Teradata_Identifier_Part )* )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1488:5: Teradata_Identifier_Start ( Teradata_Identifier_Part )*
            {
            mTeradata_Identifier_Start(); 
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1488:31: ( Teradata_Identifier_Part )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( ((LA79_0>='#' && LA79_0<='$')||(LA79_0>='0' && LA79_0<='9')||(LA79_0>='A' && LA79_0<='Z')||LA79_0=='_'||(LA79_0>='a' && LA79_0<='z')) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1488:33: Teradata_Identifier_Part
            	    {
            	    mTeradata_Identifier_Part(); 

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);


            }

        }
        finally {
        }
    }
    // $ANTLR end "Teradata_Identifier"

    // $ANTLR start "Teradata_Identifier_Start"
    public final void mTeradata_Identifier_Start() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1490:28: ( Simple_Latin_Letter | Hash_Sign | Dollar_Sign )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( (input.LA(1)>='#' && input.LA(1)<='$')||(input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "Teradata_Identifier_Start"

    // $ANTLR start "Teradata_Identifier_Part"
    public final void mTeradata_Identifier_Part() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1492:28: ( Simple_Latin_Letter | Digit | Underscore | Hash_Sign | Dollar_Sign )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( (input.LA(1)>='#' && input.LA(1)<='$')||(input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "Teradata_Identifier_Part"

    // $ANTLR start "MySQL_Identifier"
    public final void mMySQL_Identifier() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1498:19: ( MySQL_Identifier_Start ( MySQL_Identifier_Part )* )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1499:5: MySQL_Identifier_Start ( MySQL_Identifier_Part )*
            {
            mMySQL_Identifier_Start(); 
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1499:28: ( MySQL_Identifier_Part )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0=='$'||(LA80_0>='0' && LA80_0<='9')||(LA80_0>='A' && LA80_0<='Z')||LA80_0=='_'||(LA80_0>='a' && LA80_0<='z')) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1499:30: MySQL_Identifier_Part
            	    {
            	    mMySQL_Identifier_Part(); 

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);


            }

        }
        finally {
        }
    }
    // $ANTLR end "MySQL_Identifier"

    // $ANTLR start "MySQL_Identifier_Start"
    public final void mMySQL_Identifier_Start() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1501:25: ( Simple_Latin_Letter | Digit )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( (input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "MySQL_Identifier_Start"

    // $ANTLR start "MySQL_Identifier_Part"
    public final void mMySQL_Identifier_Part() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1503:24: ( Simple_Latin_Letter | Digit | Underscore | Dollar_Sign )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='$'||(input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "MySQL_Identifier_Part"

    // $ANTLR start "Informix_PostgreSQL_Identifier"
    public final void mInformix_PostgreSQL_Identifier() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1509:33: ( Informix_Identifier_Start ( Informix_Identifier_Part )* )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1510:5: Informix_Identifier_Start ( Informix_Identifier_Part )*
            {
            mInformix_Identifier_Start(); 
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1510:31: ( Informix_Identifier_Part )*
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( (LA81_0=='$'||(LA81_0>='0' && LA81_0<='9')||(LA81_0>='A' && LA81_0<='Z')||LA81_0=='_'||(LA81_0>='a' && LA81_0<='z')) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1510:33: Informix_Identifier_Part
            	    {
            	    mInformix_Identifier_Part(); 

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);


            }

        }
        finally {
        }
    }
    // $ANTLR end "Informix_PostgreSQL_Identifier"

    // $ANTLR start "Informix_Identifier_Start"
    public final void mInformix_Identifier_Start() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1512:28: ( Simple_Latin_Letter )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1512:31: Simple_Latin_Letter
            {
            mSimple_Latin_Letter(); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Informix_Identifier_Start"

    // $ANTLR start "Informix_Identifier_Part"
    public final void mInformix_Identifier_Part() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1514:27: ( Simple_Latin_Letter | Digit | Underscore | Dollar_Sign )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='$'||(input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "Informix_Identifier_Part"

    // $ANTLR start "Oracle_Identifier"
    public final void mOracle_Identifier() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1520:20: ( Oracle_Identifier_Start ( Oracle_Identifier_Part )* )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1521:5: Oracle_Identifier_Start ( Oracle_Identifier_Part )*
            {
            mOracle_Identifier_Start(); 
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1521:29: ( Oracle_Identifier_Part )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( ((LA82_0>='#' && LA82_0<='$')||(LA82_0>='0' && LA82_0<='9')||(LA82_0>='A' && LA82_0<='Z')||LA82_0=='_'||(LA82_0>='a' && LA82_0<='z')) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1521:31: Oracle_Identifier_Part
            	    {
            	    mOracle_Identifier_Part(); 

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            }

        }
        finally {
        }
    }
    // $ANTLR end "Oracle_Identifier"

    // $ANTLR start "Oracle_Identifier_Start"
    public final void mOracle_Identifier_Start() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1523:26: ( Simple_Latin_Letter )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1523:29: Simple_Latin_Letter
            {
            mSimple_Latin_Letter(); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Oracle_Identifier_Start"

    // $ANTLR start "Oracle_Identifier_Part"
    public final void mOracle_Identifier_Part() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1525:25: ( Simple_Latin_Letter | Digit | Underscore | Hash_Sign | Dollar_Sign )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( (input.LA(1)>='#' && input.LA(1)<='$')||(input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "Oracle_Identifier_Part"

    // $ANTLR start "Interbase_Identifier"
    public final void mInterbase_Identifier() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1531:23: ( Interbase_Identifier_Start ( Interbase_Identifier_Part )* )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1532:5: Interbase_Identifier_Start ( Interbase_Identifier_Part )*
            {
            mInterbase_Identifier_Start(); 
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1532:32: ( Interbase_Identifier_Part )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0=='$'||(LA83_0>='0' && LA83_0<='9')||(LA83_0>='A' && LA83_0<='Z')||LA83_0=='_'||(LA83_0>='a' && LA83_0<='z')) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1532:34: Interbase_Identifier_Part
            	    {
            	    mInterbase_Identifier_Part(); 

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            }

        }
        finally {
        }
    }
    // $ANTLR end "Interbase_Identifier"

    // $ANTLR start "Interbase_Identifier_Start"
    public final void mInterbase_Identifier_Start() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1534:29: ( Simple_Latin_Letter )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1534:32: Simple_Latin_Letter
            {
            mSimple_Latin_Letter(); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Interbase_Identifier_Start"

    // $ANTLR start "Interbase_Identifier_Part"
    public final void mInterbase_Identifier_Part() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1536:28: ( Simple_Latin_Letter | Digit | Underscore | Dollar_Sign )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( input.LA(1)=='$'||(input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "Interbase_Identifier_Part"

    // $ANTLR start "SQL92_Identifier"
    public final void mSQL92_Identifier() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1542:19: ( SQL92_Identifier_Start ( SQL92_Identifier_Part )* )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1542:22: SQL92_Identifier_Start ( SQL92_Identifier_Part )*
            {
            mSQL92_Identifier_Start(); 
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1542:45: ( SQL92_Identifier_Part )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( ((LA84_0>='0' && LA84_0<='9')||(LA84_0>='A' && LA84_0<='Z')||LA84_0=='_'||(LA84_0>='a' && LA84_0<='z')) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1542:47: SQL92_Identifier_Part
            	    {
            	    mSQL92_Identifier_Part(); 

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);


            }

        }
        finally {
        }
    }
    // $ANTLR end "SQL92_Identifier"

    // $ANTLR start "SQL92_Identifier_Start"
    public final void mSQL92_Identifier_Start() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1544:25: ( Simple_Latin_Letter )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1544:28: Simple_Latin_Letter
            {
            mSimple_Latin_Letter(); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "SQL92_Identifier_Start"

    // $ANTLR start "SQL92_Identifier_Part"
    public final void mSQL92_Identifier_Part() throws RecognitionException {
        try {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1546:24: ( Simple_Latin_Letter | Digit | Underscore )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            {
            if ( (input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "SQL92_Identifier_Part"

    // $ANTLR start "Unicode_Identifier"
    public final void mUnicode_Identifier() throws RecognitionException {
        try {
            int _type = Unicode_Identifier;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1554:21: ( 'U' Ampersand Double_Quote ( Unicode_Identifier_Part )+ Double_Quote ( ESCAPE Escape_Character )? )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1555:3: 'U' Ampersand Double_Quote ( Unicode_Identifier_Part )+ Double_Quote ( ESCAPE Escape_Character )?
            {
            match('U'); 
            mAmpersand(); 
            mDouble_Quote(); 
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1555:31: ( Unicode_Identifier_Part )+
            int cnt85=0;
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( ((LA85_0>=' ' && LA85_0<='!')||(LA85_0>='#' && LA85_0<='&')||(LA85_0>='(' && LA85_0<='~')||(LA85_0>='\u00A0' && LA85_0<='\u02AF')||(LA85_0>='\u0300' && LA85_0<='\u074F')||(LA85_0>='\u0780' && LA85_0<='\u07BF')||(LA85_0>='\u0900' && LA85_0<='\u137F')||(LA85_0>='\u13A0' && LA85_0<='\u18AF')||(LA85_0>='\u1900' && LA85_0<='\u197F')||(LA85_0>='\u19E0' && LA85_0<='\u19FF')||(LA85_0>='\u1D00' && LA85_0<='\u1D7F')||(LA85_0>='\u1E00' && LA85_0<='\u1FFF')||(LA85_0>='\u2070' && LA85_0<='\u218F')||(LA85_0>='\u2460' && LA85_0<='\u24FF')||(LA85_0>='\u2E80' && LA85_0<='\u2FDF')||(LA85_0>='\u2FF0' && LA85_0<='\u31BF')||(LA85_0>='\u31F0' && LA85_0<='\u4DBF')||(LA85_0>='\u4E00' && LA85_0<='\uA4CF')||(LA85_0>='\uAC00' && LA85_0<='\uD7AF')||(LA85_0>='\uD800' && LA85_0<='\uFE0F')||(LA85_0>='\uFE20' && LA85_0<='\uFFEF')) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1555:33: Unicode_Identifier_Part
            	    {
            	    mUnicode_Identifier_Part(); 

            	    }
            	    break;

            	default :
            	    if ( cnt85 >= 1 ) break loop85;
                        EarlyExitException eee =
                            new EarlyExitException(85, input);
                        throw eee;
                }
                cnt85++;
            } while (true);

            mDouble_Quote(); 
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1556:3: ( ESCAPE Escape_Character )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0=='E'||LA86_0=='e') ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1556:5: ESCAPE Escape_Character
                    {
                    mESCAPE(); 
                    mEscape_Character(); 

                    }
                    break;

            }


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Unicode_Identifier"

    // $ANTLR start "Space"
    public final void mSpace() throws RecognitionException {
        try {
            int _type = Space;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1563:10: ( ' ' )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1563:13: ' '
            {
            match(' '); 

            //	_channel=HIDDEN;
            	SKIP();


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Space"

    // $ANTLR start "White_Space"
    public final void mWhite_Space() throws RecognitionException {
        try {
            int _type = White_Space;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1569:14: ( ( Control_Characters | Extended_Control_Characters )+ )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1569:16: ( Control_Characters | Extended_Control_Characters )+
            {
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1569:16: ( Control_Characters | Extended_Control_Characters )+
            int cnt87=0;
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( ((LA87_0>='\u0001' && LA87_0<='\u001F')||(LA87_0>='\u0080' && LA87_0<='\u009F')) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:
            	    {
            	    if ( (input.LA(1)>='\u0001' && input.LA(1)<='\u001F')||(input.LA(1)>='\u0080' && input.LA(1)<='\u009F') ) {
            	        input.consume();

            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        recover(mse);
            	        throw mse;}


            	    }
            	    break;

            	default :
            	    if ( cnt87 >= 1 ) break loop87;
                        EarlyExitException eee =
                            new EarlyExitException(87, input);
                        throw eee;
                }
                cnt87++;
            } while (true);


            //	_channel=HIDDEN;
            	SKIP();


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "White_Space"

    // $ANTLR start "BAD"
    public final void mBAD() throws RecognitionException {
        try {
            int _type = BAD;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1576:5: ( . )
            // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1576:7: .
            {
            matchAny(); 
             error(UNKNOWN_CHARACTER, getText()); skip(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "BAD"

    public void mTokens() throws RecognitionException {
        // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:8: ( COMMENT | LINE_COMMENT | ADD | ALLOCATE | ALL | ALTER | AND | ANY | ARE | ARRAY | ASENSITIVE | ASYMMETRIC | AS | ATOMIC | AT | AUTHORIZATION | BEGIN | BETWEEN | BIGINT | BINARY | BLOB | BOOLEAN | BOTH | BY | CALLED | CALL | CASCADED | CASE | CAST | CHARACTER | CHAR | CHECK | CLOB | CLOSE | COLLATE | COLUMN | COMMIT | CONNECTION | CONNECT | CONSTRAINT | CONSTRUCTOR | CONTINUE | CORRESPONDING | CREATE | CROSS | CUBE | CURRENT_DATE | CURRENT_DEFAULT_TRANSFORM_GROUP | CURRENT_PATH | CURRENT_ROLE | CURRENT_TIMESTAMP | CURRENT_TIME | CURRENT_TRANSFORM_GROUP_FOR_TYPE | CURRENT_USER | CURRENT | CURSOR | CYCLE | DATE | DAY | DEALLOCATE | DECIMAL | DECLARE | DEC | DEFAULT | DELETE | DEREF | DESCRIBE | DETERMINISTIC | DISCONNECT | DISTINCT | DOUBLE | DROP | DYNAMIC | EACH | ELEMENT | ELSE | END_EXEC | END | ESCAPE | EXCEPT | EXECUTE | EXEC | EXISTS | EXIT | EXTERNAL | FALSE | FETCH | FILTER | FOREIGN | FOR | FREE | FROM | FULL | FUNCTION | GENERATED | GET | GLOBAL | GRANT | GROUPING | GROUP | HANDLER | HAVING | HOLD | HOUR | IDENTITY | IMMEDIATE | INDICATOR | INNER | INOUT | INPUT | INSENSITIVE | INSERT | INTEGER | INTERSECT | INTERVAL | INTO | INT | IN | ISOLATION | IS | JOIN | LANGUAGE | LARGE | LATERAL | LEADING | LEFT | LIKE | LOCALTIMESTAMP | LOCALTIME | LOCAL | MATCH | MEMBER | MERGE | METHOD | MINUTE | MODIFIES | MODULE | MONTH | MULTISET | NATIONAL | NATURAL | NCHAR_VARYING | NCHAR | NCLOB | NEW | NONE | NOTFOUND | NOT | NO | NULL | NUMERIC | OF | OLD | ONLY | ON | OPEN | ORDER | OR | OUTER | OUTPUT | OUT | OVERLAPS | OVER | PARAMETER | PARTITION | PRECISION | PREPARE | PRIMARY | PROCEDURE | RANGE | READS | REAL | RECURSIVE | REFERENCES | REFERENCING | REF | RELEASE | RETURNS | RETURN | REVOKE | RIGHT | ROLLBACK | ROLLUP | ROWS | ROW | SAVEPOINT | SCOPE | SCROLL | SEARCH | SECOND | SELECT | SENSITIVE | SESSION_USER | SET | SIMILAR | SMALLINT | SOME | SPECIFICTYPE | SPECIFIC | SQLEXCEPTION | SQLSTATE | SQLWARNING | SQL | START | STATIC | SUBMULTISET | SYMMETRIC | SYSTEM_USER | SYSTEM | TABLE | THEN | TIMESTAMP | TIMEZONE_HOUR | TIMEZONE_MINUTE | TIME | TO | TRAILING | TRANSLATION | TREAT | TRIGGER | TRUE | UNDO | UNION | UNIQUE | UNKNOWN | UNNEST | UPDATE | USER | USING | VALUES | VALUE | VARCHAR | VARYING | WHENEVER | WHEN | WHERE | WINDOW | WITH | WITHIN | WITHOUT | YEAR | ABS | ABSOLUTE | ACTION | ADA | ADMIN | AFTER | ALWAYS | ASC | ASSERTION | ASSIGNMENT | ATTRIBUTE | ATTRIBUTES | AUTO | AVG | BEFORE | BERNOULLI | BIN | BREADTH | CARDINALITY | CASCADE | CATALOG_NAME | CATALOG | CEILING | CEIL | CHAIN | CHARACTERISTICS | CHARACTERS | CHARACTER_LENGTH | CHARACTER_SET_CATALOG | CHARACTER_SET_NAME | CHARACTER_SET_SCHEMA | CHAR_LENGTH | CHECKED | CLASS_ORIGIN | COALESCE | COBOL | CODE_UNITS | COLLATION_CATALOG | COLLATION_NAME | COLLATION_SCHEMA | COLLATION | COLLECT | COLUMN_NAME | COMMAND_FUNCTION_CODE | COMMAND_FUNCTION | COMMITTED | CONDITION_NUMBER | CONDITION | CONNECTION_NAME | CONSTRAINTS | CONSTRAINT_CATALOG | CONSTRAINT_NAME | CONSTRAINT_SCHEMA | CONSTRUCTORS | CONST | CONTAINS | CONVERT | CORR | COUNT | COVAR_POP | COVAR_SAMP | CUME_DIST | CURRENT_COLLATION | CURSOR_NAME | DATA | DATETIME_INTERVAL_CODE | DATETIME_INTERVAL_PRECISION | DAYS | DCL | DEFAULTS | DEFERRABLE | DEFERRED | DEFINED | DEFINER | DEGREE | DENSE_RANK | DEPTH | DERIVED | DESCRIPTOR | DESC | DIAGNOSTICS | DISPATCH | DISPLAY | DOMAIN | DOUBLE_PRECISION | DYNAMIC_FUNCTION | DYNAMIC_FUNCTION_CODE | EQUALS | EVERY | EXCEPTION | EXCLUDE | EXCLUDING | EXP | EXTERN | EXTRACT | FINAL | FIRST | FIXED | FLOAT | FLOOR | FOLLOWING | FORTRAN | FOUND | FUSION | GENERAL | GOTO | GO | GRANTED | HIERARCHY | HOURS | IMPLEMENTATION | INCLUDING | INCREMENT | INDICATOR_TYPE | INITIALLY | INSTANCE | INSTANTIABLE | INTERFACES | INTERSECTION | INVOKER | KEY_MEMBER | KEY_TYPE | KEY | KIND | LAST | LENGTH | LEN | LEVEL | LOGICAL | LONG | LN | LOCATOR | LOWER | MAP | MATCHED | MAXVALUE | MAX | MESSAGE_LENGTH | MESSAGE_OCTET_LENGTH | MESSAGE_TEXT | MINVALUE | MIN | MOD | MORE | MUMPS | NAMES | NAME | NESTING | NEXT | NORMALIZED | NORMALIZE | NULLABLE | NULLIF | NULLS | NUMBER | OBJECT | OCTETS | OCTET_LENGTH | OPTION | OPTIONS | ORDERING | ORDINALITY | OTHERS | OVERLAY | OVERRIDING | PACKED | PAD | PARAMETER_MODE | PARAMETER_NAME | PARAMETER_ORDINAL_POSITION | PARAMETER_SPECIFIC_CATALOG | PARAMETER_SPECIFIC_NAME | PARAMETER_SPECIFIC_SCHEMA | PARTIAL | PASCAL | PATH | PERCENTILE_CONT | PERCENTILE_DISC | PERCENT_RANK | PICTURE | PIC | PLACING | PLI | POSITION | POWER | PRECEDING | PRESERVE | PRIOR | PRIVILEGES | PUBLIC | RANK | READ | REGR_AVGX | REGR_AVGY | REGR_COUNT | REGR_INTERCEPT | REGR_R2 | REGR_SLOPE | REGR_SXX | REGR_SXY | REGR_SYY | RELATIVE | REPEATABLE | RESTART | RESTRICT | RESULT | RETURNED_CARDINALITY | RETURNED_LENGTH | RETURNED_OCTET_LENGTH | RETURNED_SQLSTATE | ROLE | ROUTINE_CATALOG | ROUTINE_NAME | ROUTINE_SCHEMA | ROUTINE | ROW_COUNT | ROW_NUMBER | SCALE | SCHEMA_NAME | SCHEMA | SCOPE_CATALOG | SCOPE_NAME | SCOPE_SCHEMA | SECTION | SECURITY | SELF | SEPARATE | SEQUENCE | SERIALIZABLE | SERVER_NAME | SESSION | SETS | SHORT | SIGNED | SIGN | SIMPLE | SIZE | SOURCE | SPACE | SPECIFIC_NAME | SQLSTATE_TYPE | SQRT | STATEMENT | STATE | STDDEV_POP | STDDEV_SAMP | STRUCTURE | STYLE | SUBCLASS_ORIGIN | SUBSTRING | SUM | TABLESAMPLE | TABLE_NAME | TEMPORARY | TIES | TOP_LEVEL_COUNT | TRANSACTIONS_COMMITTED | TRANSACTIONS_ROLLED_BACK | TRANSACTION_ACTIVE | TRANSACTION | TRANSFORMS | TRANSFORM | TRANSLATE | TRIGGER_CATALOG | TRIGGER_NAME | TRIGGER_SCHEMA | TRIM | TYPE | UNBOUNDED | UNCOMMITTED | UNDER | UNNAMED | UNSIGNED | UPPER | USAGE | USER_DEFINED_TYPE_CATALOG | USER_DEFINED_TYPE_CODE | USER_DEFINED_TYPE_NAME | USER_DEFINED_TYPE_SCHEMA | VAR_POP | VAR_SAMP | VIEW | VOLATILE | WIDTH_BUCKET | WORK | WRITE | ZONE | Not_Equals_Operator | Greater_Or_Equals_Operator | Less_Or_Equals_Operator | Concatenation_Operator | Right_Arrow | Double_Colon | Double_Period | Back_Quote | Tilde | Exclamation | AT_Sign | Percent | Circumflex | Ampersand | Asterisk | Left_Paren | Right_Paren | Plus_Sign | Minus_Sign | Equals_Operator | Left_Brace | Right_Brace | Left_Bracket | Left_Bracket_Trigraph | Right_Bracket | Right_Bracket_Trigraph | Vertical_Bar | Colon | Semicolon | Double_Quote | Quote | Less_Than_Operator | Greater_Than_Operator | Comma | Period | Question_Mark | Slash | Unicode_Forbidden_Identifier_Characters | Escape_Character | Number | String_Literal | Regular_Identifier | Unicode_Identifier | Space | White_Space | BAD )
        int alt88=574;
        alt88 = dfa88.predict(input);
        switch (alt88) {
            case 1 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:10: COMMENT
                {
                mCOMMENT(); 

                }
                break;
            case 2 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:18: LINE_COMMENT
                {
                mLINE_COMMENT(); 

                }
                break;
            case 3 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:31: ADD
                {
                mADD(); 

                }
                break;
            case 4 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:35: ALLOCATE
                {
                mALLOCATE(); 

                }
                break;
            case 5 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:44: ALL
                {
                mALL(); 

                }
                break;
            case 6 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:48: ALTER
                {
                mALTER(); 

                }
                break;
            case 7 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:54: AND
                {
                mAND(); 

                }
                break;
            case 8 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:58: ANY
                {
                mANY(); 

                }
                break;
            case 9 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:62: ARE
                {
                mARE(); 

                }
                break;
            case 10 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:66: ARRAY
                {
                mARRAY(); 

                }
                break;
            case 11 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:72: ASENSITIVE
                {
                mASENSITIVE(); 

                }
                break;
            case 12 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:83: ASYMMETRIC
                {
                mASYMMETRIC(); 

                }
                break;
            case 13 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:94: AS
                {
                mAS(); 

                }
                break;
            case 14 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:97: ATOMIC
                {
                mATOMIC(); 

                }
                break;
            case 15 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:104: AT
                {
                mAT(); 

                }
                break;
            case 16 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:107: AUTHORIZATION
                {
                mAUTHORIZATION(); 

                }
                break;
            case 17 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:121: BEGIN
                {
                mBEGIN(); 

                }
                break;
            case 18 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:127: BETWEEN
                {
                mBETWEEN(); 

                }
                break;
            case 19 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:135: BIGINT
                {
                mBIGINT(); 

                }
                break;
            case 20 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:142: BINARY
                {
                mBINARY(); 

                }
                break;
            case 21 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:149: BLOB
                {
                mBLOB(); 

                }
                break;
            case 22 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:154: BOOLEAN
                {
                mBOOLEAN(); 

                }
                break;
            case 23 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:162: BOTH
                {
                mBOTH(); 

                }
                break;
            case 24 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:167: BY
                {
                mBY(); 

                }
                break;
            case 25 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:170: CALLED
                {
                mCALLED(); 

                }
                break;
            case 26 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:177: CALL
                {
                mCALL(); 

                }
                break;
            case 27 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:182: CASCADED
                {
                mCASCADED(); 

                }
                break;
            case 28 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:191: CASE
                {
                mCASE(); 

                }
                break;
            case 29 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:196: CAST
                {
                mCAST(); 

                }
                break;
            case 30 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:201: CHARACTER
                {
                mCHARACTER(); 

                }
                break;
            case 31 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:211: CHAR
                {
                mCHAR(); 

                }
                break;
            case 32 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:216: CHECK
                {
                mCHECK(); 

                }
                break;
            case 33 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:222: CLOB
                {
                mCLOB(); 

                }
                break;
            case 34 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:227: CLOSE
                {
                mCLOSE(); 

                }
                break;
            case 35 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:233: COLLATE
                {
                mCOLLATE(); 

                }
                break;
            case 36 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:241: COLUMN
                {
                mCOLUMN(); 

                }
                break;
            case 37 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:248: COMMIT
                {
                mCOMMIT(); 

                }
                break;
            case 38 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:255: CONNECTION
                {
                mCONNECTION(); 

                }
                break;
            case 39 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:266: CONNECT
                {
                mCONNECT(); 

                }
                break;
            case 40 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:274: CONSTRAINT
                {
                mCONSTRAINT(); 

                }
                break;
            case 41 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:285: CONSTRUCTOR
                {
                mCONSTRUCTOR(); 

                }
                break;
            case 42 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:297: CONTINUE
                {
                mCONTINUE(); 

                }
                break;
            case 43 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:306: CORRESPONDING
                {
                mCORRESPONDING(); 

                }
                break;
            case 44 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:320: CREATE
                {
                mCREATE(); 

                }
                break;
            case 45 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:327: CROSS
                {
                mCROSS(); 

                }
                break;
            case 46 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:333: CUBE
                {
                mCUBE(); 

                }
                break;
            case 47 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:338: CURRENT_DATE
                {
                mCURRENT_DATE(); 

                }
                break;
            case 48 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:351: CURRENT_DEFAULT_TRANSFORM_GROUP
                {
                mCURRENT_DEFAULT_TRANSFORM_GROUP(); 

                }
                break;
            case 49 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:383: CURRENT_PATH
                {
                mCURRENT_PATH(); 

                }
                break;
            case 50 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:396: CURRENT_ROLE
                {
                mCURRENT_ROLE(); 

                }
                break;
            case 51 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:409: CURRENT_TIMESTAMP
                {
                mCURRENT_TIMESTAMP(); 

                }
                break;
            case 52 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:427: CURRENT_TIME
                {
                mCURRENT_TIME(); 

                }
                break;
            case 53 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:440: CURRENT_TRANSFORM_GROUP_FOR_TYPE
                {
                mCURRENT_TRANSFORM_GROUP_FOR_TYPE(); 

                }
                break;
            case 54 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:473: CURRENT_USER
                {
                mCURRENT_USER(); 

                }
                break;
            case 55 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:486: CURRENT
                {
                mCURRENT(); 

                }
                break;
            case 56 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:494: CURSOR
                {
                mCURSOR(); 

                }
                break;
            case 57 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:501: CYCLE
                {
                mCYCLE(); 

                }
                break;
            case 58 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:507: DATE
                {
                mDATE(); 

                }
                break;
            case 59 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:512: DAY
                {
                mDAY(); 

                }
                break;
            case 60 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:516: DEALLOCATE
                {
                mDEALLOCATE(); 

                }
                break;
            case 61 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:527: DECIMAL
                {
                mDECIMAL(); 

                }
                break;
            case 62 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:535: DECLARE
                {
                mDECLARE(); 

                }
                break;
            case 63 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:543: DEC
                {
                mDEC(); 

                }
                break;
            case 64 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:547: DEFAULT
                {
                mDEFAULT(); 

                }
                break;
            case 65 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:555: DELETE
                {
                mDELETE(); 

                }
                break;
            case 66 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:562: DEREF
                {
                mDEREF(); 

                }
                break;
            case 67 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:568: DESCRIBE
                {
                mDESCRIBE(); 

                }
                break;
            case 68 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:577: DETERMINISTIC
                {
                mDETERMINISTIC(); 

                }
                break;
            case 69 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:591: DISCONNECT
                {
                mDISCONNECT(); 

                }
                break;
            case 70 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:602: DISTINCT
                {
                mDISTINCT(); 

                }
                break;
            case 71 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:611: DOUBLE
                {
                mDOUBLE(); 

                }
                break;
            case 72 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:618: DROP
                {
                mDROP(); 

                }
                break;
            case 73 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:623: DYNAMIC
                {
                mDYNAMIC(); 

                }
                break;
            case 74 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:631: EACH
                {
                mEACH(); 

                }
                break;
            case 75 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:636: ELEMENT
                {
                mELEMENT(); 

                }
                break;
            case 76 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:644: ELSE
                {
                mELSE(); 

                }
                break;
            case 77 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:649: END_EXEC
                {
                mEND_EXEC(); 

                }
                break;
            case 78 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:658: END
                {
                mEND(); 

                }
                break;
            case 79 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:662: ESCAPE
                {
                mESCAPE(); 

                }
                break;
            case 80 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:669: EXCEPT
                {
                mEXCEPT(); 

                }
                break;
            case 81 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:676: EXECUTE
                {
                mEXECUTE(); 

                }
                break;
            case 82 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:684: EXEC
                {
                mEXEC(); 

                }
                break;
            case 83 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:689: EXISTS
                {
                mEXISTS(); 

                }
                break;
            case 84 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:696: EXIT
                {
                mEXIT(); 

                }
                break;
            case 85 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:701: EXTERNAL
                {
                mEXTERNAL(); 

                }
                break;
            case 86 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:710: FALSE
                {
                mFALSE(); 

                }
                break;
            case 87 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:716: FETCH
                {
                mFETCH(); 

                }
                break;
            case 88 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:722: FILTER
                {
                mFILTER(); 

                }
                break;
            case 89 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:729: FOREIGN
                {
                mFOREIGN(); 

                }
                break;
            case 90 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:737: FOR
                {
                mFOR(); 

                }
                break;
            case 91 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:741: FREE
                {
                mFREE(); 

                }
                break;
            case 92 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:746: FROM
                {
                mFROM(); 

                }
                break;
            case 93 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:751: FULL
                {
                mFULL(); 

                }
                break;
            case 94 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:756: FUNCTION
                {
                mFUNCTION(); 

                }
                break;
            case 95 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:765: GENERATED
                {
                mGENERATED(); 

                }
                break;
            case 96 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:775: GET
                {
                mGET(); 

                }
                break;
            case 97 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:779: GLOBAL
                {
                mGLOBAL(); 

                }
                break;
            case 98 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:786: GRANT
                {
                mGRANT(); 

                }
                break;
            case 99 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:792: GROUPING
                {
                mGROUPING(); 

                }
                break;
            case 100 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:801: GROUP
                {
                mGROUP(); 

                }
                break;
            case 101 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:807: HANDLER
                {
                mHANDLER(); 

                }
                break;
            case 102 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:815: HAVING
                {
                mHAVING(); 

                }
                break;
            case 103 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:822: HOLD
                {
                mHOLD(); 

                }
                break;
            case 104 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:827: HOUR
                {
                mHOUR(); 

                }
                break;
            case 105 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:832: IDENTITY
                {
                mIDENTITY(); 

                }
                break;
            case 106 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:841: IMMEDIATE
                {
                mIMMEDIATE(); 

                }
                break;
            case 107 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:851: INDICATOR
                {
                mINDICATOR(); 

                }
                break;
            case 108 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:861: INNER
                {
                mINNER(); 

                }
                break;
            case 109 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:867: INOUT
                {
                mINOUT(); 

                }
                break;
            case 110 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:873: INPUT
                {
                mINPUT(); 

                }
                break;
            case 111 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:879: INSENSITIVE
                {
                mINSENSITIVE(); 

                }
                break;
            case 112 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:891: INSERT
                {
                mINSERT(); 

                }
                break;
            case 113 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:898: INTEGER
                {
                mINTEGER(); 

                }
                break;
            case 114 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:906: INTERSECT
                {
                mINTERSECT(); 

                }
                break;
            case 115 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:916: INTERVAL
                {
                mINTERVAL(); 

                }
                break;
            case 116 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:925: INTO
                {
                mINTO(); 

                }
                break;
            case 117 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:930: INT
                {
                mINT(); 

                }
                break;
            case 118 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:934: IN
                {
                mIN(); 

                }
                break;
            case 119 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:937: ISOLATION
                {
                mISOLATION(); 

                }
                break;
            case 120 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:947: IS
                {
                mIS(); 

                }
                break;
            case 121 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:950: JOIN
                {
                mJOIN(); 

                }
                break;
            case 122 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:955: LANGUAGE
                {
                mLANGUAGE(); 

                }
                break;
            case 123 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:964: LARGE
                {
                mLARGE(); 

                }
                break;
            case 124 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:970: LATERAL
                {
                mLATERAL(); 

                }
                break;
            case 125 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:978: LEADING
                {
                mLEADING(); 

                }
                break;
            case 126 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:986: LEFT
                {
                mLEFT(); 

                }
                break;
            case 127 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:991: LIKE
                {
                mLIKE(); 

                }
                break;
            case 128 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:996: LOCALTIMESTAMP
                {
                mLOCALTIMESTAMP(); 

                }
                break;
            case 129 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1011: LOCALTIME
                {
                mLOCALTIME(); 

                }
                break;
            case 130 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1021: LOCAL
                {
                mLOCAL(); 

                }
                break;
            case 131 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1027: MATCH
                {
                mMATCH(); 

                }
                break;
            case 132 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1033: MEMBER
                {
                mMEMBER(); 

                }
                break;
            case 133 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1040: MERGE
                {
                mMERGE(); 

                }
                break;
            case 134 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1046: METHOD
                {
                mMETHOD(); 

                }
                break;
            case 135 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1053: MINUTE
                {
                mMINUTE(); 

                }
                break;
            case 136 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1060: MODIFIES
                {
                mMODIFIES(); 

                }
                break;
            case 137 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1069: MODULE
                {
                mMODULE(); 

                }
                break;
            case 138 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1076: MONTH
                {
                mMONTH(); 

                }
                break;
            case 139 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1082: MULTISET
                {
                mMULTISET(); 

                }
                break;
            case 140 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1091: NATIONAL
                {
                mNATIONAL(); 

                }
                break;
            case 141 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1100: NATURAL
                {
                mNATURAL(); 

                }
                break;
            case 142 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1108: NCHAR_VARYING
                {
                mNCHAR_VARYING(); 

                }
                break;
            case 143 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1122: NCHAR
                {
                mNCHAR(); 

                }
                break;
            case 144 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1128: NCLOB
                {
                mNCLOB(); 

                }
                break;
            case 145 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1134: NEW
                {
                mNEW(); 

                }
                break;
            case 146 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1138: NONE
                {
                mNONE(); 

                }
                break;
            case 147 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1143: NOTFOUND
                {
                mNOTFOUND(); 

                }
                break;
            case 148 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1152: NOT
                {
                mNOT(); 

                }
                break;
            case 149 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1156: NO
                {
                mNO(); 

                }
                break;
            case 150 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1159: NULL
                {
                mNULL(); 

                }
                break;
            case 151 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1164: NUMERIC
                {
                mNUMERIC(); 

                }
                break;
            case 152 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1172: OF
                {
                mOF(); 

                }
                break;
            case 153 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1175: OLD
                {
                mOLD(); 

                }
                break;
            case 154 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1179: ONLY
                {
                mONLY(); 

                }
                break;
            case 155 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1184: ON
                {
                mON(); 

                }
                break;
            case 156 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1187: OPEN
                {
                mOPEN(); 

                }
                break;
            case 157 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1192: ORDER
                {
                mORDER(); 

                }
                break;
            case 158 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1198: OR
                {
                mOR(); 

                }
                break;
            case 159 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1201: OUTER
                {
                mOUTER(); 

                }
                break;
            case 160 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1207: OUTPUT
                {
                mOUTPUT(); 

                }
                break;
            case 161 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1214: OUT
                {
                mOUT(); 

                }
                break;
            case 162 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1218: OVERLAPS
                {
                mOVERLAPS(); 

                }
                break;
            case 163 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1227: OVER
                {
                mOVER(); 

                }
                break;
            case 164 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1232: PARAMETER
                {
                mPARAMETER(); 

                }
                break;
            case 165 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1242: PARTITION
                {
                mPARTITION(); 

                }
                break;
            case 166 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1252: PRECISION
                {
                mPRECISION(); 

                }
                break;
            case 167 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1262: PREPARE
                {
                mPREPARE(); 

                }
                break;
            case 168 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1270: PRIMARY
                {
                mPRIMARY(); 

                }
                break;
            case 169 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1278: PROCEDURE
                {
                mPROCEDURE(); 

                }
                break;
            case 170 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1288: RANGE
                {
                mRANGE(); 

                }
                break;
            case 171 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1294: READS
                {
                mREADS(); 

                }
                break;
            case 172 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1300: REAL
                {
                mREAL(); 

                }
                break;
            case 173 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1305: RECURSIVE
                {
                mRECURSIVE(); 

                }
                break;
            case 174 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1315: REFERENCES
                {
                mREFERENCES(); 

                }
                break;
            case 175 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1326: REFERENCING
                {
                mREFERENCING(); 

                }
                break;
            case 176 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1338: REF
                {
                mREF(); 

                }
                break;
            case 177 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1342: RELEASE
                {
                mRELEASE(); 

                }
                break;
            case 178 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1350: RETURNS
                {
                mRETURNS(); 

                }
                break;
            case 179 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1358: RETURN
                {
                mRETURN(); 

                }
                break;
            case 180 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1365: REVOKE
                {
                mREVOKE(); 

                }
                break;
            case 181 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1372: RIGHT
                {
                mRIGHT(); 

                }
                break;
            case 182 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1378: ROLLBACK
                {
                mROLLBACK(); 

                }
                break;
            case 183 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1387: ROLLUP
                {
                mROLLUP(); 

                }
                break;
            case 184 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1394: ROWS
                {
                mROWS(); 

                }
                break;
            case 185 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1399: ROW
                {
                mROW(); 

                }
                break;
            case 186 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1403: SAVEPOINT
                {
                mSAVEPOINT(); 

                }
                break;
            case 187 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1413: SCOPE
                {
                mSCOPE(); 

                }
                break;
            case 188 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1419: SCROLL
                {
                mSCROLL(); 

                }
                break;
            case 189 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1426: SEARCH
                {
                mSEARCH(); 

                }
                break;
            case 190 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1433: SECOND
                {
                mSECOND(); 

                }
                break;
            case 191 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1440: SELECT
                {
                mSELECT(); 

                }
                break;
            case 192 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1447: SENSITIVE
                {
                mSENSITIVE(); 

                }
                break;
            case 193 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1457: SESSION_USER
                {
                mSESSION_USER(); 

                }
                break;
            case 194 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1470: SET
                {
                mSET(); 

                }
                break;
            case 195 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1474: SIMILAR
                {
                mSIMILAR(); 

                }
                break;
            case 196 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1482: SMALLINT
                {
                mSMALLINT(); 

                }
                break;
            case 197 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1491: SOME
                {
                mSOME(); 

                }
                break;
            case 198 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1496: SPECIFICTYPE
                {
                mSPECIFICTYPE(); 

                }
                break;
            case 199 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1509: SPECIFIC
                {
                mSPECIFIC(); 

                }
                break;
            case 200 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1518: SQLEXCEPTION
                {
                mSQLEXCEPTION(); 

                }
                break;
            case 201 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1531: SQLSTATE
                {
                mSQLSTATE(); 

                }
                break;
            case 202 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1540: SQLWARNING
                {
                mSQLWARNING(); 

                }
                break;
            case 203 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1551: SQL
                {
                mSQL(); 

                }
                break;
            case 204 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1555: START
                {
                mSTART(); 

                }
                break;
            case 205 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1561: STATIC
                {
                mSTATIC(); 

                }
                break;
            case 206 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1568: SUBMULTISET
                {
                mSUBMULTISET(); 

                }
                break;
            case 207 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1580: SYMMETRIC
                {
                mSYMMETRIC(); 

                }
                break;
            case 208 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1590: SYSTEM_USER
                {
                mSYSTEM_USER(); 

                }
                break;
            case 209 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1602: SYSTEM
                {
                mSYSTEM(); 

                }
                break;
            case 210 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1609: TABLE
                {
                mTABLE(); 

                }
                break;
            case 211 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1615: THEN
                {
                mTHEN(); 

                }
                break;
            case 212 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1620: TIMESTAMP
                {
                mTIMESTAMP(); 

                }
                break;
            case 213 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1630: TIMEZONE_HOUR
                {
                mTIMEZONE_HOUR(); 

                }
                break;
            case 214 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1644: TIMEZONE_MINUTE
                {
                mTIMEZONE_MINUTE(); 

                }
                break;
            case 215 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1660: TIME
                {
                mTIME(); 

                }
                break;
            case 216 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1665: TO
                {
                mTO(); 

                }
                break;
            case 217 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1668: TRAILING
                {
                mTRAILING(); 

                }
                break;
            case 218 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1677: TRANSLATION
                {
                mTRANSLATION(); 

                }
                break;
            case 219 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1689: TREAT
                {
                mTREAT(); 

                }
                break;
            case 220 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1695: TRIGGER
                {
                mTRIGGER(); 

                }
                break;
            case 221 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1703: TRUE
                {
                mTRUE(); 

                }
                break;
            case 222 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1708: UNDO
                {
                mUNDO(); 

                }
                break;
            case 223 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1713: UNION
                {
                mUNION(); 

                }
                break;
            case 224 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1719: UNIQUE
                {
                mUNIQUE(); 

                }
                break;
            case 225 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1726: UNKNOWN
                {
                mUNKNOWN(); 

                }
                break;
            case 226 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1734: UNNEST
                {
                mUNNEST(); 

                }
                break;
            case 227 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1741: UPDATE
                {
                mUPDATE(); 

                }
                break;
            case 228 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1748: USER
                {
                mUSER(); 

                }
                break;
            case 229 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1753: USING
                {
                mUSING(); 

                }
                break;
            case 230 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1759: VALUES
                {
                mVALUES(); 

                }
                break;
            case 231 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1766: VALUE
                {
                mVALUE(); 

                }
                break;
            case 232 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1772: VARCHAR
                {
                mVARCHAR(); 

                }
                break;
            case 233 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1780: VARYING
                {
                mVARYING(); 

                }
                break;
            case 234 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1788: WHENEVER
                {
                mWHENEVER(); 

                }
                break;
            case 235 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1797: WHEN
                {
                mWHEN(); 

                }
                break;
            case 236 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1802: WHERE
                {
                mWHERE(); 

                }
                break;
            case 237 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1808: WINDOW
                {
                mWINDOW(); 

                }
                break;
            case 238 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1815: WITH
                {
                mWITH(); 

                }
                break;
            case 239 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1820: WITHIN
                {
                mWITHIN(); 

                }
                break;
            case 240 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1827: WITHOUT
                {
                mWITHOUT(); 

                }
                break;
            case 241 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1835: YEAR
                {
                mYEAR(); 

                }
                break;
            case 242 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1840: ABS
                {
                mABS(); 

                }
                break;
            case 243 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1844: ABSOLUTE
                {
                mABSOLUTE(); 

                }
                break;
            case 244 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1853: ACTION
                {
                mACTION(); 

                }
                break;
            case 245 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1860: ADA
                {
                mADA(); 

                }
                break;
            case 246 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1864: ADMIN
                {
                mADMIN(); 

                }
                break;
            case 247 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1870: AFTER
                {
                mAFTER(); 

                }
                break;
            case 248 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1876: ALWAYS
                {
                mALWAYS(); 

                }
                break;
            case 249 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1883: ASC
                {
                mASC(); 

                }
                break;
            case 250 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1887: ASSERTION
                {
                mASSERTION(); 

                }
                break;
            case 251 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1897: ASSIGNMENT
                {
                mASSIGNMENT(); 

                }
                break;
            case 252 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1908: ATTRIBUTE
                {
                mATTRIBUTE(); 

                }
                break;
            case 253 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1918: ATTRIBUTES
                {
                mATTRIBUTES(); 

                }
                break;
            case 254 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1929: AUTO
                {
                mAUTO(); 

                }
                break;
            case 255 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1934: AVG
                {
                mAVG(); 

                }
                break;
            case 256 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1938: BEFORE
                {
                mBEFORE(); 

                }
                break;
            case 257 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1945: BERNOULLI
                {
                mBERNOULLI(); 

                }
                break;
            case 258 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1955: BIN
                {
                mBIN(); 

                }
                break;
            case 259 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1959: BREADTH
                {
                mBREADTH(); 

                }
                break;
            case 260 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1967: CARDINALITY
                {
                mCARDINALITY(); 

                }
                break;
            case 261 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1979: CASCADE
                {
                mCASCADE(); 

                }
                break;
            case 262 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:1987: CATALOG_NAME
                {
                mCATALOG_NAME(); 

                }
                break;
            case 263 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2000: CATALOG
                {
                mCATALOG(); 

                }
                break;
            case 264 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2008: CEILING
                {
                mCEILING(); 

                }
                break;
            case 265 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2016: CEIL
                {
                mCEIL(); 

                }
                break;
            case 266 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2021: CHAIN
                {
                mCHAIN(); 

                }
                break;
            case 267 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2027: CHARACTERISTICS
                {
                mCHARACTERISTICS(); 

                }
                break;
            case 268 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2043: CHARACTERS
                {
                mCHARACTERS(); 

                }
                break;
            case 269 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2054: CHARACTER_LENGTH
                {
                mCHARACTER_LENGTH(); 

                }
                break;
            case 270 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2071: CHARACTER_SET_CATALOG
                {
                mCHARACTER_SET_CATALOG(); 

                }
                break;
            case 271 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2093: CHARACTER_SET_NAME
                {
                mCHARACTER_SET_NAME(); 

                }
                break;
            case 272 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2112: CHARACTER_SET_SCHEMA
                {
                mCHARACTER_SET_SCHEMA(); 

                }
                break;
            case 273 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2133: CHAR_LENGTH
                {
                mCHAR_LENGTH(); 

                }
                break;
            case 274 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2145: CHECKED
                {
                mCHECKED(); 

                }
                break;
            case 275 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2153: CLASS_ORIGIN
                {
                mCLASS_ORIGIN(); 

                }
                break;
            case 276 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2166: COALESCE
                {
                mCOALESCE(); 

                }
                break;
            case 277 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2175: COBOL
                {
                mCOBOL(); 

                }
                break;
            case 278 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2181: CODE_UNITS
                {
                mCODE_UNITS(); 

                }
                break;
            case 279 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2192: COLLATION_CATALOG
                {
                mCOLLATION_CATALOG(); 

                }
                break;
            case 280 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2210: COLLATION_NAME
                {
                mCOLLATION_NAME(); 

                }
                break;
            case 281 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2225: COLLATION_SCHEMA
                {
                mCOLLATION_SCHEMA(); 

                }
                break;
            case 282 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2242: COLLATION
                {
                mCOLLATION(); 

                }
                break;
            case 283 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2252: COLLECT
                {
                mCOLLECT(); 

                }
                break;
            case 284 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2260: COLUMN_NAME
                {
                mCOLUMN_NAME(); 

                }
                break;
            case 285 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2272: COMMAND_FUNCTION_CODE
                {
                mCOMMAND_FUNCTION_CODE(); 

                }
                break;
            case 286 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2294: COMMAND_FUNCTION
                {
                mCOMMAND_FUNCTION(); 

                }
                break;
            case 287 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2311: COMMITTED
                {
                mCOMMITTED(); 

                }
                break;
            case 288 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2321: CONDITION_NUMBER
                {
                mCONDITION_NUMBER(); 

                }
                break;
            case 289 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2338: CONDITION
                {
                mCONDITION(); 

                }
                break;
            case 290 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2348: CONNECTION_NAME
                {
                mCONNECTION_NAME(); 

                }
                break;
            case 291 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2364: CONSTRAINTS
                {
                mCONSTRAINTS(); 

                }
                break;
            case 292 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2376: CONSTRAINT_CATALOG
                {
                mCONSTRAINT_CATALOG(); 

                }
                break;
            case 293 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2395: CONSTRAINT_NAME
                {
                mCONSTRAINT_NAME(); 

                }
                break;
            case 294 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2411: CONSTRAINT_SCHEMA
                {
                mCONSTRAINT_SCHEMA(); 

                }
                break;
            case 295 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2429: CONSTRUCTORS
                {
                mCONSTRUCTORS(); 

                }
                break;
            case 296 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2442: CONST
                {
                mCONST(); 

                }
                break;
            case 297 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2448: CONTAINS
                {
                mCONTAINS(); 

                }
                break;
            case 298 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2457: CONVERT
                {
                mCONVERT(); 

                }
                break;
            case 299 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2465: CORR
                {
                mCORR(); 

                }
                break;
            case 300 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2470: COUNT
                {
                mCOUNT(); 

                }
                break;
            case 301 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2476: COVAR_POP
                {
                mCOVAR_POP(); 

                }
                break;
            case 302 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2486: COVAR_SAMP
                {
                mCOVAR_SAMP(); 

                }
                break;
            case 303 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2497: CUME_DIST
                {
                mCUME_DIST(); 

                }
                break;
            case 304 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2507: CURRENT_COLLATION
                {
                mCURRENT_COLLATION(); 

                }
                break;
            case 305 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2525: CURSOR_NAME
                {
                mCURSOR_NAME(); 

                }
                break;
            case 306 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2537: DATA
                {
                mDATA(); 

                }
                break;
            case 307 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2542: DATETIME_INTERVAL_CODE
                {
                mDATETIME_INTERVAL_CODE(); 

                }
                break;
            case 308 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2565: DATETIME_INTERVAL_PRECISION
                {
                mDATETIME_INTERVAL_PRECISION(); 

                }
                break;
            case 309 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2593: DAYS
                {
                mDAYS(); 

                }
                break;
            case 310 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2598: DCL
                {
                mDCL(); 

                }
                break;
            case 311 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2602: DEFAULTS
                {
                mDEFAULTS(); 

                }
                break;
            case 312 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2611: DEFERRABLE
                {
                mDEFERRABLE(); 

                }
                break;
            case 313 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2622: DEFERRED
                {
                mDEFERRED(); 

                }
                break;
            case 314 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2631: DEFINED
                {
                mDEFINED(); 

                }
                break;
            case 315 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2639: DEFINER
                {
                mDEFINER(); 

                }
                break;
            case 316 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2647: DEGREE
                {
                mDEGREE(); 

                }
                break;
            case 317 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2654: DENSE_RANK
                {
                mDENSE_RANK(); 

                }
                break;
            case 318 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2665: DEPTH
                {
                mDEPTH(); 

                }
                break;
            case 319 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2671: DERIVED
                {
                mDERIVED(); 

                }
                break;
            case 320 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2679: DESCRIPTOR
                {
                mDESCRIPTOR(); 

                }
                break;
            case 321 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2690: DESC
                {
                mDESC(); 

                }
                break;
            case 322 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2695: DIAGNOSTICS
                {
                mDIAGNOSTICS(); 

                }
                break;
            case 323 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2707: DISPATCH
                {
                mDISPATCH(); 

                }
                break;
            case 324 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2716: DISPLAY
                {
                mDISPLAY(); 

                }
                break;
            case 325 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2724: DOMAIN
                {
                mDOMAIN(); 

                }
                break;
            case 326 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2731: DOUBLE_PRECISION
                {
                mDOUBLE_PRECISION(); 

                }
                break;
            case 327 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2748: DYNAMIC_FUNCTION
                {
                mDYNAMIC_FUNCTION(); 

                }
                break;
            case 328 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2765: DYNAMIC_FUNCTION_CODE
                {
                mDYNAMIC_FUNCTION_CODE(); 

                }
                break;
            case 329 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2787: EQUALS
                {
                mEQUALS(); 

                }
                break;
            case 330 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2794: EVERY
                {
                mEVERY(); 

                }
                break;
            case 331 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2800: EXCEPTION
                {
                mEXCEPTION(); 

                }
                break;
            case 332 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2810: EXCLUDE
                {
                mEXCLUDE(); 

                }
                break;
            case 333 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2818: EXCLUDING
                {
                mEXCLUDING(); 

                }
                break;
            case 334 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2828: EXP
                {
                mEXP(); 

                }
                break;
            case 335 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2832: EXTERN
                {
                mEXTERN(); 

                }
                break;
            case 336 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2839: EXTRACT
                {
                mEXTRACT(); 

                }
                break;
            case 337 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2847: FINAL
                {
                mFINAL(); 

                }
                break;
            case 338 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2853: FIRST
                {
                mFIRST(); 

                }
                break;
            case 339 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2859: FIXED
                {
                mFIXED(); 

                }
                break;
            case 340 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2865: FLOAT
                {
                mFLOAT(); 

                }
                break;
            case 341 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2871: FLOOR
                {
                mFLOOR(); 

                }
                break;
            case 342 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2877: FOLLOWING
                {
                mFOLLOWING(); 

                }
                break;
            case 343 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2887: FORTRAN
                {
                mFORTRAN(); 

                }
                break;
            case 344 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2895: FOUND
                {
                mFOUND(); 

                }
                break;
            case 345 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2901: FUSION
                {
                mFUSION(); 

                }
                break;
            case 346 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2908: GENERAL
                {
                mGENERAL(); 

                }
                break;
            case 347 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2916: GOTO
                {
                mGOTO(); 

                }
                break;
            case 348 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2921: GO
                {
                mGO(); 

                }
                break;
            case 349 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2924: GRANTED
                {
                mGRANTED(); 

                }
                break;
            case 350 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2932: HIERARCHY
                {
                mHIERARCHY(); 

                }
                break;
            case 351 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2942: HOURS
                {
                mHOURS(); 

                }
                break;
            case 352 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2948: IMPLEMENTATION
                {
                mIMPLEMENTATION(); 

                }
                break;
            case 353 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2963: INCLUDING
                {
                mINCLUDING(); 

                }
                break;
            case 354 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2973: INCREMENT
                {
                mINCREMENT(); 

                }
                break;
            case 355 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2983: INDICATOR_TYPE
                {
                mINDICATOR_TYPE(); 

                }
                break;
            case 356 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:2998: INITIALLY
                {
                mINITIALLY(); 

                }
                break;
            case 357 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3008: INSTANCE
                {
                mINSTANCE(); 

                }
                break;
            case 358 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3017: INSTANTIABLE
                {
                mINSTANTIABLE(); 

                }
                break;
            case 359 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3030: INTERFACES
                {
                mINTERFACES(); 

                }
                break;
            case 360 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3041: INTERSECTION
                {
                mINTERSECTION(); 

                }
                break;
            case 361 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3054: INVOKER
                {
                mINVOKER(); 

                }
                break;
            case 362 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3062: KEY_MEMBER
                {
                mKEY_MEMBER(); 

                }
                break;
            case 363 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3073: KEY_TYPE
                {
                mKEY_TYPE(); 

                }
                break;
            case 364 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3082: KEY
                {
                mKEY(); 

                }
                break;
            case 365 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3086: KIND
                {
                mKIND(); 

                }
                break;
            case 366 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3091: LAST
                {
                mLAST(); 

                }
                break;
            case 367 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3096: LENGTH
                {
                mLENGTH(); 

                }
                break;
            case 368 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3103: LEN
                {
                mLEN(); 

                }
                break;
            case 369 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3107: LEVEL
                {
                mLEVEL(); 

                }
                break;
            case 370 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3113: LOGICAL
                {
                mLOGICAL(); 

                }
                break;
            case 371 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3121: LONG
                {
                mLONG(); 

                }
                break;
            case 372 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3126: LN
                {
                mLN(); 

                }
                break;
            case 373 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3129: LOCATOR
                {
                mLOCATOR(); 

                }
                break;
            case 374 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3137: LOWER
                {
                mLOWER(); 

                }
                break;
            case 375 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3143: MAP
                {
                mMAP(); 

                }
                break;
            case 376 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3147: MATCHED
                {
                mMATCHED(); 

                }
                break;
            case 377 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3155: MAXVALUE
                {
                mMAXVALUE(); 

                }
                break;
            case 378 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3164: MAX
                {
                mMAX(); 

                }
                break;
            case 379 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3168: MESSAGE_LENGTH
                {
                mMESSAGE_LENGTH(); 

                }
                break;
            case 380 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3183: MESSAGE_OCTET_LENGTH
                {
                mMESSAGE_OCTET_LENGTH(); 

                }
                break;
            case 381 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3204: MESSAGE_TEXT
                {
                mMESSAGE_TEXT(); 

                }
                break;
            case 382 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3217: MINVALUE
                {
                mMINVALUE(); 

                }
                break;
            case 383 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3226: MIN
                {
                mMIN(); 

                }
                break;
            case 384 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3230: MOD
                {
                mMOD(); 

                }
                break;
            case 385 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3234: MORE
                {
                mMORE(); 

                }
                break;
            case 386 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3239: MUMPS
                {
                mMUMPS(); 

                }
                break;
            case 387 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3245: NAMES
                {
                mNAMES(); 

                }
                break;
            case 388 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3251: NAME
                {
                mNAME(); 

                }
                break;
            case 389 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3256: NESTING
                {
                mNESTING(); 

                }
                break;
            case 390 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3264: NEXT
                {
                mNEXT(); 

                }
                break;
            case 391 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3269: NORMALIZED
                {
                mNORMALIZED(); 

                }
                break;
            case 392 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3280: NORMALIZE
                {
                mNORMALIZE(); 

                }
                break;
            case 393 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3290: NULLABLE
                {
                mNULLABLE(); 

                }
                break;
            case 394 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3299: NULLIF
                {
                mNULLIF(); 

                }
                break;
            case 395 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3306: NULLS
                {
                mNULLS(); 

                }
                break;
            case 396 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3312: NUMBER
                {
                mNUMBER(); 

                }
                break;
            case 397 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3319: OBJECT
                {
                mOBJECT(); 

                }
                break;
            case 398 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3326: OCTETS
                {
                mOCTETS(); 

                }
                break;
            case 399 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3333: OCTET_LENGTH
                {
                mOCTET_LENGTH(); 

                }
                break;
            case 400 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3346: OPTION
                {
                mOPTION(); 

                }
                break;
            case 401 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3353: OPTIONS
                {
                mOPTIONS(); 

                }
                break;
            case 402 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3361: ORDERING
                {
                mORDERING(); 

                }
                break;
            case 403 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3370: ORDINALITY
                {
                mORDINALITY(); 

                }
                break;
            case 404 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3381: OTHERS
                {
                mOTHERS(); 

                }
                break;
            case 405 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3388: OVERLAY
                {
                mOVERLAY(); 

                }
                break;
            case 406 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3396: OVERRIDING
                {
                mOVERRIDING(); 

                }
                break;
            case 407 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3407: PACKED
                {
                mPACKED(); 

                }
                break;
            case 408 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3414: PAD
                {
                mPAD(); 

                }
                break;
            case 409 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3418: PARAMETER_MODE
                {
                mPARAMETER_MODE(); 

                }
                break;
            case 410 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3433: PARAMETER_NAME
                {
                mPARAMETER_NAME(); 

                }
                break;
            case 411 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3448: PARAMETER_ORDINAL_POSITION
                {
                mPARAMETER_ORDINAL_POSITION(); 

                }
                break;
            case 412 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3475: PARAMETER_SPECIFIC_CATALOG
                {
                mPARAMETER_SPECIFIC_CATALOG(); 

                }
                break;
            case 413 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3502: PARAMETER_SPECIFIC_NAME
                {
                mPARAMETER_SPECIFIC_NAME(); 

                }
                break;
            case 414 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3526: PARAMETER_SPECIFIC_SCHEMA
                {
                mPARAMETER_SPECIFIC_SCHEMA(); 

                }
                break;
            case 415 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3552: PARTIAL
                {
                mPARTIAL(); 

                }
                break;
            case 416 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3560: PASCAL
                {
                mPASCAL(); 

                }
                break;
            case 417 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3567: PATH
                {
                mPATH(); 

                }
                break;
            case 418 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3572: PERCENTILE_CONT
                {
                mPERCENTILE_CONT(); 

                }
                break;
            case 419 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3588: PERCENTILE_DISC
                {
                mPERCENTILE_DISC(); 

                }
                break;
            case 420 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3604: PERCENT_RANK
                {
                mPERCENT_RANK(); 

                }
                break;
            case 421 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3617: PICTURE
                {
                mPICTURE(); 

                }
                break;
            case 422 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3625: PIC
                {
                mPIC(); 

                }
                break;
            case 423 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3629: PLACING
                {
                mPLACING(); 

                }
                break;
            case 424 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3637: PLI
                {
                mPLI(); 

                }
                break;
            case 425 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3641: POSITION
                {
                mPOSITION(); 

                }
                break;
            case 426 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3650: POWER
                {
                mPOWER(); 

                }
                break;
            case 427 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3656: PRECEDING
                {
                mPRECEDING(); 

                }
                break;
            case 428 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3666: PRESERVE
                {
                mPRESERVE(); 

                }
                break;
            case 429 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3675: PRIOR
                {
                mPRIOR(); 

                }
                break;
            case 430 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3681: PRIVILEGES
                {
                mPRIVILEGES(); 

                }
                break;
            case 431 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3692: PUBLIC
                {
                mPUBLIC(); 

                }
                break;
            case 432 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3699: RANK
                {
                mRANK(); 

                }
                break;
            case 433 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3704: READ
                {
                mREAD(); 

                }
                break;
            case 434 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3709: REGR_AVGX
                {
                mREGR_AVGX(); 

                }
                break;
            case 435 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3719: REGR_AVGY
                {
                mREGR_AVGY(); 

                }
                break;
            case 436 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3729: REGR_COUNT
                {
                mREGR_COUNT(); 

                }
                break;
            case 437 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3740: REGR_INTERCEPT
                {
                mREGR_INTERCEPT(); 

                }
                break;
            case 438 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3755: REGR_R2
                {
                mREGR_R2(); 

                }
                break;
            case 439 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3763: REGR_SLOPE
                {
                mREGR_SLOPE(); 

                }
                break;
            case 440 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3774: REGR_SXX
                {
                mREGR_SXX(); 

                }
                break;
            case 441 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3783: REGR_SXY
                {
                mREGR_SXY(); 

                }
                break;
            case 442 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3792: REGR_SYY
                {
                mREGR_SYY(); 

                }
                break;
            case 443 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3801: RELATIVE
                {
                mRELATIVE(); 

                }
                break;
            case 444 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3810: REPEATABLE
                {
                mREPEATABLE(); 

                }
                break;
            case 445 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3821: RESTART
                {
                mRESTART(); 

                }
                break;
            case 446 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3829: RESTRICT
                {
                mRESTRICT(); 

                }
                break;
            case 447 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3838: RESULT
                {
                mRESULT(); 

                }
                break;
            case 448 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3845: RETURNED_CARDINALITY
                {
                mRETURNED_CARDINALITY(); 

                }
                break;
            case 449 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3866: RETURNED_LENGTH
                {
                mRETURNED_LENGTH(); 

                }
                break;
            case 450 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3882: RETURNED_OCTET_LENGTH
                {
                mRETURNED_OCTET_LENGTH(); 

                }
                break;
            case 451 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3904: RETURNED_SQLSTATE
                {
                mRETURNED_SQLSTATE(); 

                }
                break;
            case 452 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3922: ROLE
                {
                mROLE(); 

                }
                break;
            case 453 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3927: ROUTINE_CATALOG
                {
                mROUTINE_CATALOG(); 

                }
                break;
            case 454 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3943: ROUTINE_NAME
                {
                mROUTINE_NAME(); 

                }
                break;
            case 455 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3956: ROUTINE_SCHEMA
                {
                mROUTINE_SCHEMA(); 

                }
                break;
            case 456 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3971: ROUTINE
                {
                mROUTINE(); 

                }
                break;
            case 457 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3979: ROW_COUNT
                {
                mROW_COUNT(); 

                }
                break;
            case 458 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:3989: ROW_NUMBER
                {
                mROW_NUMBER(); 

                }
                break;
            case 459 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4000: SCALE
                {
                mSCALE(); 

                }
                break;
            case 460 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4006: SCHEMA_NAME
                {
                mSCHEMA_NAME(); 

                }
                break;
            case 461 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4018: SCHEMA
                {
                mSCHEMA(); 

                }
                break;
            case 462 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4025: SCOPE_CATALOG
                {
                mSCOPE_CATALOG(); 

                }
                break;
            case 463 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4039: SCOPE_NAME
                {
                mSCOPE_NAME(); 

                }
                break;
            case 464 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4050: SCOPE_SCHEMA
                {
                mSCOPE_SCHEMA(); 

                }
                break;
            case 465 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4063: SECTION
                {
                mSECTION(); 

                }
                break;
            case 466 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4071: SECURITY
                {
                mSECURITY(); 

                }
                break;
            case 467 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4080: SELF
                {
                mSELF(); 

                }
                break;
            case 468 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4085: SEPARATE
                {
                mSEPARATE(); 

                }
                break;
            case 469 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4094: SEQUENCE
                {
                mSEQUENCE(); 

                }
                break;
            case 470 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4103: SERIALIZABLE
                {
                mSERIALIZABLE(); 

                }
                break;
            case 471 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4116: SERVER_NAME
                {
                mSERVER_NAME(); 

                }
                break;
            case 472 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4128: SESSION
                {
                mSESSION(); 

                }
                break;
            case 473 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4136: SETS
                {
                mSETS(); 

                }
                break;
            case 474 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4141: SHORT
                {
                mSHORT(); 

                }
                break;
            case 475 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4147: SIGNED
                {
                mSIGNED(); 

                }
                break;
            case 476 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4154: SIGN
                {
                mSIGN(); 

                }
                break;
            case 477 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4159: SIMPLE
                {
                mSIMPLE(); 

                }
                break;
            case 478 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4166: SIZE
                {
                mSIZE(); 

                }
                break;
            case 479 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4171: SOURCE
                {
                mSOURCE(); 

                }
                break;
            case 480 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4178: SPACE
                {
                mSPACE(); 

                }
                break;
            case 481 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4184: SPECIFIC_NAME
                {
                mSPECIFIC_NAME(); 

                }
                break;
            case 482 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4198: SQLSTATE_TYPE
                {
                mSQLSTATE_TYPE(); 

                }
                break;
            case 483 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4212: SQRT
                {
                mSQRT(); 

                }
                break;
            case 484 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4217: STATEMENT
                {
                mSTATEMENT(); 

                }
                break;
            case 485 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4227: STATE
                {
                mSTATE(); 

                }
                break;
            case 486 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4233: STDDEV_POP
                {
                mSTDDEV_POP(); 

                }
                break;
            case 487 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4244: STDDEV_SAMP
                {
                mSTDDEV_SAMP(); 

                }
                break;
            case 488 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4256: STRUCTURE
                {
                mSTRUCTURE(); 

                }
                break;
            case 489 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4266: STYLE
                {
                mSTYLE(); 

                }
                break;
            case 490 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4272: SUBCLASS_ORIGIN
                {
                mSUBCLASS_ORIGIN(); 

                }
                break;
            case 491 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4288: SUBSTRING
                {
                mSUBSTRING(); 

                }
                break;
            case 492 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4298: SUM
                {
                mSUM(); 

                }
                break;
            case 493 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4302: TABLESAMPLE
                {
                mTABLESAMPLE(); 

                }
                break;
            case 494 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4314: TABLE_NAME
                {
                mTABLE_NAME(); 

                }
                break;
            case 495 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4325: TEMPORARY
                {
                mTEMPORARY(); 

                }
                break;
            case 496 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4335: TIES
                {
                mTIES(); 

                }
                break;
            case 497 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4340: TOP_LEVEL_COUNT
                {
                mTOP_LEVEL_COUNT(); 

                }
                break;
            case 498 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4356: TRANSACTIONS_COMMITTED
                {
                mTRANSACTIONS_COMMITTED(); 

                }
                break;
            case 499 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4379: TRANSACTIONS_ROLLED_BACK
                {
                mTRANSACTIONS_ROLLED_BACK(); 

                }
                break;
            case 500 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4404: TRANSACTION_ACTIVE
                {
                mTRANSACTION_ACTIVE(); 

                }
                break;
            case 501 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4423: TRANSACTION
                {
                mTRANSACTION(); 

                }
                break;
            case 502 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4435: TRANSFORMS
                {
                mTRANSFORMS(); 

                }
                break;
            case 503 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4446: TRANSFORM
                {
                mTRANSFORM(); 

                }
                break;
            case 504 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4456: TRANSLATE
                {
                mTRANSLATE(); 

                }
                break;
            case 505 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4466: TRIGGER_CATALOG
                {
                mTRIGGER_CATALOG(); 

                }
                break;
            case 506 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4482: TRIGGER_NAME
                {
                mTRIGGER_NAME(); 

                }
                break;
            case 507 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4495: TRIGGER_SCHEMA
                {
                mTRIGGER_SCHEMA(); 

                }
                break;
            case 508 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4510: TRIM
                {
                mTRIM(); 

                }
                break;
            case 509 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4515: TYPE
                {
                mTYPE(); 

                }
                break;
            case 510 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4520: UNBOUNDED
                {
                mUNBOUNDED(); 

                }
                break;
            case 511 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4530: UNCOMMITTED
                {
                mUNCOMMITTED(); 

                }
                break;
            case 512 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4542: UNDER
                {
                mUNDER(); 

                }
                break;
            case 513 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4548: UNNAMED
                {
                mUNNAMED(); 

                }
                break;
            case 514 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4556: UNSIGNED
                {
                mUNSIGNED(); 

                }
                break;
            case 515 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4565: UPPER
                {
                mUPPER(); 

                }
                break;
            case 516 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4571: USAGE
                {
                mUSAGE(); 

                }
                break;
            case 517 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4577: USER_DEFINED_TYPE_CATALOG
                {
                mUSER_DEFINED_TYPE_CATALOG(); 

                }
                break;
            case 518 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4603: USER_DEFINED_TYPE_CODE
                {
                mUSER_DEFINED_TYPE_CODE(); 

                }
                break;
            case 519 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4626: USER_DEFINED_TYPE_NAME
                {
                mUSER_DEFINED_TYPE_NAME(); 

                }
                break;
            case 520 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4649: USER_DEFINED_TYPE_SCHEMA
                {
                mUSER_DEFINED_TYPE_SCHEMA(); 

                }
                break;
            case 521 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4674: VAR_POP
                {
                mVAR_POP(); 

                }
                break;
            case 522 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4682: VAR_SAMP
                {
                mVAR_SAMP(); 

                }
                break;
            case 523 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4691: VIEW
                {
                mVIEW(); 

                }
                break;
            case 524 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4696: VOLATILE
                {
                mVOLATILE(); 

                }
                break;
            case 525 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4705: WIDTH_BUCKET
                {
                mWIDTH_BUCKET(); 

                }
                break;
            case 526 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4718: WORK
                {
                mWORK(); 

                }
                break;
            case 527 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4723: WRITE
                {
                mWRITE(); 

                }
                break;
            case 528 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4729: ZONE
                {
                mZONE(); 

                }
                break;
            case 529 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4734: Not_Equals_Operator
                {
                mNot_Equals_Operator(); 

                }
                break;
            case 530 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4754: Greater_Or_Equals_Operator
                {
                mGreater_Or_Equals_Operator(); 

                }
                break;
            case 531 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4781: Less_Or_Equals_Operator
                {
                mLess_Or_Equals_Operator(); 

                }
                break;
            case 532 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4805: Concatenation_Operator
                {
                mConcatenation_Operator(); 

                }
                break;
            case 533 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4828: Right_Arrow
                {
                mRight_Arrow(); 

                }
                break;
            case 534 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4840: Double_Colon
                {
                mDouble_Colon(); 

                }
                break;
            case 535 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4853: Double_Period
                {
                mDouble_Period(); 

                }
                break;
            case 536 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4867: Back_Quote
                {
                mBack_Quote(); 

                }
                break;
            case 537 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4878: Tilde
                {
                mTilde(); 

                }
                break;
            case 538 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4884: Exclamation
                {
                mExclamation(); 

                }
                break;
            case 539 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4896: AT_Sign
                {
                mAT_Sign(); 

                }
                break;
            case 540 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4904: Percent
                {
                mPercent(); 

                }
                break;
            case 541 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4912: Circumflex
                {
                mCircumflex(); 

                }
                break;
            case 542 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4923: Ampersand
                {
                mAmpersand(); 

                }
                break;
            case 543 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4933: Asterisk
                {
                mAsterisk(); 

                }
                break;
            case 544 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4942: Left_Paren
                {
                mLeft_Paren(); 

                }
                break;
            case 545 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4953: Right_Paren
                {
                mRight_Paren(); 

                }
                break;
            case 546 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4965: Plus_Sign
                {
                mPlus_Sign(); 

                }
                break;
            case 547 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4975: Minus_Sign
                {
                mMinus_Sign(); 

                }
                break;
            case 548 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:4986: Equals_Operator
                {
                mEquals_Operator(); 

                }
                break;
            case 549 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5002: Left_Brace
                {
                mLeft_Brace(); 

                }
                break;
            case 550 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5013: Right_Brace
                {
                mRight_Brace(); 

                }
                break;
            case 551 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5025: Left_Bracket
                {
                mLeft_Bracket(); 

                }
                break;
            case 552 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5038: Left_Bracket_Trigraph
                {
                mLeft_Bracket_Trigraph(); 

                }
                break;
            case 553 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5060: Right_Bracket
                {
                mRight_Bracket(); 

                }
                break;
            case 554 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5074: Right_Bracket_Trigraph
                {
                mRight_Bracket_Trigraph(); 

                }
                break;
            case 555 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5097: Vertical_Bar
                {
                mVertical_Bar(); 

                }
                break;
            case 556 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5110: Colon
                {
                mColon(); 

                }
                break;
            case 557 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5116: Semicolon
                {
                mSemicolon(); 

                }
                break;
            case 558 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5126: Double_Quote
                {
                mDouble_Quote(); 

                }
                break;
            case 559 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5139: Quote
                {
                mQuote(); 

                }
                break;
            case 560 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5145: Less_Than_Operator
                {
                mLess_Than_Operator(); 

                }
                break;
            case 561 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5164: Greater_Than_Operator
                {
                mGreater_Than_Operator(); 

                }
                break;
            case 562 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5186: Comma
                {
                mComma(); 

                }
                break;
            case 563 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5192: Period
                {
                mPeriod(); 

                }
                break;
            case 564 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5199: Question_Mark
                {
                mQuestion_Mark(); 

                }
                break;
            case 565 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5213: Slash
                {
                mSlash(); 

                }
                break;
            case 566 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5219: Unicode_Forbidden_Identifier_Characters
                {
                mUnicode_Forbidden_Identifier_Characters(); 

                }
                break;
            case 567 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5259: Escape_Character
                {
                mEscape_Character(); 

                }
                break;
            case 568 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5276: Number
                {
                mNumber(); 

                }
                break;
            case 569 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5283: String_Literal
                {
                mString_Literal(); 

                }
                break;
            case 570 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5298: Regular_Identifier
                {
                mRegular_Identifier(); 

                }
                break;
            case 571 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5317: Unicode_Identifier
                {
                mUnicode_Identifier(); 

                }
                break;
            case 572 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5336: Space
                {
                mSpace(); 

                }
                break;
            case 573 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5342: White_Space
                {
                mWhite_Space(); 

                }
                break;
            case 574 :
                // /Volumes/Raid Set 2/WhamTech MSDN Downloads/SQL 2003 standards documents/sql-bnf/sql2003Lexer.g:1:5354: BAD
                {
                mBAD(); 

                }
                break;

        }

    }


    protected DFA59 dfa59 = new DFA59(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA88 dfa88 = new DFA88(this);
    static final String DFA59_eotS =
        "\1\uffff\1\2\1\uffff\1\2\1\uffff";
    static final String DFA59_eofS =
        "\5\uffff";
    static final String DFA59_minS =
        "\1\101\1\56\1\uffff\1\56\1\uffff";
    static final String DFA59_maxS =
        "\2\172\1\uffff\1\172\1\uffff";
    static final String DFA59_acceptS =
        "\2\uffff\1\2\1\uffff\1\1";
    static final String DFA59_specialS =
        "\5\uffff}>";
    static final String[] DFA59_transitionS = {
            "\32\1\6\uffff\32\1",
            "\1\4\1\uffff\12\3\7\uffff\32\3\4\uffff\1\3\1\uffff\32\3",
            "",
            "\1\4\1\uffff\12\3\7\uffff\32\3\4\uffff\1\3\1\uffff\32\3",
            ""
    };

    static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_eotS);
    static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_eofS);
    static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_minS);
    static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_maxS);
    static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_acceptS);
    static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_specialS);
    static final short[][] DFA59_transition;

    static {
        int numStates = DFA59_transitionS.length;
        DFA59_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA59_transition[i] = DFA.unpackEncodedString(DFA59_transitionS[i]);
        }
    }

    class DFA59 extends DFA {

        public DFA59(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = DFA59_eot;
            this.eof = DFA59_eof;
            this.min = DFA59_min;
            this.max = DFA59_max;
            this.accept = DFA59_accept;
            this.special = DFA59_special;
            this.transition = DFA59_transition;
        }
        public String getDescription() {
            return "1362:23: ( ( ( Regular_Identifier ) Period )? ( Regular_Identifier ) Period )?";
        }
    }
    static final String DFA58_eotS =
        "\4\uffff\1\5\1\uffff\1\5\1\uffff";
    static final String DFA58_eofS =
        "\10\uffff";
    static final String DFA58_minS =
        "\1\101\2\56\1\101\1\56\1\uffff\1\56\1\uffff";
    static final String DFA58_maxS =
        "\5\172\1\uffff\1\172\1\uffff";
    static final String DFA58_acceptS =
        "\5\uffff\1\2\1\uffff\1\1";
    static final String DFA58_specialS =
        "\10\uffff}>";
    static final String[] DFA58_transitionS = {
            "\32\1\6\uffff\32\1",
            "\1\3\1\uffff\12\2\7\uffff\32\2\4\uffff\1\2\1\uffff\32\2",
            "\1\3\1\uffff\12\2\7\uffff\32\2\4\uffff\1\2\1\uffff\32\2",
            "\32\4\6\uffff\32\4",
            "\1\7\1\uffff\12\6\7\uffff\32\6\4\uffff\1\6\1\uffff\32\6",
            "",
            "\1\7\1\uffff\12\6\7\uffff\32\6\4\uffff\1\6\1\uffff\32\6",
            ""
    };

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "1362:25: ( ( Regular_Identifier ) Period )?";
        }
    }
    static final String DFA88_eotS =
        "\1\uffff\1\105\1\110\30\111\1\u00cd\1\u00cf\1\u00d1\1\u00d3\1\u00d5"+
        "\12\uffff\1\u00e0\4\uffff\1\u00e6\3\uffff\1\u00ea\1\uffff\1\u00ec"+
        "\3\uffff\1\102\4\111\14\uffff\1\u00f1\6\111\1\u0100\10\111\1\u0112"+
        "\1\uffff\37\111\1\u015d\4\111\1\u0165\1\u016f\7\111\1\u0182\5\111"+
        "\1\u0190\6\111\1\u019f\1\111\1\u01a2\4\111\1\u01a9\35\111\1\u01f3"+
        "\1\111\1\uffff\15\111\42\uffff\1\u00ec\4\uffff\2\111\1\u0214\1\111"+
        "\1\u0216\1\111\1\u0218\1\111\1\u021b\1\u021c\1\111\1\u021e\1\u021f"+
        "\1\111\1\uffff\1\u0221\4\111\1\u0228\6\111\1\u0230\4\111\1\uffff"+
        "\32\111\1\u025c\16\111\1\u0271\1\u0273\1\u0274\2\111\1\u0279\10"+
        "\111\1\u0284\16\111\1\u0296\3\111\1\uffff\7\111\1\uffff\3\111\1"+
        "\u02a4\5\111\1\uffff\5\111\1\u02b3\14\111\1\uffff\1\111\1\u02c2"+
        "\5\111\1\u02ca\1\111\1\u02cc\1\u02ce\2\111\1\uffff\1\111\1\u02d4"+
        "\11\111\1\u02e1\2\111\1\uffff\2\111\1\uffff\2\111\1\u02e9\2\111"+
        "\1\u02ee\1\uffff\2\111\1\u02f2\7\111\2\u02fe\1\u02ff\10\111\1\u030c"+
        "\5\111\1\u0314\12\111\1\u0324\16\111\1\u0338\2\111\1\u0340\20\111"+
        "\1\uffff\4\111\1\uffff\24\111\1\u0371\2\111\2\uffff\2\111\1\uffff"+
        "\1\111\1\uffff\1\111\1\uffff\2\111\2\uffff\1\111\2\uffff\1\111\1"+
        "\uffff\4\111\1\u0381\1\111\1\uffff\7\111\1\uffff\2\111\1\u038c\1"+
        "\111\1\u038e\1\u038f\15\111\1\u03a1\2\111\1\u03a5\3\111\1\u03a9"+
        "\1\111\1\u03ab\1\u03ac\1\111\1\u03af\2\111\1\u03b4\10\111\1\uffff"+
        "\5\111\1\u03c2\7\111\1\u03cb\4\111\1\u03d1\1\u03d2\1\uffff\1\u03d4"+
        "\3\uffff\2\111\1\u03d7\1\uffff\1\111\1\u03da\3\111\1\u03de\1\111"+
        "\1\u03e0\2\111\1\uffff\11\111\1\u03ec\1\u03ed\1\u03ee\5\111\1\uffff"+
        "\3\111\1\u03f7\3\111\1\u03fb\1\u03fc\4\111\1\uffff\1\111\1\u0404"+
        "\13\111\1\u0411\1\uffff\2\111\1\u0414\3\111\1\u0419\1\111\1\u041b"+
        "\3\111\1\u041f\1\u0420\1\uffff\7\111\1\uffff\1\111\1\uffff\1\111"+
        "\1\uffff\5\111\1\uffff\1\111\1\u0430\2\111\1\u0433\2\111\1\u0439"+
        "\2\111\1\u043d\1\111\1\uffff\2\111\1\u0441\1\u0442\3\111\1\uffff"+
        "\3\111\1\u044b\1\uffff\3\111\1\uffff\1\u044f\12\111\2\uffff\7\111"+
        "\1\u0462\1\u0464\3\111\1\uffff\5\111\1\u046e\1\111\1\uffff\1\111"+
        "\1\u0473\1\u0474\12\111\1\u0480\1\111\1\uffff\1\u0482\13\111\1\u048e"+
        "\1\u048f\5\111\1\uffff\3\111\1\u0499\3\111\1\uffff\2\111\1\u049f"+
        "\5\111\1\u04a5\2\111\1\u04a8\1\111\1\u04aa\1\u04ab\1\u04ae\1\111"+
        "\1\u04b0\2\111\1\u04b3\6\111\1\u04bb\12\111\1\u04c7\3\111\1\u04cb"+
        "\2\111\1\u04d0\1\u04d2\1\u04d3\1\uffff\1\111\1\u04d6\1\u04d7\2\111"+
        "\1\u04da\1\u04db\3\111\1\u04df\4\111\1\uffff\2\111\1\u04e6\1\u04e7"+
        "\6\111\1\uffff\1\111\2\uffff\5\111\1\u04f4\10\111\1\u04fe\1\u04ff"+
        "\1\111\1\uffff\3\111\1\uffff\3\111\1\uffff\1\111\2\uffff\1\111\1"+
        "\u0509\1\uffff\2\111\1\u050c\1\111\1\uffff\1\u050f\1\u0510\1\111"+
        "\1\u0512\6\111\1\u0519\2\111\1\uffff\1\111\1\u051d\6\111\1\uffff"+
        "\5\111\2\uffff\1\111\1\uffff\2\111\1\uffff\2\111\1\uffff\3\111\1"+
        "\uffff\1\u0531\1\uffff\4\111\1\u0536\1\111\1\u0538\1\u0539\1\u053a"+
        "\1\111\1\u053c\3\uffff\2\111\1\u053f\1\u0540\1\u0541\1\111\1\u0543"+
        "\1\u0545\1\uffff\3\111\2\uffff\1\u054a\2\111\1\u054d\3\111\1\uffff"+
        "\6\111\1\u0559\1\u055a\4\111\1\uffff\2\111\1\uffff\1\u0561\1\u0562"+
        "\1\111\1\u0565\1\uffff\1\111\1\uffff\2\111\1\u0569\2\uffff\2\111"+
        "\1\u056c\1\111\1\u056e\2\111\1\u0571\3\111\1\u0576\3\111\1\uffff"+
        "\2\111\1\uffff\1\111\1\u057d\3\111\1\uffff\1\u0581\1\u0582\1\u0584"+
        "\1\uffff\3\111\2\uffff\2\111\1\u058b\2\111\1\u058f\2\111\1\uffff"+
        "\3\111\1\uffff\7\111\1\u059d\5\111\1\u05a3\4\111\1\uffff\1\u05ac"+
        "\1\uffff\11\111\1\uffff\4\111\2\uffff\1\u05ba\1\u05bb\3\111\1\u05bf"+
        "\1\u05c1\2\111\1\u05c4\1\111\1\uffff\1\111\1\uffff\13\111\2\uffff"+
        "\3\111\1\u05d5\1\u05d6\4\111\1\uffff\5\111\1\uffff\1\u05e1\1\111"+
        "\1\u05e3\2\111\1\uffff\1\u05e8\1\111\1\uffff\1\111\2\uffff\2\111"+
        "\1\uffff\1\u05ed\1\uffff\1\111\1\u05f1\1\uffff\1\111\1\u05f3\4\111"+
        "\1\u05f8\1\uffff\1\u05f9\4\111\1\u05fe\4\111\1\u0603\1\uffff\1\111"+
        "\1\u0606\1\111\1\uffff\3\111\1\u060b\1\uffff\1\111\2\uffff\2\111"+
        "\2\uffff\1\u060f\1\111\2\uffff\1\111\1\u0612\1\u0613\1\uffff\6\111"+
        "\2\uffff\1\111\1\u061b\2\111\1\u061e\1\u061f\4\111\1\u0625\1\111"+
        "\1\uffff\6\111\1\u062f\2\111\2\uffff\3\111\1\u0637\4\111\1\u063d"+
        "\1\uffff\2\111\1\uffff\2\111\2\uffff\1\u0642\1\uffff\6\111\1\uffff"+
        "\1\111\1\u064c\1\111\1\uffff\2\111\1\u0651\1\u0652\1\u0654\10\111"+
        "\1\u065e\1\111\1\u0661\1\u0662\2\111\1\uffff\1\u0666\1\u0667\2\111"+
        "\1\uffff\1\111\3\uffff\1\u066b\1\uffff\1\u066c\1\111\3\uffff\1\111"+
        "\1\uffff\1\111\1\uffff\1\111\1\u0672\1\111\1\u0674\1\uffff\2\111"+
        "\1\uffff\11\111\1\u0681\1\111\2\uffff\4\111\1\u0687\1\111\2\uffff"+
        "\2\111\1\uffff\3\111\1\uffff\1\u068e\1\111\1\uffff\1\111\1\uffff"+
        "\1\u0691\1\u0692\1\uffff\2\111\1\u0695\1\111\1\uffff\4\111\1\u069b"+
        "\1\111\1\uffff\1\u069d\2\111\2\uffff\1\111\1\uffff\1\111\1\u06a2"+
        "\1\111\1\u06a4\2\111\1\uffff\2\111\1\u06aa\1\uffff\1\u06ab\1\u06ac"+
        "\1\u06ae\3\111\1\u06b2\6\111\1\uffff\4\111\1\u06bd\1\uffff\10\111"+
        "\1\uffff\2\111\1\u06ca\1\u06cb\1\111\1\u06cd\4\111\1\u06d4\2\111"+
        "\2\uffff\1\u06d7\1\111\1\u06da\1\uffff\1\111\1\uffff\2\111\1\uffff"+
        "\1\u06de\1\u06df\2\111\1\u06e2\7\111\1\u06ea\1\u06eb\1\111\1\u06ed"+
        "\2\uffff\1\111\1\u06f2\7\111\1\u06fa\1\uffff\1\111\1\uffff\4\111"+
        "\1\uffff\4\111\1\uffff\3\111\1\uffff\1\111\1\uffff\2\111\1\u070a"+
        "\1\u070b\2\uffff\3\111\1\u070f\1\uffff\4\111\1\uffff\1\u0714\1\111"+
        "\1\uffff\1\u0716\1\111\1\u0718\1\111\1\uffff\3\111\1\uffff\2\111"+
        "\2\uffff\6\111\1\u0725\1\uffff\1\111\1\u0727\2\uffff\1\u0728\1\111"+
        "\1\u072a\1\111\1\u072c\1\uffff\1\111\1\u072e\5\111\1\u0735\1\111"+
        "\1\uffff\5\111\1\u073c\1\u073d\1\uffff\2\111\1\u0741\1\111\1\u0744"+
        "\1\uffff\2\111\1\u0748\1\111\1\uffff\1\u074a\2\111\1\u074e\1\u074f"+
        "\1\111\1\u0751\1\u0752\1\u0753\1\uffff\4\111\2\uffff\1\111\1\uffff"+
        "\1\u0759\2\111\1\u075d\4\111\1\u0762\1\uffff\1\111\1\u0764\2\uffff"+
        "\1\111\1\u0766\1\u0767\2\uffff\1\u0768\1\u0769\1\111\2\uffff\2\111"+
        "\1\u076d\1\u076e\1\111\1\uffff\1\u0770\1\uffff\2\111\1\u0773\3\111"+
        "\1\u0777\5\111\1\uffff\5\111\1\uffff\1\u0782\1\111\1\u0784\1\u0785"+
        "\1\u0786\1\111\1\uffff\2\111\2\uffff\1\u078a\1\111\1\uffff\4\111"+
        "\1\u0790\1\uffff\1\111\1\uffff\1\111\1\u0793\1\111\1\u0795\1\uffff"+
        "\1\111\1\uffff\1\u0797\4\111\3\uffff\1\u079c\1\uffff\2\111\1\u079f"+
        "\1\uffff\3\111\1\u07a4\1\111\1\u07a6\2\111\1\u07a9\1\u07aa\1\uffff"+
        "\6\111\1\u07b2\1\111\1\u07b4\2\111\1\u07b7\2\uffff\1\111\1\uffff"+
        "\1\u07b9\3\111\1\u07bd\1\111\1\uffff\2\111\1\uffff\2\111\1\uffff"+
        "\3\111\2\uffff\2\111\1\uffff\1\111\1\u07cb\1\111\1\u07cd\2\111\1"+
        "\u07d1\2\uffff\1\111\1\uffff\4\111\1\uffff\7\111\1\uffff\5\111\1"+
        "\u07e3\7\111\1\u07ec\1\u07ed\2\uffff\3\111\1\uffff\1\u07f1\1\u07f2"+
        "\1\111\1\u07f4\1\uffff\1\111\1\uffff\1\u07f6\1\uffff\5\111\1\u07fc"+
        "\5\111\1\u0802\1\uffff\1\111\2\uffff\1\111\1\uffff\1\111\1\uffff"+
        "\1\111\1\uffff\4\111\1\u080b\1\u080c\1\uffff\2\111\1\u080f\3\111"+
        "\2\uffff\3\111\1\uffff\2\111\1\uffff\1\u081d\2\111\1\uffff\1\111"+
        "\1\uffff\1\u0821\1\111\1\u0823\2\uffff\1\111\3\uffff\1\111\1\u0826"+
        "\3\111\1\uffff\2\111\1\u082c\1\uffff\1\u082d\3\111\1\uffff\1\111"+
        "\1\uffff\1\u0832\4\uffff\1\111\1\u0834\1\111\2\uffff\1\u0836\1\uffff"+
        "\2\111\1\uffff\1\u0839\2\111\1\uffff\4\111\1\u0840\4\111\1\u0845"+
        "\1\uffff\1\111\3\uffff\1\u0847\1\u0848\1\111\1\uffff\1\u084c\1\u084d"+
        "\1\u084e\1\111\1\u0850\1\uffff\1\u0851\1\u0852\1\uffff\1\111\1\uffff"+
        "\1\111\1\uffff\1\u0855\1\111\1\u0857\1\111\1\uffff\2\111\1\uffff"+
        "\4\111\1\uffff\1\u085f\1\uffff\2\111\2\uffff\1\u0862\1\111\1\u0864"+
        "\1\u0865\1\u0866\2\111\1\uffff\1\111\1\uffff\1\u086b\1\u086c\1\uffff"+
        "\1\111\1\uffff\3\111\1\uffff\1\111\1\u0875\12\111\1\u0880\1\uffff"+
        "\1\u0881\1\uffff\2\111\1\u0884\1\uffff\5\111\1\u088a\5\111\1\u0891"+
        "\1\u0892\3\111\1\u0899\1\uffff\10\111\2\uffff\1\u08a4\2\111\2\uffff"+
        "\1\u08a7\1\uffff\1\u08a8\1\uffff\1\111\1\u08aa\1\u08ab\1\111\1\u08ad"+
        "\1\uffff\1\111\1\u08b0\3\111\1\uffff\1\u08b4\1\111\1\u08b6\4\111"+
        "\1\u08bc\2\uffff\1\111\1\u08bf\1\uffff\1\111\1\u08c1\10\111\1\u08cc"+
        "\2\111\1\uffff\1\u08cf\2\111\1\uffff\1\111\1\uffff\2\111\1\uffff"+
        "\5\111\2\uffff\2\111\1\u08df\1\u08e0\1\uffff\1\u08e1\1\uffff\1\u08e2"+
        "\1\uffff\1\u08e3\1\u08e4\1\uffff\1\111\1\u08e6\1\u08e8\1\u08ea\1"+
        "\u08eb\1\111\1\uffff\1\111\1\u08ee\1\u08ef\1\111\1\uffff\1\u08f1"+
        "\2\uffff\3\111\3\uffff\1\u08f6\3\uffff\2\111\1\uffff\1\111\1\uffff"+
        "\1\111\1\u08fc\1\u08fe\2\111\1\u0901\1\u0902\1\uffff\1\111\1\u0904"+
        "\1\uffff\1\111\3\uffff\1\u0906\1\u0907\2\111\2\uffff\4\111\1\u0911"+
        "\3\111\1\uffff\1\u0915\2\111\1\u0918\1\u0919\1\u091a\4\111\2\uffff"+
        "\1\111\1\u0920\1\uffff\1\u0921\4\111\1\uffff\4\111\1\u092a\1\111"+
        "\2\uffff\2\111\1\u092e\2\111\1\u0931\1\uffff\3\111\1\u0936\1\u0937"+
        "\5\111\1\uffff\1\111\1\u093f\2\uffff\1\111\2\uffff\1\111\1\uffff"+
        "\1\u0942\1\u0943\1\uffff\1\u0944\1\u0945\1\111\1\uffff\1\111\1\uffff"+
        "\2\111\1\u094c\1\u094e\1\111\1\uffff\2\111\1\uffff\1\u0954\1\uffff"+
        "\1\u0955\11\111\1\uffff\2\111\1\uffff\2\111\1\u0964\2\111\1\u0967"+
        "\1\u0968\1\u0969\1\u096a\3\111\1\u096e\2\111\6\uffff\1\u0971\1\uffff"+
        "\1\111\1\uffff\1\111\2\uffff\2\111\2\uffff\1\111\1\uffff\4\111\1"+
        "\uffff\1\u097b\2\111\1\u097e\1\u097f\1\uffff\1\111\1\uffff\2\111"+
        "\2\uffff\1\u0986\1\uffff\1\u0987\2\uffff\1\u0988\1\111\1\u098a\5"+
        "\111\1\u0990\1\uffff\3\111\1\uffff\1\u0994\1\111\3\uffff\1\u0996"+
        "\4\111\2\uffff\1\111\1\u099c\3\111\1\u09a0\2\111\1\uffff\3\111\1"+
        "\uffff\2\111\1\uffff\1\u09a8\3\111\2\uffff\2\111\1\u09ae\4\111\1"+
        "\uffff\1\111\1\u09b4\4\uffff\5\111\1\u09ba\1\uffff\1\111\1\uffff"+
        "\1\u09bc\1\111\1\u09c0\2\111\2\uffff\10\111\1\u09cc\1\111\1\u09ce"+
        "\3\111\1\uffff\1\u09d2\1\111\4\uffff\3\111\1\uffff\1\u09d7\1\111"+
        "\1\uffff\3\111\1\u09dc\5\111\1\uffff\2\111\2\uffff\6\111\3\uffff"+
        "\1\111\1\uffff\1\u09ec\4\111\1\uffff\3\111\1\uffff\1\u09f4\1\uffff"+
        "\1\u09f5\1\u09f6\2\111\1\u09f9\1\uffff\3\111\1\uffff\2\111\1\u09ff"+
        "\2\111\1\u0a02\1\u0a03\1\uffff\5\111\1\uffff\1\u0a0b\2\111\1\u0a0e"+
        "\1\111\1\uffff\5\111\1\uffff\1\111\1\uffff\3\111\1\uffff\1\u0a19"+
        "\2\111\1\u0a1c\1\111\1\u0a1e\1\u0a1f\2\111\1\u0a23\1\u0a24\1\uffff"+
        "\1\u0a25\1\uffff\3\111\1\uffff\1\u0a29\3\111\1\uffff\1\111\1\u0a2e"+
        "\1\111\1\u0a30\1\uffff\2\111\1\u0a33\3\111\1\u0a37\6\111\1\u0a3e"+
        "\1\111\1\uffff\5\111\1\u0a45\1\111\3\uffff\1\u0a47\1\u0a48\1\uffff"+
        "\1\u0a49\2\111\1\u0a4c\1\111\1\uffff\1\u0a4e\1\111\2\uffff\2\111"+
        "\1\u0a52\4\111\1\uffff\2\111\1\uffff\1\u0a59\1\u0a5a\1\u0a5b\7\111"+
        "\1\uffff\2\111\1\uffff\1\111\2\uffff\3\111\3\uffff\3\111\1\uffff"+
        "\1\u0a6c\3\111\1\uffff\1\111\1\uffff\2\111\1\uffff\2\111\1\u0a75"+
        "\1\uffff\6\111\1\uffff\6\111\1\uffff\1\111\3\uffff\1\u0a83\1\u0a84"+
        "\1\uffff\1\111\1\uffff\1\u0a86\2\111\1\uffff\2\111\1\u0a8c\3\111"+
        "\3\uffff\1\u0a90\17\111\1\uffff\3\111\1\u0aa5\1\u0aa6\1\u0aa7\1"+
        "\u0aa8\1\111\1\uffff\1\111\1\u0aab\1\u0aac\3\111\1\u0ab0\4\111\1"+
        "\u0ab5\1\111\2\uffff\1\111\1\uffff\4\111\1\u0abc\1\uffff\3\111\1"+
        "\uffff\2\111\1\u0ac2\1\u0ac3\14\111\1\u0ad0\3\111\4\uffff\2\111"+
        "\2\uffff\1\111\1\u0ad7\1\u0ad8\1\uffff\1\111\1\u0ada\2\111\1\uffff"+
        "\1\u0add\1\u0ade\3\111\1\u0ae2\1\uffff\1\u0ae3\1\u0ae4\1\111\1\u0ae6"+
        "\1\111\2\uffff\2\111\1\u0aea\1\u0aeb\7\111\1\u0af4\1\uffff\1\u0af5"+
        "\1\u0af6\4\111\2\uffff\1\111\1\uffff\2\111\2\uffff\3\111\3\uffff"+
        "\1\111\1\uffff\1\u0b03\1\111\1\u0b05\2\uffff\2\111\1\u0b08\1\111"+
        "\1\u0b0a\3\111\3\uffff\7\111\1\u0b15\4\111\1\uffff\1\u0b1a\1\uffff"+
        "\2\111\1\uffff\1\111\1\uffff\1\111\1\u0b1f\10\111\1\uffff\1\u0b29"+
        "\3\111\1\uffff\4\111\1\uffff\11\111\1\uffff\11\111\1\u0b48\3\111"+
        "\1\u0b4c\4\111\1\u0b51\7\111\1\u0b59\2\111\1\u0b5c\1\uffff\1\u0b5d"+
        "\2\111\1\uffff\4\111\1\uffff\1\u0b64\6\111\1\uffff\2\111\2\uffff"+
        "\1\111\1\u0b6e\4\111\1\uffff\1\u0b73\2\111\1\u0b76\1\u0b77\4\111"+
        "\1\uffff\1\111\1\u0b7d\2\111\1\uffff\2\111\2\uffff\5\111\1\uffff"+
        "\2\111\1\u0b89\1\111\1\u0b8b\4\111\1\u0b90\1\111\1\uffff\1\u0b92"+
        "\1\uffff\3\111\1\u0b96\1\uffff\1\u0b97\1\uffff\2\111\1\u0b9a\2\uffff"+
        "\2\111\1\uffff\4\111\1\u0ba1\1\111\1\uffff\1\u0ba3\1\uffff";
    static final String DFA88_eofS =
        "\u0ba4\uffff";
    static final String DFA88_minS =
        "\1\0\1\52\1\55\1\102\1\47\4\101\1\105\1\101\1\104\1\117\2\101\1"+
        "\47\1\102\4\101\1\46\1\101\1\110\2\105\1\117\2\75\1\174\1\72\1\56"+
        "\12\uffff\1\60\4\uffff\1\77\3\uffff\1\1\1\uffff\1\1\3\uffff\1\101"+
        "\1\105\1\47\1\101\1\116\14\uffff\1\60\1\105\1\107\1\114\1\104\1"+
        "\124\1\101\1\60\1\124\1\123\1\124\1\106\1\105\1\107\2\117\1\60\1"+
        "\uffff\1\101\1\111\1\102\1\114\2\101\1\105\1\103\1\101\1\115\1\116"+
        "\1\117\1\101\1\124\1\114\1\104\1\103\2\105\2\103\1\125\1\114\1\124"+
        "\1\114\1\105\1\114\1\117\1\114\1\116\1\101\1\60\1\117\1\116\1\114"+
        "\1\105\2\60\1\115\1\105\1\111\1\101\1\103\1\116\1\113\1\60\1\104"+
        "\1\115\1\120\1\116\1\114\1\60\1\114\1\115\1\110\1\123\1\124\1\110"+
        "\1\60\1\105\1\60\1\112\1\124\1\105\1\104\1\60\1\103\1\122\1\105"+
        "\1\61\1\103\1\102\1\123\1\101\1\114\1\116\1\107\1\115\2\101\1\107"+
        "\1\126\1\101\1\114\1\102\1\101\1\115\1\101\1\117\1\101\1\115\1\120"+
        "\1\105\1\102\1\105\1\60\1\101\1\42\1\102\1\104\1\114\1\105\1\114"+
        "\1\111\1\104\1\105\1\122\1\101\1\131\2\116\32\uffff\1\50\7\uffff"+
        "\1\1\4\uffff\1\115\1\122\1\60\1\101\1\60\1\105\1\60\1\101\2\60\1"+
        "\111\2\60\1\111\1\uffff\1\60\1\105\1\115\1\116\1\110\1\60\1\105"+
        "\1\111\1\127\1\117\1\116\1\101\1\60\1\111\1\102\1\114\1\110\1\uffff"+
        "\1\122\1\114\1\104\1\115\1\114\1\101\1\117\1\116\1\105\1\114\1\122"+
        "\2\105\1\101\1\104\1\103\1\114\1\111\1\103\1\123\1\102\1\123\1\101"+
        "\1\114\1\101\1\123\1\60\1\105\1\122\1\103\1\124\1\114\2\105\1\102"+
        "\2\101\1\120\1\103\1\107\1\101\2\60\1\55\1\105\1\103\1\60\1\123"+
        "\1\105\1\115\1\105\1\122\1\110\2\101\1\60\1\116\1\114\1\103\1\101"+
        "\1\105\1\124\1\123\1\115\1\105\1\114\1\111\1\103\1\101\1\123\1\60"+
        "\1\105\1\116\1\125\1\uffff\1\117\1\102\1\104\1\111\1\104\2\122\1"+
        "\uffff\1\124\1\125\1\117\1\60\1\111\1\114\2\105\1\125\1\uffff\1"+
        "\114\1\105\1\114\2\116\1\60\1\104\1\124\1\105\1\101\1\105\1\107"+
        "\1\111\1\124\1\105\2\107\1\105\1\uffff\1\105\1\60\1\124\1\123\1"+
        "\107\1\102\1\110\1\60\1\103\2\60\1\120\1\124\1\uffff\1\115\1\60"+
        "\1\105\1\102\1\114\1\111\1\105\1\101\1\117\2\124\1\60\2\105\1\uffff"+
        "\1\131\1\122\1\uffff\2\105\1\60\1\111\1\116\1\60\1\uffff\1\103\1"+
        "\101\1\60\1\110\1\113\2\103\1\115\2\103\3\60\1\114\1\105\1\111\1"+
        "\122\1\101\1\104\1\124\1\117\1\60\1\125\1\105\1\125\1\124\1\105"+
        "\1\60\1\107\1\110\1\124\1\115\1\122\1\125\1\104\1\114\1\122\1\105"+
        "\1\60\1\111\1\117\1\125\2\123\1\101\1\111\1\105\1\116\2\105\1\114"+
        "\1\120\1\117\1\60\1\124\1\103\1\60\1\114\1\122\1\105\2\103\1\122"+
        "\1\111\1\105\1\101\1\107\1\120\2\105\1\123\1\114\1\116\1\uffff\1"+
        "\137\1\107\1\122\1\116\1\uffff\1\116\1\101\1\117\1\105\1\111\2\117"+
        "\1\101\1\105\1\103\1\125\1\127\1\101\1\124\1\104\1\110\1\124\1\116"+
        "\1\113\1\122\1\60\1\104\1\105\2\uffff\2\111\1\uffff\1\131\1\uffff"+
        "\1\122\1\uffff\1\103\1\131\2\uffff\1\117\2\uffff\1\116\1\uffff\1"+
        "\107\1\122\1\115\1\123\1\60\1\117\1\uffff\1\114\1\122\1\116\1\105"+
        "\1\122\1\117\1\104\1\uffff\1\122\1\116\1\60\1\105\2\60\1\101\1\115"+
        "\1\105\1\124\1\111\1\101\1\105\1\101\1\105\1\122\1\114\1\124\1\137"+
        "\1\60\1\105\1\117\1\60\1\137\1\114\1\111\1\60\1\101\2\60\1\116\1"+
        "\60\1\113\1\123\1\60\1\105\1\123\1\124\1\105\1\125\1\122\1\116\1"+
        "\105\1\uffff\1\101\1\115\1\106\1\126\1\105\1\60\1\110\1\114\1\122"+
        "\1\124\1\114\1\111\1\115\1\60\1\117\1\101\1\111\1\116\2\60\1\uffff"+
        "\1\60\3\uffff\1\125\1\120\1\60\1\uffff\1\124\1\60\1\122\1\101\1"+
        "\105\1\60\1\131\1\60\1\120\1\114\1\uffff\1\111\1\122\1\104\1\117"+
        "\1\110\1\114\1\104\1\105\1\124\3\60\1\117\2\124\1\122\1\105\1\uffff"+
        "\1\122\1\124\1\120\1\60\1\101\1\114\1\116\2\60\1\101\1\111\1\124"+
        "\1\113\1\uffff\1\107\1\60\1\103\1\125\1\105\1\101\1\116\1\122\1"+
        "\124\1\101\1\104\1\105\1\124\1\60\1\uffff\1\124\1\111\1\60\2\114"+
        "\1\122\1\60\1\103\1\60\1\122\1\125\1\105\2\60\1\uffff\1\114\1\106"+
        "\1\110\1\101\2\105\1\117\1\uffff\1\110\1\uffff\1\101\1\uffff\1\124"+
        "\1\101\1\123\1\111\1\101\1\uffff\1\117\1\60\1\122\1\105\1\60\1\117"+
        "\1\122\1\60\1\122\1\102\1\60\1\111\1\uffff\1\124\1\122\2\60\1\122"+
        "\1\116\1\103\1\uffff\1\122\1\125\1\117\1\60\1\uffff\1\101\1\115"+
        "\1\111\1\uffff\1\60\3\105\1\101\1\105\1\101\1\122\1\111\1\105\1"+
        "\111\2\uffff\1\125\1\111\1\122\1\124\1\137\1\101\1\124\2\60\1\101"+
        "\1\114\1\113\1\uffff\2\122\1\101\1\122\1\111\1\60\1\102\1\uffff"+
        "\1\103\2\60\1\105\1\124\3\105\1\124\1\103\2\105\1\103\1\60\1\103"+
        "\1\uffff\1\60\1\105\1\101\1\116\1\122\1\111\1\105\2\111\1\122\2"+
        "\114\2\60\1\120\1\115\2\105\1\114\1\uffff\1\124\1\101\1\130\1\60"+
        "\1\114\1\124\1\125\1\uffff\1\114\1\103\1\60\1\105\1\111\1\124\1"+
        "\123\1\114\1\60\1\124\1\107\1\60\1\117\3\60\1\105\1\60\1\114\1\105"+
        "\1\60\1\107\1\117\1\115\1\123\1\125\1\116\1\60\1\122\1\107\1\115"+
        "\1\125\1\124\1\122\1\110\1\120\1\111\1\105\1\60\1\124\1\105\1\117"+
        "\1\60\1\110\1\105\3\60\1\uffff\1\115\2\60\1\103\1\102\2\60\1\101"+
        "\1\123\1\116\1\60\1\116\1\124\1\105\1\111\1\uffff\1\122\1\125\2"+
        "\60\2\105\1\125\1\124\1\131\1\124\1\uffff\1\101\2\uffff\1\123\1"+
        "\103\1\124\1\116\1\103\1\60\1\124\1\116\1\111\1\122\1\116\1\124"+
        "\1\123\1\137\2\60\1\125\1\uffff\2\116\1\122\1\uffff\1\104\1\117"+
        "\1\116\1\uffff\1\104\2\uffff\1\104\1\60\1\uffff\1\103\1\114\1\60"+
        "\1\137\1\uffff\2\60\1\105\1\60\1\114\1\122\1\105\1\137\1\122\1\101"+
        "\1\60\2\105\1\uffff\1\111\1\60\1\117\1\115\2\105\1\116\1\111\1\uffff"+
        "\1\116\1\124\1\101\1\116\1\117\2\uffff\1\111\1\uffff\1\104\1\124"+
        "\1\uffff\1\124\1\123\1\uffff\1\116\1\103\1\116\1\uffff\1\60\1\uffff"+
        "\1\105\1\123\1\107\1\101\1\60\1\127\3\60\1\122\1\60\3\uffff\1\116"+
        "\1\111\3\60\1\101\2\60\1\uffff\1\114\1\105\1\107\2\uffff\1\60\1"+
        "\122\1\101\1\60\1\105\1\106\1\105\1\uffff\1\101\1\104\1\115\1\116"+
        "\1\124\1\123\2\60\1\124\1\111\1\115\1\111\1\uffff\1\110\1\116\1"+
        "\uffff\2\60\1\117\1\60\1\uffff\1\101\1\uffff\2\101\1\60\2\uffff"+
        "\1\105\1\111\1\60\1\107\1\60\1\122\1\104\1\60\1\114\1\105\1\114"+
        "\1\60\1\123\1\114\1\125\1\uffff\1\111\1\122\1\uffff\1\102\1\60\1"+
        "\106\1\116\1\101\1\uffff\3\60\1\uffff\1\116\2\123\2\uffff\1\101"+
        "\1\111\1\60\1\101\1\124\1\60\1\124\1\116\1\uffff\1\114\1\105\1\101"+
        "\1\uffff\1\104\1\116\1\104\1\123\3\122\1\60\1\114\1\104\1\116\1"+
        "\122\1\103\1\60\1\111\1\101\1\123\1\111\1\uffff\1\60\1\uffff\1\111"+
        "\1\122\1\124\2\105\1\116\1\124\1\123\1\116\1\uffff\1\101\1\120\1"+
        "\117\1\125\2\uffff\2\60\1\115\1\124\1\103\2\60\1\124\1\126\1\60"+
        "\1\110\1\uffff\1\124\1\uffff\1\122\1\114\1\104\1\111\1\117\1\116"+
        "\1\117\1\124\2\101\1\105\2\uffff\1\104\1\117\1\101\2\60\1\114\1"+
        "\101\1\122\1\103\1\uffff\1\101\1\122\1\114\1\111\1\105\1\uffff\1"+
        "\60\1\106\1\60\1\101\1\111\1\uffff\1\60\1\105\1\uffff\1\122\2\uffff"+
        "\1\124\1\117\1\uffff\1\60\1\uffff\1\105\1\60\1\uffff\1\104\1\60"+
        "\1\127\1\105\1\124\1\105\1\60\1\uffff\1\60\1\116\1\115\1\116\1\105"+
        "\1\60\1\101\1\117\1\101\1\116\1\60\1\uffff\1\111\1\60\1\127\1\uffff"+
        "\1\125\1\116\1\137\1\60\1\uffff\1\126\2\uffff\1\131\1\105\2\uffff"+
        "\1\60\1\125\2\uffff\1\124\2\60\1\uffff\1\115\1\111\2\124\1\111\1"+
        "\124\2\uffff\1\116\1\60\1\114\1\110\2\60\1\116\1\120\1\124\1\105"+
        "\1\60\1\124\1\uffff\1\101\1\111\1\125\1\116\1\124\1\104\1\60\1\103"+
        "\1\120\2\uffff\1\116\1\107\1\124\1\60\1\111\1\107\1\101\1\105\1"+
        "\60\1\uffff\1\124\1\105\1\uffff\1\104\1\117\2\uffff\1\60\1\uffff"+
        "\1\124\1\101\1\104\1\122\1\105\1\114\1\uffff\1\104\1\60\1\102\1"+
        "\uffff\1\103\1\111\3\60\1\103\1\116\1\103\1\131\1\103\1\123\1\115"+
        "\1\105\1\60\1\105\2\60\2\124\1\uffff\2\60\2\116\1\uffff\1\111\3"+
        "\uffff\1\60\1\uffff\1\60\1\117\3\uffff\1\114\1\uffff\1\104\1\uffff"+
        "\1\116\1\60\1\122\1\60\1\uffff\1\103\1\114\1\uffff\1\122\2\101\1"+
        "\105\1\122\1\124\1\111\1\105\1\103\1\60\1\111\2\uffff\1\111\1\101"+
        "\1\105\1\124\1\60\1\107\2\uffff\1\111\1\122\1\uffff\2\114\1\107"+
        "\1\uffff\1\60\1\105\1\uffff\1\105\1\uffff\2\60\1\uffff\1\104\1\125"+
        "\1\60\1\125\1\uffff\1\105\1\111\1\116\1\103\1\60\1\114\1\uffff\1"+
        "\60\1\101\1\114\2\uffff\1\126\1\uffff\1\107\1\60\1\114\1\60\1\120"+
        "\1\104\1\uffff\1\116\1\114\1\60\1\uffff\3\60\1\124\1\111\1\114\1"+
        "\60\1\124\2\111\1\105\1\126\1\131\1\uffff\1\105\1\125\1\107\1\105"+
        "\1\60\1\uffff\1\117\1\114\1\126\1\117\1\62\1\116\1\105\1\126\1\uffff"+
        "\1\103\1\124\2\60\1\116\1\60\1\101\1\111\1\105\1\103\1\60\1\125"+
        "\1\115\2\uffff\1\60\1\122\1\60\1\uffff\1\105\1\uffff\1\125\1\137"+
        "\1\uffff\2\60\1\137\1\111\1\60\1\124\1\116\1\103\1\116\1\111\1\124"+
        "\1\122\2\60\1\111\1\60\2\uffff\1\103\1\60\1\124\1\116\1\105\1\123"+
        "\1\111\1\124\1\116\1\60\1\uffff\1\111\1\uffff\1\101\1\103\1\117"+
        "\1\116\1\uffff\1\122\2\101\1\116\1\uffff\1\116\1\101\1\126\1\uffff"+
        "\1\105\1\uffff\1\116\1\104\2\60\2\uffff\1\105\1\111\1\104\1\60\1"+
        "\uffff\1\122\1\120\1\115\1\107\1\uffff\1\60\1\114\1\uffff\1\60\1"+
        "\124\1\60\1\102\1\uffff\1\105\1\120\1\115\1\uffff\1\124\1\105\2"+
        "\uffff\1\105\1\117\1\122\1\111\1\132\1\105\1\60\1\uffff\1\114\1"+
        "\60\2\uffff\1\60\1\117\1\60\1\117\1\60\1\uffff\1\116\1\60\1\111"+
        "\1\103\1\117\1\105\1\123\1\60\1\137\1\uffff\2\105\1\101\1\117\1"+
        "\111\2\60\1\uffff\1\116\1\123\1\60\1\114\1\60\1\uffff\1\105\1\116"+
        "\1\60\1\122\1\uffff\1\60\1\102\1\104\2\60\1\101\3\60\1\uffff\1\124"+
        "\1\105\1\101\1\116\2\uffff\1\120\1\uffff\1\60\1\105\1\110\1\60\2"+
        "\124\1\105\1\116\1\60\1\uffff\1\117\1\60\2\uffff\1\114\2\60\2\uffff"+
        "\2\60\1\116\2\uffff\1\116\1\105\2\60\1\107\1\uffff\1\60\1\uffff"+
        "\1\110\1\114\1\60\1\114\2\103\1\60\1\117\2\116\1\111\1\105\1\uffff"+
        "\1\124\1\117\1\124\1\116\1\131\1\uffff\1\60\1\115\3\60\1\105\1\uffff"+
        "\1\123\1\137\2\uffff\1\60\1\105\1\uffff\1\105\1\124\1\132\1\104"+
        "\1\60\1\uffff\1\105\1\uffff\1\114\1\60\1\101\1\60\1\uffff\1\105"+
        "\1\uffff\1\60\1\123\1\111\1\107\1\111\3\uffff\1\60\1\uffff\1\105"+
        "\1\117\1\60\1\uffff\1\111\1\116\1\117\1\60\1\105\1\60\1\107\1\122"+
        "\2\60\1\uffff\1\116\1\117\1\130\1\131\1\107\1\125\1\60\1\124\1\60"+
        "\1\105\1\124\1\60\2\uffff\1\103\1\uffff\1\60\1\104\1\102\1\126\1"+
        "\60\1\113\1\uffff\1\116\1\102\1\uffff\1\125\1\111\1\uffff\1\116"+
        "\1\122\1\120\2\uffff\1\116\1\132\1\uffff\1\131\1\60\1\105\1\60\1"+
        "\126\1\105\1\60\2\uffff\1\116\1\uffff\1\116\1\101\1\103\1\101\1"+
        "\uffff\1\105\1\111\1\120\1\123\1\116\1\111\1\124\1\uffff\1\103\2"+
        "\124\1\122\1\107\1\60\1\122\1\115\1\105\1\101\1\115\1\105\1\106"+
        "\2\60\2\uffff\1\104\1\124\1\105\1\uffff\2\60\1\120\1\60\1\uffff"+
        "\1\105\1\uffff\1\60\1\uffff\1\125\1\122\1\105\1\102\1\105\1\60\2"+
        "\116\1\111\1\126\1\101\1\60\1\uffff\1\111\2\uffff\1\116\1\uffff"+
        "\1\116\1\uffff\1\101\1\uffff\1\117\1\116\1\124\1\116\2\60\1\uffff"+
        "\1\106\1\104\1\60\1\115\1\120\1\124\2\uffff\1\103\1\101\1\124\1"+
        "\uffff\1\116\1\111\1\uffff\1\60\1\122\1\107\1\uffff\1\111\1\uffff"+
        "\1\60\1\114\1\60\2\uffff\1\116\3\uffff\1\117\1\60\1\124\1\111\1"+
        "\122\1\uffff\1\106\1\103\1\60\1\uffff\1\60\1\111\1\137\1\107\1\uffff"+
        "\1\116\1\uffff\1\60\4\uffff\1\107\1\60\1\104\2\uffff\1\60\1\uffff"+
        "\2\131\1\uffff\1\60\1\105\1\124\1\uffff\1\122\1\107\1\124\1\101"+
        "\1\60\1\111\1\116\1\105\1\124\1\60\1\uffff\1\105\3\uffff\2\60\1"+
        "\114\1\uffff\3\60\1\105\1\60\1\uffff\2\60\1\uffff\1\122\1\uffff"+
        "\1\116\1\uffff\1\60\1\116\1\60\1\124\1\uffff\1\122\1\116\1\uffff"+
        "\1\114\1\122\1\107\1\116\1\uffff\1\60\1\uffff\2\105\2\uffff\1\60"+
        "\1\120\3\60\1\130\1\116\1\uffff\1\105\1\uffff\2\60\1\uffff\1\105"+
        "\1\uffff\1\137\1\114\1\105\1\uffff\1\103\1\60\1\124\1\105\1\123"+
        "\1\103\1\124\1\105\1\117\3\101\1\60\1\uffff\1\60\1\uffff\1\125\1"+
        "\105\1\60\1\uffff\1\124\1\101\1\115\1\110\1\124\1\60\1\116\1\124"+
        "\1\137\1\107\1\123\2\60\1\105\1\111\1\115\1\60\1\uffff\1\103\1\131"+
        "\1\120\1\137\1\115\1\120\1\114\1\111\2\uffff\1\60\1\124\1\104\2"+
        "\uffff\1\60\1\uffff\1\60\1\uffff\1\103\2\60\1\105\1\60\1\uffff\1"+
        "\124\1\60\1\103\1\105\1\124\1\uffff\1\60\1\104\1\60\1\115\1\116"+
        "\1\124\1\117\1\60\2\uffff\1\125\1\60\1\uffff\1\120\1\60\1\123\1"+
        "\101\1\117\1\111\1\117\1\123\1\101\1\115\1\60\1\101\1\124\1\uffff"+
        "\1\60\1\124\1\107\1\uffff\1\105\1\uffff\1\113\1\122\1\uffff\1\105"+
        "\1\123\1\105\1\125\1\124\2\uffff\1\103\1\111\2\60\1\uffff\1\60\1"+
        "\uffff\1\60\1\uffff\2\60\1\uffff\1\123\4\60\1\102\1\uffff\1\126"+
        "\2\60\1\101\1\uffff\1\60\2\uffff\2\105\1\103\3\uffff\1\60\3\uffff"+
        "\1\131\1\107\1\uffff\1\107\1\uffff\1\131\2\60\1\105\1\101\2\60\1"+
        "\uffff\1\123\1\60\1\uffff\1\105\3\uffff\2\60\1\124\1\122\2\uffff"+
        "\1\123\1\116\1\103\1\105\1\60\1\103\2\101\1\uffff\1\60\1\122\1\105"+
        "\3\60\1\120\2\115\1\102\2\uffff\1\123\1\60\1\uffff\1\60\1\115\2"+
        "\105\1\101\1\uffff\1\124\1\107\1\111\1\117\1\60\1\105\2\uffff\1"+
        "\131\1\116\1\60\2\117\1\60\1\uffff\2\101\1\103\2\60\1\110\1\105"+
        "\1\114\1\137\1\116\1\uffff\1\105\1\60\2\uffff\1\113\2\uffff\1\122"+
        "\1\uffff\2\60\1\uffff\2\60\1\111\1\uffff\1\111\1\uffff\1\103\1\105"+
        "\2\60\1\122\1\uffff\2\116\1\uffff\1\60\1\uffff\1\60\1\124\1\106"+
        "\1\114\1\115\1\101\1\114\1\105\1\124\1\105\1\uffff\1\115\1\131\1"+
        "\uffff\1\114\1\123\1\60\1\110\1\111\4\60\1\124\1\103\1\116\1\60"+
        "\1\123\1\116\6\uffff\1\60\1\uffff\1\117\1\uffff\1\124\2\uffff\1"+
        "\114\1\105\2\uffff\1\124\1\uffff\1\124\1\130\1\116\1\124\1\uffff"+
        "\1\60\1\111\1\124\2\60\1\uffff\1\115\1\uffff\1\137\1\116\2\uffff"+
        "\1\60\1\uffff\1\60\2\uffff\1\60\1\103\1\60\1\107\1\101\1\105\1\103"+
        "\1\121\1\60\1\uffff\1\110\1\115\1\124\1\uffff\1\60\1\122\3\uffff"+
        "\1\60\1\120\1\105\1\114\1\105\2\uffff\1\105\1\60\1\115\1\114\1\131"+
        "\1\60\1\117\1\122\1\uffff\1\124\1\120\1\101\1\uffff\2\116\1\uffff"+
        "\1\60\1\115\1\124\1\110\2\uffff\1\117\1\111\1\60\1\105\1\103\1\105"+
        "\1\104\1\uffff\1\105\1\60\4\uffff\1\117\1\116\1\101\1\103\1\101"+
        "\1\60\1\uffff\1\116\1\uffff\1\60\1\103\1\60\1\125\1\103\2\uffff"+
        "\1\105\1\101\2\105\1\116\1\114\1\122\1\110\1\60\1\105\1\60\2\105"+
        "\1\124\1\uffff\1\60\1\116\4\uffff\2\111\1\103\1\uffff\1\60\1\124"+
        "\1\uffff\1\116\1\131\1\105\1\60\1\111\1\101\1\124\1\107\1\105\1"+
        "\uffff\1\116\1\110\2\uffff\1\120\1\117\1\101\1\122\1\103\1\113\3"+
        "\uffff\1\105\1\uffff\1\60\1\122\1\116\1\124\1\114\1\uffff\2\105"+
        "\1\101\1\uffff\1\60\1\uffff\2\60\1\105\1\122\1\60\1\uffff\1\101"+
        "\1\117\1\120\1\uffff\1\116\1\111\1\60\1\105\1\115\2\60\1\uffff\1"+
        "\105\1\101\1\105\1\125\1\116\1\uffff\1\60\1\117\1\104\1\60\1\124"+
        "\1\uffff\1\116\1\107\1\115\1\110\1\124\1\uffff\1\101\1\uffff\2\101"+
        "\1\103\1\uffff\1\60\1\115\1\124\1\60\1\125\2\60\1\123\1\101\2\60"+
        "\1\uffff\1\60\1\uffff\1\124\1\116\1\111\1\uffff\1\60\1\103\1\123"+
        "\1\124\1\uffff\1\105\1\60\1\120\1\60\1\uffff\1\117\1\115\1\60\2"+
        "\124\1\107\1\60\1\105\1\104\1\115\1\104\1\117\1\111\1\60\1\120\1"+
        "\uffff\1\104\1\107\1\105\1\123\1\115\1\60\1\114\3\uffff\2\60\1\uffff"+
        "\1\60\1\107\1\105\1\60\1\107\1\uffff\1\60\1\105\2\uffff\1\101\1"+
        "\137\1\60\1\114\1\115\1\122\1\125\1\uffff\1\125\1\137\1\uffff\3"+
        "\60\2\105\1\101\2\115\1\124\1\110\1\uffff\1\102\1\111\1\uffff\1"+
        "\114\2\uffff\1\124\1\106\1\124\3\uffff\1\137\1\107\1\103\1\uffff"+
        "\1\60\2\111\1\122\1\uffff\1\105\1\uffff\1\116\1\120\1\uffff\1\110"+
        "\1\137\1\60\1\uffff\1\103\2\105\1\111\1\116\1\123\1\uffff\1\124"+
        "\1\111\3\124\1\101\1\uffff\1\117\3\uffff\2\60\1\uffff\1\111\1\uffff"+
        "\1\60\2\103\1\uffff\1\117\1\101\1\60\1\124\1\116\1\124\3\uffff\1"+
        "\60\1\115\1\114\2\105\1\101\2\105\1\117\1\124\1\101\1\117\1\111"+
        "\1\103\1\124\1\123\1\uffff\2\117\1\126\4\60\1\114\1\uffff\1\111"+
        "\2\60\1\116\1\124\1\103\1\60\1\116\1\110\1\137\1\101\1\60\1\107"+
        "\2\uffff\1\116\1\uffff\1\124\2\117\1\107\1\60\1\uffff\1\105\1\124"+
        "\1\131\1\uffff\1\101\1\117\2\60\1\114\1\115\1\122\1\116\1\137\1"+
        "\115\1\122\1\117\2\101\1\103\1\110\1\60\2\116\1\101\4\uffff\1\105"+
        "\1\106\2\uffff\1\101\2\60\1\uffff\1\101\1\60\1\114\1\124\1\uffff"+
        "\2\60\1\111\1\115\1\114\1\60\1\uffff\2\60\1\120\1\60\1\107\2\uffff"+
        "\1\117\1\101\2\60\1\124\1\120\1\115\1\116\1\124\1\115\1\110\1\60"+
        "\1\uffff\2\60\1\114\1\116\1\111\1\114\2\uffff\1\114\1\uffff\2\105"+
        "\2\uffff\1\126\1\115\1\114\3\uffff\1\105\1\uffff\1\60\1\107\1\60"+
        "\2\uffff\1\103\1\122\1\60\1\137\1\60\1\101\2\105\3\uffff\1\103\1"+
        "\137\1\107\1\103\1\137\1\111\1\116\1\60\1\105\1\111\1\105\1\137"+
        "\1\uffff\1\60\1\uffff\1\117\1\101\1\uffff\1\107\1\uffff\1\114\1"+
        "\60\1\115\1\117\1\103\1\124\1\137\1\120\1\124\1\107\1\uffff\1\60"+
        "\1\124\1\104\1\103\1\uffff\1\104\1\116\1\122\1\117\1\uffff\1\101"+
        "\1\104\1\122\1\117\1\110\1\103\1\117\1\131\1\124\1\uffff\1\124\1"+
        "\137\2\101\1\103\1\105\1\123\1\117\1\107\1\60\2\105\1\104\1\60\2"+
        "\101\1\103\1\123\1\60\1\110\1\105\1\102\1\124\1\104\1\115\1\110"+
        "\1\60\1\106\1\125\1\60\1\uffff\1\60\1\103\1\105\1\uffff\1\124\1"+
        "\115\1\110\1\111\1\uffff\1\60\1\104\2\101\3\105\1\uffff\1\117\1"+
        "\120\2\uffff\1\111\1\60\1\101\2\105\1\124\1\uffff\1\60\1\103\1\114"+
        "\2\60\1\115\1\122\1\137\1\123\1\uffff\1\114\1\60\1\115\1\111\1\uffff"+
        "\1\113\1\117\2\uffff\1\101\1\115\1\106\1\111\1\117\1\uffff\1\101"+
        "\1\117\1\60\1\107\1\60\1\137\2\117\1\107\1\60\1\116\1\uffff\1\60"+
        "\1\uffff\1\107\1\122\1\116\1\60\1\uffff\1\60\1\uffff\1\122\1\137"+
        "\1\60\2\uffff\1\117\1\124\1\uffff\1\125\1\131\2\120\1\60\1\105\1"+
        "\uffff\1\60\1\uffff";
    static final String DFA88_maxS =
        "\1\uffff\1\57\1\76\1\166\3\171\1\170\1\165\1\162\1\157\1\163\2\157"+
        "\2\165\1\166\1\165\1\157\2\171\1\163\1\157\1\162\1\145\1\151\1\157"+
        "\1\76\1\75\1\174\1\72\1\71\12\uffff\1\71\4\uffff\1\77\3\uffff\1"+
        "\u00ff\1\uffff\1\u009f\3\uffff\1\172\1\171\1\47\1\165\1\163\14\uffff"+
        "\1\172\1\162\1\147\1\167\1\171\1\164\1\155\1\172\1\164\1\163\2\164"+
        "\1\145\1\156\1\157\1\164\1\172\1\uffff\1\166\1\151\1\162\1\164\1"+
        "\145\2\157\1\143\1\164\1\165\1\156\1\157\1\163\1\171\1\154\1\144"+
        "\1\164\1\163\1\145\2\143\2\165\1\164\1\170\1\157\1\163\1\157\1\154"+
        "\1\164\1\157\1\172\1\157\1\166\1\165\1\145\2\172\1\160\1\145\1\151"+
        "\1\166\1\167\1\164\1\153\1\172\1\162\1\164\1\170\1\156\1\155\1\172"+
        "\1\155\1\164\1\154\1\170\1\164\1\150\1\172\1\145\1\172\1\152\2\164"+
        "\1\144\1\172\1\164\1\162\1\157\1\151\1\143\1\142\1\167\1\166\1\167"+
        "\1\156\1\147\1\163\1\171\1\164\1\172\1\166\2\162\1\155\1\141\1\165"+
        "\1\145\1\157\1\165\1\155\1\160\1\155\1\142\1\145\1\172\1\151\1\47"+
        "\1\163\1\160\1\162\1\145\1\154\1\151\1\164\1\145\1\162\1\141\1\171"+
        "\2\156\32\uffff\1\51\7\uffff\1\u009f\4\uffff\1\155\1\162\1\172\1"+
        "\141\1\172\1\145\1\172\1\141\2\172\1\151\2\172\1\151\1\uffff\1\172"+
        "\1\151\1\155\1\156\1\157\1\172\1\145\1\151\1\167\1\157\1\156\1\141"+
        "\1\172\1\151\1\142\1\154\1\150\1\uffff\1\162\1\165\1\166\1\155\1"+
        "\154\1\141\1\157\1\156\1\145\1\154\1\163\2\145\1\141\1\144\1\164"+
        "\1\154\1\162\1\143\3\163\1\141\1\154\1\151\1\163\1\172\1\151\1\162"+
        "\1\143\1\164\1\154\2\145\1\142\2\141\1\160\1\164\1\147\1\145\3\172"+
        "\1\154\1\143\1\172\1\164\1\162\1\155\1\145\1\162\1\150\2\141\1\172"+
        "\1\156\1\154\1\143\1\141\1\145\1\164\1\163\1\155\1\145\1\154\1\151"+
        "\1\143\1\157\1\163\1\172\1\145\1\156\1\165\1\uffff\1\157\1\142\1"+
        "\144\1\151\1\144\2\162\1\uffff\1\164\1\165\1\157\1\172\1\151\1\162"+
        "\1\164\1\145\1\165\1\uffff\1\154\1\145\1\154\2\156\1\172\1\144\1"+
        "\164\1\145\1\141\1\145\1\147\1\151\1\164\1\145\2\147\1\145\1\uffff"+
        "\1\145\1\172\1\164\1\163\1\147\1\142\1\150\1\172\1\143\2\172\1\160"+
        "\1\164\1\uffff\1\155\1\172\2\145\1\154\1\165\1\145\1\141\1\157\2"+
        "\164\1\172\2\145\1\uffff\1\171\1\162\1\uffff\1\151\1\145\1\172\1"+
        "\151\1\156\1\172\1\uffff\1\143\1\164\1\172\1\150\1\153\1\143\1\163"+
        "\1\166\2\143\3\172\1\154\1\145\1\151\1\162\1\145\1\154\1\165\1\157"+
        "\1\172\1\165\1\145\1\165\1\164\1\154\1\172\1\153\1\150\1\164\1\155"+
        "\1\164\1\165\1\144\1\154\1\162\1\146\1\172\1\166\2\165\2\163\1\141"+
        "\1\160\1\145\1\156\2\145\1\154\1\160\1\157\1\172\1\164\1\163\1\172"+
        "\1\154\1\162\1\145\2\143\1\162\1\156\1\145\1\141\1\155\1\160\2\145"+
        "\1\163\1\154\1\156\1\uffff\1\137\1\147\1\162\1\156\1\uffff\1\156"+
        "\1\145\1\161\1\157\1\151\2\157\1\141\1\145\1\171\1\165\1\167\1\141"+
        "\1\164\1\144\1\150\1\164\1\162\1\153\1\162\1\172\1\144\1\145\2\uffff"+
        "\2\151\1\uffff\1\171\1\uffff\1\162\1\uffff\1\143\1\171\2\uffff\1"+
        "\157\2\uffff\1\156\1\uffff\1\147\1\162\1\155\1\163\1\172\1\157\1"+
        "\uffff\1\154\1\162\1\156\1\145\1\162\1\157\1\144\1\uffff\1\162\1"+
        "\156\1\172\1\145\2\172\1\145\1\155\1\145\1\164\2\151\1\145\1\151"+
        "\1\145\1\162\1\154\1\164\1\137\1\172\1\145\1\157\1\172\1\137\1\154"+
        "\1\151\1\172\1\141\2\172\1\156\1\172\1\153\1\163\1\172\1\145\1\163"+
        "\1\164\1\145\1\165\1\162\1\156\1\145\1\uffff\1\141\1\155\1\146\1"+
        "\166\1\145\1\172\1\150\1\154\1\162\1\164\1\154\1\151\1\155\1\172"+
        "\1\157\1\154\1\151\1\156\2\172\1\uffff\1\172\3\uffff\1\165\1\160"+
        "\1\172\1\uffff\1\164\1\172\1\162\1\141\1\145\1\172\1\171\1\172\1"+
        "\160\1\154\1\uffff\1\151\1\162\1\144\1\157\1\150\1\154\1\144\1\145"+
        "\1\164\3\172\1\157\2\164\1\162\1\145\1\uffff\1\162\1\164\1\160\1"+
        "\172\1\141\1\154\1\156\2\172\1\141\1\151\1\164\1\153\1\uffff\1\162"+
        "\1\172\1\143\1\165\1\145\1\141\2\162\1\164\1\141\1\144\1\145\1\164"+
        "\1\172\1\uffff\1\164\1\151\1\172\1\154\1\164\1\162\1\172\1\143\1"+
        "\172\1\162\1\165\1\145\2\172\1\uffff\1\154\1\146\1\150\1\141\2\145"+
        "\1\157\1\uffff\1\150\1\uffff\1\141\1\uffff\1\164\1\141\1\163\1\151"+
        "\1\141\1\uffff\1\157\1\172\1\162\1\145\1\172\1\157\1\162\1\172\1"+
        "\162\1\142\1\172\1\151\1\uffff\1\164\1\162\2\172\1\162\1\156\1\143"+
        "\1\uffff\1\162\1\165\1\157\1\172\1\uffff\1\141\1\155\1\151\1\uffff"+
        "\1\172\2\145\1\151\1\141\1\145\1\141\1\162\1\151\1\145\1\151\2\uffff"+
        "\1\165\1\151\1\162\1\164\1\137\1\141\1\164\2\172\1\162\1\154\1\153"+
        "\1\uffff\2\162\1\141\1\162\1\151\1\172\1\165\1\uffff\1\156\2\172"+
        "\1\145\1\164\2\145\1\151\1\164\1\143\2\145\1\143\1\172\1\143\1\uffff"+
        "\1\172\1\145\1\141\1\156\1\162\1\151\1\145\2\151\1\162\2\154\2\172"+
        "\1\160\1\155\2\145\1\154\1\uffff\1\164\1\141\1\170\1\172\1\154\1"+
        "\164\1\165\1\uffff\1\154\1\143\1\172\1\145\1\151\1\164\1\163\1\154"+
        "\1\172\1\164\1\147\1\172\1\157\3\172\1\145\1\172\1\154\1\145\1\172"+
        "\1\147\1\157\1\155\1\163\1\165\1\156\1\172\1\162\1\147\1\155\1\165"+
        "\1\164\1\162\1\150\1\163\1\151\1\145\1\172\1\164\1\145\1\157\1\172"+
        "\1\150\1\145\3\172\1\uffff\1\164\2\172\1\143\1\142\2\172\1\141\1"+
        "\163\1\156\1\172\1\156\1\164\1\145\1\151\1\uffff\1\162\1\165\2\172"+
        "\2\145\1\165\1\164\1\171\1\164\1\uffff\1\141\2\uffff\1\163\1\143"+
        "\1\164\1\156\1\143\1\172\1\164\1\156\1\151\1\162\1\156\1\164\1\163"+
        "\1\137\2\172\1\165\1\uffff\2\156\1\162\1\uffff\1\144\1\157\1\156"+
        "\1\uffff\1\144\2\uffff\1\144\1\172\1\uffff\1\143\1\154\1\172\1\137"+
        "\1\uffff\2\172\1\145\1\172\1\154\1\162\1\145\1\137\1\162\1\141\1"+
        "\172\2\145\1\uffff\1\151\1\172\1\157\1\155\2\145\1\156\1\151\1\uffff"+
        "\1\156\1\164\1\141\1\156\1\157\2\uffff\1\151\1\uffff\1\144\1\164"+
        "\1\uffff\1\164\1\163\1\uffff\1\156\1\143\1\156\1\uffff\1\172\1\uffff"+
        "\1\145\1\163\1\147\1\141\1\172\1\167\3\172\1\162\1\172\3\uffff\1"+
        "\156\1\151\3\172\1\141\2\172\1\uffff\1\154\1\145\1\147\2\uffff\1"+
        "\172\1\162\1\141\1\172\1\145\1\166\1\145\1\uffff\1\141\1\144\1\155"+
        "\1\156\1\164\1\163\2\172\1\164\1\151\1\155\1\151\1\uffff\1\150\1"+
        "\156\1\uffff\2\172\1\157\1\172\1\uffff\1\141\1\uffff\2\141\1\172"+
        "\2\uffff\1\145\1\151\1\172\1\147\1\172\1\162\1\144\1\172\1\154\1"+
        "\145\1\154\1\172\1\163\1\154\1\165\1\uffff\1\151\1\162\1\uffff\1"+
        "\142\1\172\1\146\1\156\1\141\1\uffff\3\172\1\uffff\1\156\2\163\2"+
        "\uffff\1\141\1\151\1\172\1\141\1\164\1\172\1\164\1\156\1\uffff\1"+
        "\154\1\145\1\164\1\uffff\1\144\1\156\1\144\1\163\3\162\1\172\1\154"+
        "\1\144\1\156\1\162\1\143\1\172\1\151\2\163\1\151\1\uffff\1\172\1"+
        "\uffff\1\151\1\162\1\164\2\145\1\156\1\164\1\163\1\156\1\uffff\1"+
        "\141\1\160\1\157\1\165\2\uffff\2\172\1\155\1\164\1\143\2\172\1\164"+
        "\1\166\1\172\1\150\1\uffff\1\164\1\uffff\1\162\1\154\1\144\1\151"+
        "\1\157\1\156\1\157\1\164\2\141\1\145\2\uffff\1\144\1\157\1\141\2"+
        "\172\1\154\1\141\1\162\1\143\1\uffff\1\141\1\162\1\154\1\151\1\145"+
        "\1\uffff\1\172\1\146\1\172\1\154\1\151\1\uffff\1\172\1\145\1\uffff"+
        "\1\162\2\uffff\1\164\1\157\1\uffff\1\172\1\uffff\1\145\1\172\1\uffff"+
        "\1\144\1\172\1\167\1\145\1\164\1\145\1\172\1\uffff\1\172\1\156\1"+
        "\155\1\156\1\145\1\172\1\141\1\157\1\141\1\156\1\172\1\uffff\1\151"+
        "\1\172\1\167\1\uffff\1\165\1\156\1\137\1\172\1\uffff\1\166\2\uffff"+
        "\1\171\1\145\2\uffff\1\172\1\165\2\uffff\1\164\2\172\1\uffff\1\155"+
        "\1\151\2\164\1\151\1\164\2\uffff\1\156\1\172\1\154\1\150\2\172\1"+
        "\156\1\160\1\164\1\151\1\172\1\164\1\uffff\1\165\1\151\1\165\1\156"+
        "\1\164\1\144\1\172\1\143\1\163\2\uffff\1\156\1\147\1\164\1\172\1"+
        "\151\1\147\1\141\1\145\1\172\1\uffff\1\164\1\145\1\uffff\1\144\1"+
        "\157\2\uffff\1\172\1\uffff\1\164\1\145\2\162\1\145\1\154\1\uffff"+
        "\1\144\1\172\1\160\1\uffff\1\143\1\151\3\172\1\143\1\156\1\143\1"+
        "\171\1\143\1\163\1\155\1\151\1\172\1\145\2\172\2\164\1\uffff\2\172"+
        "\2\156\1\uffff\1\151\3\uffff\1\172\1\uffff\1\172\1\157\3\uffff\1"+
        "\164\1\uffff\1\144\1\uffff\1\156\1\172\1\162\1\172\1\uffff\1\143"+
        "\1\154\1\uffff\1\162\2\141\1\145\1\162\1\164\1\151\1\145\1\164\1"+
        "\172\1\151\2\uffff\1\151\1\141\1\145\1\164\1\172\1\147\2\uffff\1"+
        "\151\1\162\1\uffff\2\154\1\147\1\uffff\1\172\1\145\1\uffff\1\145"+
        "\1\uffff\2\172\1\uffff\1\144\1\165\1\172\1\165\1\uffff\1\145\1\151"+
        "\1\156\1\143\1\172\1\154\1\uffff\1\172\1\141\1\154\2\uffff\1\166"+
        "\1\uffff\1\147\1\172\1\154\1\172\1\171\1\144\1\uffff\1\156\1\154"+
        "\1\172\1\uffff\3\172\1\164\1\151\1\154\1\172\1\164\2\151\1\145\1"+
        "\166\1\171\1\uffff\1\145\1\165\1\147\1\145\1\172\1\uffff\1\157\1"+
        "\171\1\166\1\157\1\62\1\156\1\145\1\166\1\uffff\1\143\1\164\2\172"+
        "\1\156\1\172\1\141\1\151\1\145\1\143\1\172\1\165\1\155\2\uffff\1"+
        "\172\1\162\1\172\1\uffff\1\145\1\uffff\1\165\1\137\1\uffff\2\172"+
        "\1\137\1\151\1\172\1\164\1\156\1\143\1\156\1\151\1\164\1\162\2\172"+
        "\1\151\1\172\2\uffff\1\163\1\172\1\164\1\156\1\145\1\163\1\151\1"+
        "\164\1\156\1\172\1\uffff\1\151\1\uffff\1\141\1\143\1\157\1\156\1"+
        "\uffff\1\162\2\141\1\156\1\uffff\1\156\1\141\1\166\1\uffff\1\145"+
        "\1\uffff\1\156\1\144\2\172\2\uffff\1\145\1\151\1\144\1\172\1\uffff"+
        "\1\162\1\160\1\155\1\147\1\uffff\1\172\1\154\1\uffff\1\172\1\164"+
        "\1\172\1\142\1\uffff\1\145\1\160\1\155\1\uffff\1\164\1\145\2\uffff"+
        "\1\145\1\157\1\162\1\151\1\172\1\145\1\172\1\uffff\1\154\1\172\2"+
        "\uffff\1\172\1\157\1\172\1\157\1\172\1\uffff\1\156\1\172\1\151\1"+
        "\143\1\157\1\145\1\163\1\172\1\137\1\uffff\2\145\1\141\1\157\1\151"+
        "\2\172\1\uffff\1\156\1\163\1\172\1\154\1\172\1\uffff\1\145\1\156"+
        "\1\172\1\162\1\uffff\1\172\1\142\1\144\2\172\1\141\3\172\1\uffff"+
        "\1\164\1\145\1\141\1\156\2\uffff\1\160\1\uffff\1\172\1\145\1\150"+
        "\1\172\2\164\1\145\1\156\1\172\1\uffff\1\157\1\172\2\uffff\1\154"+
        "\2\172\2\uffff\2\172\1\156\2\uffff\1\156\1\145\2\172\1\147\1\uffff"+
        "\1\172\1\uffff\1\150\1\154\1\172\1\154\2\143\1\172\1\157\2\156\1"+
        "\151\1\145\1\uffff\1\164\1\157\1\164\1\156\1\171\1\uffff\1\172\1"+
        "\155\3\172\1\145\1\uffff\1\163\1\137\2\uffff\1\172\1\145\1\uffff"+
        "\1\145\1\164\1\172\1\144\1\172\1\uffff\1\145\1\uffff\1\154\1\172"+
        "\1\141\1\172\1\uffff\1\145\1\uffff\1\172\1\163\1\151\1\147\1\151"+
        "\3\uffff\1\172\1\uffff\1\145\1\157\1\172\1\uffff\1\151\1\156\1\157"+
        "\1\172\1\145\1\172\1\147\1\162\2\172\1\uffff\1\156\1\157\2\171\1"+
        "\147\1\165\1\172\1\164\1\172\1\145\1\164\1\172\2\uffff\1\143\1\uffff"+
        "\1\172\1\144\1\142\1\166\1\172\1\153\1\uffff\1\156\1\142\1\uffff"+
        "\1\165\1\151\1\uffff\1\156\1\162\1\163\2\uffff\1\156\1\172\1\uffff"+
        "\1\171\1\172\1\145\1\172\1\166\1\145\1\172\2\uffff\1\156\1\uffff"+
        "\1\156\1\141\1\143\1\141\1\uffff\1\145\1\151\1\160\1\163\1\156\1"+
        "\151\1\164\1\uffff\1\143\2\164\1\162\1\147\1\172\1\162\1\155\1\145"+
        "\1\141\1\155\1\145\1\146\2\172\2\uffff\1\144\1\164\1\145\1\uffff"+
        "\2\172\1\160\1\172\1\uffff\1\145\1\uffff\1\172\1\uffff\1\165\1\162"+
        "\1\145\1\142\1\145\1\172\2\156\1\151\1\166\1\141\1\172\1\uffff\1"+
        "\151\2\uffff\1\156\1\uffff\1\156\1\uffff\1\141\1\uffff\1\157\1\156"+
        "\1\164\1\156\2\172\1\uffff\1\146\1\144\1\172\1\155\1\160\1\164\2"+
        "\uffff\1\165\1\141\1\164\1\uffff\1\156\1\151\1\uffff\1\172\1\162"+
        "\1\147\1\uffff\1\151\1\uffff\1\172\1\154\1\172\2\uffff\1\156\3\uffff"+
        "\1\157\1\172\1\164\1\151\1\162\1\uffff\1\146\1\143\1\172\1\uffff"+
        "\1\172\1\151\1\137\1\147\1\uffff\1\156\1\uffff\1\172\4\uffff\1\147"+
        "\1\172\1\144\2\uffff\1\172\1\uffff\2\171\1\uffff\1\172\1\145\1\164"+
        "\1\uffff\1\162\1\147\1\164\1\141\1\172\1\151\1\156\1\145\1\164\1"+
        "\172\1\uffff\1\145\3\uffff\2\172\1\164\1\uffff\3\172\1\145\1\172"+
        "\1\uffff\2\172\1\uffff\1\162\1\uffff\1\156\1\uffff\1\172\1\156\1"+
        "\172\1\164\1\uffff\1\162\1\156\1\uffff\1\154\1\162\1\147\1\156\1"+
        "\uffff\1\172\1\uffff\2\145\2\uffff\1\172\1\160\3\172\1\171\1\156"+
        "\1\uffff\1\145\1\uffff\2\172\1\uffff\1\151\1\uffff\1\137\1\154\1"+
        "\145\1\uffff\1\163\1\172\1\164\1\145\1\163\1\143\1\164\1\145\1\157"+
        "\3\141\1\172\1\uffff\1\172\1\uffff\1\165\1\145\1\172\1\uffff\1\164"+
        "\1\141\1\155\1\150\1\164\1\172\1\156\1\164\1\137\1\147\1\163\2\172"+
        "\2\151\1\155\1\172\1\uffff\1\163\1\171\1\160\1\137\1\155\1\160\1"+
        "\154\1\151\2\uffff\1\172\1\164\1\144\2\uffff\1\172\1\uffff\1\172"+
        "\1\uffff\1\143\2\172\1\145\1\172\1\uffff\1\164\1\172\1\143\1\145"+
        "\1\164\1\uffff\1\172\1\144\1\172\1\155\1\156\1\164\1\157\1\172\2"+
        "\uffff\1\165\1\172\1\uffff\1\160\1\172\1\163\1\145\1\157\1\162\1"+
        "\157\1\163\1\141\1\155\1\172\1\141\1\164\1\uffff\1\172\1\164\1\147"+
        "\1\uffff\1\145\1\uffff\1\153\1\162\1\uffff\1\145\1\163\1\145\1\165"+
        "\1\164\2\uffff\1\143\1\151\2\172\1\uffff\1\172\1\uffff\1\172\1\uffff"+
        "\2\172\1\uffff\1\163\4\172\1\142\1\uffff\1\166\2\172\1\141\1\uffff"+
        "\1\172\2\uffff\2\145\1\143\3\uffff\1\172\3\uffff\1\171\1\147\1\uffff"+
        "\1\147\1\uffff\1\171\2\172\1\145\1\141\2\172\1\uffff\1\163\1\172"+
        "\1\uffff\1\145\3\uffff\2\172\1\164\1\162\2\uffff\1\163\1\156\1\163"+
        "\1\145\1\172\1\143\2\141\1\uffff\1\172\1\162\1\145\3\172\1\160\2"+
        "\155\1\142\2\uffff\1\163\1\172\1\uffff\1\172\1\155\2\145\1\141\1"+
        "\uffff\1\164\1\147\1\151\1\157\1\172\1\145\2\uffff\1\171\1\156\1"+
        "\172\2\157\1\172\1\uffff\2\141\1\143\2\172\1\155\1\145\1\154\1\137"+
        "\1\156\1\uffff\1\145\1\172\2\uffff\1\153\2\uffff\1\162\1\uffff\2"+
        "\172\1\uffff\2\172\1\151\1\uffff\1\151\1\uffff\1\163\1\145\2\172"+
        "\1\162\1\uffff\2\156\1\uffff\1\172\1\uffff\1\172\1\164\1\146\1\154"+
        "\1\155\1\141\1\154\1\145\1\164\1\145\1\uffff\1\155\1\171\1\uffff"+
        "\2\163\1\172\1\150\1\151\4\172\1\164\1\143\1\156\1\172\1\163\1\156"+
        "\6\uffff\1\172\1\uffff\1\157\1\uffff\1\164\2\uffff\1\154\1\145\2"+
        "\uffff\1\164\1\uffff\1\164\1\170\1\156\1\164\1\uffff\1\172\1\151"+
        "\1\164\2\172\1\uffff\1\163\1\uffff\1\137\1\156\2\uffff\1\172\1\uffff"+
        "\1\172\2\uffff\1\172\1\143\1\172\1\147\1\141\1\145\1\143\1\161\1"+
        "\172\1\uffff\1\150\1\155\1\164\1\uffff\1\172\1\162\3\uffff\1\172"+
        "\1\160\1\145\1\154\1\145\2\uffff\1\145\1\172\1\155\1\154\1\171\1"+
        "\172\1\157\1\162\1\uffff\1\164\1\160\1\141\1\uffff\2\156\1\uffff"+
        "\1\172\1\155\1\164\1\150\2\uffff\1\157\1\151\1\172\1\145\1\143\1"+
        "\145\1\144\1\uffff\1\145\1\172\4\uffff\1\157\1\156\1\141\1\143\1"+
        "\141\1\172\1\uffff\1\156\1\uffff\1\172\1\163\1\172\1\165\1\143\2"+
        "\uffff\1\145\1\141\2\145\1\156\1\154\1\162\1\150\1\172\1\145\1\172"+
        "\2\145\1\164\1\uffff\1\172\1\156\4\uffff\2\151\1\143\1\uffff\1\172"+
        "\1\164\1\uffff\1\156\1\171\1\145\1\172\1\151\1\141\1\164\1\147\1"+
        "\145\1\uffff\1\156\1\150\2\uffff\1\160\1\157\1\141\1\162\1\144\1"+
        "\153\3\uffff\1\145\1\uffff\1\172\1\162\1\156\1\164\1\154\1\uffff"+
        "\2\145\1\141\1\uffff\1\172\1\uffff\2\172\1\145\1\162\1\172\1\uffff"+
        "\1\141\1\157\1\160\1\uffff\1\156\1\151\1\172\1\145\1\155\2\172\1"+
        "\uffff\1\145\1\141\1\145\1\165\1\156\1\uffff\1\172\1\157\1\144\1"+
        "\172\1\164\1\uffff\1\156\1\147\1\155\1\150\1\164\1\uffff\1\141\1"+
        "\uffff\2\141\1\143\1\uffff\1\172\1\155\1\164\1\172\1\165\2\172\1"+
        "\163\1\141\2\172\1\uffff\1\172\1\uffff\1\164\1\156\1\151\1\uffff"+
        "\1\172\1\143\1\163\1\164\1\uffff\1\145\1\172\1\160\1\172\1\uffff"+
        "\1\157\1\155\1\172\2\164\1\147\1\172\1\145\1\144\1\155\1\144\1\157"+
        "\1\151\1\172\1\160\1\uffff\1\144\1\147\1\145\1\163\1\155\1\172\1"+
        "\154\3\uffff\2\172\1\uffff\1\172\1\147\1\145\1\172\1\147\1\uffff"+
        "\1\172\1\145\2\uffff\1\141\1\137\1\172\1\154\1\155\1\162\1\165\1"+
        "\uffff\1\165\1\137\1\uffff\3\172\2\145\1\141\2\155\1\164\1\150\1"+
        "\uffff\1\142\1\151\1\uffff\1\154\2\uffff\1\164\1\146\1\164\3\uffff"+
        "\1\137\1\147\1\143\1\uffff\1\172\2\151\1\162\1\uffff\1\145\1\uffff"+
        "\1\156\1\160\1\uffff\1\150\1\137\1\172\1\uffff\1\143\2\145\1\151"+
        "\1\156\1\163\1\uffff\1\164\1\151\3\164\1\141\1\uffff\1\157\3\uffff"+
        "\2\172\1\uffff\1\151\1\uffff\1\172\1\143\1\162\1\uffff\1\157\1\141"+
        "\1\172\1\164\1\156\1\164\3\uffff\1\172\1\155\1\154\2\145\1\141\2"+
        "\145\1\157\1\164\1\141\1\157\1\151\1\163\1\164\1\163\1\uffff\2\157"+
        "\1\166\4\172\1\154\1\uffff\1\151\2\172\1\156\1\164\1\143\1\172\1"+
        "\156\1\150\1\137\1\141\1\172\1\147\2\uffff\1\156\1\uffff\1\164\2"+
        "\157\1\147\1\172\1\uffff\1\145\1\164\1\171\1\uffff\1\141\1\157\2"+
        "\172\1\154\1\155\1\162\1\156\1\137\1\155\1\162\1\157\2\141\1\143"+
        "\1\150\1\172\2\156\1\141\4\uffff\1\145\1\146\2\uffff\1\141\2\172"+
        "\1\uffff\1\141\1\172\1\154\1\164\1\uffff\2\172\1\151\1\155\1\154"+
        "\1\172\1\uffff\2\172\1\160\1\172\1\147\2\uffff\1\157\1\141\2\172"+
        "\1\164\1\160\1\155\1\156\1\164\1\155\1\150\1\172\1\uffff\2\172\1"+
        "\154\1\156\1\151\1\154\2\uffff\1\154\1\uffff\2\145\2\uffff\1\166"+
        "\1\155\1\154\3\uffff\1\145\1\uffff\1\172\1\147\1\172\2\uffff\1\143"+
        "\1\162\1\172\1\137\1\172\1\141\2\145\3\uffff\1\143\1\137\1\147\1"+
        "\143\1\137\1\151\1\156\1\172\1\145\1\151\1\145\1\137\1\uffff\1\172"+
        "\1\uffff\1\157\1\141\1\uffff\1\147\1\uffff\1\154\1\172\1\155\1\157"+
        "\1\160\1\164\1\137\1\160\1\164\1\147\1\uffff\1\172\1\164\1\144\1"+
        "\163\1\uffff\1\144\1\156\1\162\1\157\1\uffff\1\141\1\144\1\162\1"+
        "\157\1\150\1\163\1\157\1\171\1\164\1\uffff\1\164\1\137\1\157\1\141"+
        "\1\143\1\145\1\163\1\157\1\147\1\172\2\145\1\144\1\172\2\141\1\143"+
        "\1\163\1\172\1\150\1\145\1\142\1\164\1\144\1\155\1\150\1\172\1\146"+
        "\1\165\1\172\1\uffff\1\172\1\143\1\145\1\uffff\1\164\1\155\1\150"+
        "\1\151\1\uffff\1\172\1\144\2\141\3\145\1\uffff\1\157\1\160\2\uffff"+
        "\1\151\1\172\1\141\2\145\1\164\1\uffff\1\172\1\143\1\154\2\172\1"+
        "\155\1\162\1\137\1\163\1\uffff\1\154\1\172\1\155\1\151\1\uffff\1"+
        "\153\1\157\2\uffff\1\141\1\155\1\146\1\151\1\157\1\uffff\1\141\1"+
        "\157\1\172\1\147\1\172\1\137\2\157\1\147\1\172\1\156\1\uffff\1\172"+
        "\1\uffff\1\147\1\162\1\156\1\172\1\uffff\1\172\1\uffff\1\162\1\137"+
        "\1\172\2\uffff\1\157\1\164\1\uffff\1\165\1\171\2\160\1\172\1\145"+
        "\1\uffff\1\172\1\uffff";
    static final String DFA88_acceptS =
        "\40\uffff\1\u0218\1\u0219\1\u021a\1\u021b\1\u021c\1\u021d\1\u021e"+
        "\1\u021f\1\u0220\1\u0221\1\uffff\1\u0224\1\u0225\1\u0226\1\u0227"+
        "\1\uffff\1\u0229\1\u022d\1\u022e\1\uffff\1\u0232\1\uffff\1\u0237"+
        "\2\u0238\5\uffff\1\u023a\1\u023c\1\u0236\1\u023d\1\u023e\1\1\1\2"+
        "\1\u0235\1\u0215\1\u0238\1\u0223\1\u023a\21\uffff\1\u0239\157\uffff"+
        "\1\u0211\1\u0213\1\u0230\1\u0212\1\u0231\1\u0214\1\u022b\1\u0216"+
        "\1\u022c\1\u0217\1\u0233\1\u0218\1\u0219\1\u021a\1\u021b\1\u021c"+
        "\1\u021d\1\u021e\1\u021f\1\u0220\1\u0221\1\u0222\1\u0224\1\u0225"+
        "\1\u0226\1\u0227\1\uffff\1\u0234\1\u0229\1\u022d\1\u022e\1\u022f"+
        "\1\u0232\1\u0236\1\uffff\1\u023d\1\u0237\1\u023c\1\17\16\uffff\1"+
        "\15\21\uffff\1\30\112\uffff\1\u015c\7\uffff\1\166\11\uffff\1\170"+
        "\22\uffff\1\u0174\15\uffff\1\u0095\16\uffff\1\u009b\2\uffff\1\u009e"+
        "\6\uffff\1\u0098\111\uffff\1\u00d8\4\uffff\1\u023b\27\uffff\1\u0228"+
        "\1\u022a\2\uffff\1\11\1\uffff\1\u00ff\1\uffff\1\5\2\uffff\1\7\1"+
        "\10\1\uffff\1\u00f5\1\3\1\uffff\1\u00f9\6\uffff\1\u00f2\7\uffff"+
        "\1\u0102\53\uffff\1\77\24\uffff\1\73\1\uffff\1\u0136\1\116\1\115"+
        "\3\uffff\1\u014e\12\uffff\1\132\21\uffff\1\140\15\uffff\1\165\16"+
        "\uffff\1\u0170\16\uffff\1\u0180\7\uffff\1\u0177\1\uffff\1\u017a"+
        "\1\uffff\1\u017f\5\uffff\1\u0094\14\uffff\1\u0091\7\uffff\1\u00a1"+
        "\4\uffff\1\u0099\3\uffff\1\u0198\13\uffff\1\u01a8\1\u01a6\14\uffff"+
        "\1\u00b0\7\uffff\1\u00b9\17\uffff\1\u00c2\23\uffff\1\u00cb\7\uffff"+
        "\1\u01ec\60\uffff\1\u016c\17\uffff\1\u00fe\12\uffff\1\25\1\uffff"+
        "\1\27\1\u012b\21\uffff\1\u0109\3\uffff\1\56\3\uffff\1\34\1\uffff"+
        "\1\35\1\32\2\uffff\1\37\4\uffff\1\41\15\uffff\1\u0141\10\uffff\1"+
        "\110\5\uffff\1\u0132\1\72\1\uffff\1\u0135\2\uffff\1\122\2\uffff"+
        "\1\124\3\uffff\1\114\1\uffff\1\112\13\uffff\1\134\1\133\1\135\10"+
        "\uffff\1\u015b\3\uffff\1\147\1\150\7\uffff\1\164\14\uffff\1\171"+
        "\2\uffff\1\176\4\uffff\1\u0173\1\uffff\1\u016e\3\uffff\1\177\1\u0181"+
        "\17\uffff\1\u0092\2\uffff\1\u0096\5\uffff\1\u0184\3\uffff\1\u0186"+
        "\3\uffff\1\u009a\1\u00a3\10\uffff\1\u009c\3\uffff\1\u01a1\22\uffff"+
        "\1\u01b1\1\uffff\1\u00ac\11\uffff\1\u01c4\4\uffff\1\u00b8\1\u01b0"+
        "\13\uffff\1\u01d3\1\uffff\1\u01d9\13\uffff\1\u01de\1\u01dc\11\uffff"+
        "\1\u01e3\5\uffff\1\u00c5\5\uffff\1\u00dd\2\uffff\1\u01fc\1\uffff"+
        "\1\u01fd\1\u00d7\2\uffff\1\u01f0\1\uffff\1\u00d3\2\uffff\1\u00e4"+
        "\7\uffff\1\u00de\13\uffff\1\u020b\3\uffff\1\u00ee\4\uffff\1\u00eb"+
        "\1\uffff\1\u020e\1\u00f1\2\uffff\1\u016d\1\u0210\2\uffff\1\12\1"+
        "\6\3\uffff\1\u00f6\6\uffff\1\u00f7\1\21\14\uffff\1\u0128\11\uffff"+
        "\1\u0115\1\u012c\11\uffff\1\u010a\2\uffff\1\40\2\uffff\1\42\1\55"+
        "\1\uffff\1\71\6\uffff\1\102\3\uffff\1\u013e\23\uffff\1\u014a\4\uffff"+
        "\1\u0158\1\uffff\1\127\1\u0151\1\u0153\1\uffff\1\u0152\2\uffff\1"+
        "\u0154\1\u0155\1\126\1\uffff\1\142\1\uffff\1\144\4\uffff\1\u015f"+
        "\2\uffff\1\155\13\uffff\1\154\1\156\6\uffff\1\u0171\1\u0082\2\uffff"+
        "\1\u0176\3\uffff\1\173\2\uffff\1\u008a\1\uffff\1\u0085\2\uffff\1"+
        "\u0083\4\uffff\1\u0182\6\uffff\1\u018b\3\uffff\1\u0183\1\u008f\1"+
        "\uffff\1\u0090\6\uffff\1\u009d\3\uffff\1\u009f\15\uffff\1\u01ad"+
        "\5\uffff\1\u01aa\10\uffff\1\u00ab\15\uffff\1\u00aa\1\u00b5\3\uffff"+
        "\1\u01e5\1\uffff\1\u00cc\2\uffff\1\u01e9\20\uffff\1\u01cb\1\u00bb"+
        "\12\uffff\1\u01e0\1\uffff\1\u01da\4\uffff\1\u00db\4\uffff\1\u00d2"+
        "\3\uffff\1\u0204\1\uffff\1\u00e5\4\uffff\1\u00df\1\u0200\4\uffff"+
        "\1\u0203\4\uffff\1\u00e7\2\uffff\1\u020f\4\uffff\1\u00ec\3\uffff"+
        "\1\16\2\uffff\1\u00f8\1\u00f4\7\uffff\1\u0100\2\uffff\1\24\1\23"+
        "\5\uffff\1\44\11\uffff\1\45\7\uffff\1\70\5\uffff\1\31\4\uffff\1"+
        "\54\11\uffff\1\u013c\4\uffff\1\101\1\107\1\uffff\1\u0145\11\uffff"+
        "\1\120\2\uffff\1\123\1\u014f\3\uffff\1\117\1\u0149\3\uffff\1\130"+
        "\1\u0159\5\uffff\1\141\1\uffff\1\146\14\uffff\1\160\5\uffff\1\u016f"+
        "\6\uffff\1\u0089\2\uffff\1\u0084\1\u0086\2\uffff\1\u0087\5\uffff"+
        "\1\u018c\1\uffff\1\u018a\4\uffff\1\u018e\1\uffff\1\u0194\5\uffff"+
        "\1\u018d\1\u00a0\1\u0190\1\uffff\1\u01a0\3\uffff\1\u0197\12\uffff"+
        "\1\u01af\14\uffff\1\u01bf\1\u00b4\1\uffff\1\u00b3\6\uffff\1\u00b7"+
        "\2\uffff\1\u00d1\2\uffff\1\u00cd\3\uffff\1\u00bd\1\u00bf\2\uffff"+
        "\1\u00be\7\uffff\1\u01dd\1\u01db\1\uffff\1\u01cd\4\uffff\1\u00bc"+
        "\7\uffff\1\u01df\17\uffff\1\u00e2\1\u00e0\3\uffff\1\u00e3\4\uffff"+
        "\1\u00e6\1\uffff\1\u00ed\1\uffff\1\u00ef\14\uffff\1\22\1\uffff\1"+
        "\u0103\1\26\1\uffff\1\u011b\1\uffff\1\43\1\uffff\1\47\6\uffff\1"+
        "\u012a\6\uffff\1\u0108\1\67\3\uffff\1\u0107\2\uffff\1\u0105\3\uffff"+
        "\1\u0112\1\uffff\1\100\3\uffff\1\u013b\1\u013a\1\uffff\1\76\1\75"+
        "\1\u013f\5\uffff\1\111\3\uffff\1\u0144\4\uffff\1\u014c\1\uffff\1"+
        "\121\1\uffff\1\u0150\1\113\1\131\1\u0157\3\uffff\1\u015a\1\u015d"+
        "\1\uffff\1\145\2\uffff\1\u0169\3\uffff\1\161\12\uffff\1\175\1\uffff"+
        "\1\u0175\1\u0172\1\174\3\uffff\1\u0178\5\uffff\1\u0097\2\uffff\1"+
        "\u008d\1\uffff\1\u0185\1\uffff\1\u0195\4\uffff\1\u0191\2\uffff\1"+
        "\u019f\4\uffff\1\u00a7\1\uffff\1\u00a8\2\uffff\1\u01a7\1\u01a5\7"+
        "\uffff\1\u01b6\1\uffff\1\u00b1\2\uffff\1\u01bd\1\uffff\1\u00b2\3"+
        "\uffff\1\u01c8\15\uffff\1\u01d1\1\uffff\1\u01d8\3\uffff\1\u00c3"+
        "\21\uffff\1\u00dc\10\uffff\1\u00e1\1\u0201\3\uffff\1\u00e8\1\u0209"+
        "\1\uffff\1\u00e9\1\uffff\1\u00f0\5\uffff\1\4\5\uffff\1\u00f3\10"+
        "\uffff\1\52\1\u0129\2\uffff\1\u0114\15\uffff\1\33\3\uffff\1\u0137"+
        "\1\uffff\1\u0139\2\uffff\1\103\5\uffff\1\u0143\1\106\4\uffff\1\125"+
        "\1\uffff\1\136\1\uffff\1\143\2\uffff\1\163\6\uffff\1\u0165\4\uffff"+
        "\1\151\1\uffff\1\172\1\u0088\3\uffff\1\u0179\1\u017e\1\u008b\1\uffff"+
        "\1\u0093\1\u0189\1\u008c\2\uffff\1\u00a2\1\uffff\1\u0192\7\uffff"+
        "\1\u01ac\2\uffff\1\u01a9\1\uffff\1\u01b9\1\u01b8\1\u01ba\4\uffff"+
        "\1\u01bb\1\u01be\10\uffff\1\u00b6\12\uffff\1\u01d2\1\u01d5\2\uffff"+
        "\1\u01d4\5\uffff\1\u00c9\6\uffff\1\u00c4\1\u00c7\6\uffff\1\u00d9"+
        "\12\uffff\1\u0202\2\uffff\1\u020a\1\u020c\1\uffff\1\u00ea\1\u016b"+
        "\1\uffff\1\u00fc\2\uffff\1\u00fa\3\uffff\1\u0101\1\uffff\1\u011a"+
        "\5\uffff\1\u0121\2\uffff\1\u011f\1\uffff\1\u012d\12\uffff\1\u012f"+
        "\2\uffff\1\36\17\uffff\1\u014d\1\u014b\1\u0156\1\137\1\u015e\1\u0164"+
        "\1\uffff\1\162\1\uffff\1\153\1\uffff\1\u0161\1\u0162\2\uffff\1\167"+
        "\1\152\1\uffff\1\u0081\4\uffff\1\u0188\5\uffff\1\u00a4\1\uffff\1"+
        "\u00a5\2\uffff\1\u01ab\1\u00a6\1\uffff\1\u00a9\1\uffff\1\u01b3\1"+
        "\u01b2\11\uffff\1\u00ad\3\uffff\1\u01c9\2\uffff\1\u00cf\1\u01e4"+
        "\1\u01e8\5\uffff\1\u00c0\1\u00ba\10\uffff\1\u01eb\3\uffff\1\u01f8"+
        "\2\uffff\1\u01f7\4\uffff\1\u01ef\1\u00d4\7\uffff\1\u01fe\2\uffff"+
        "\1\u00fd\1\u00fb\1\14\1\13\6\uffff\1\46\1\uffff\1\50\5\uffff\1\u012e"+
        "\1\u0116\16\uffff\1\u010c\2\uffff\1\u0138\1\u013d\1\u0140\1\74\3"+
        "\uffff\1\105\2\uffff\1\u0167\11\uffff\1\u0187\2\uffff\1\u0196\1"+
        "\u0193\6\uffff\1\u01ae\1\u01b7\1\u01b4\1\uffff\1\u00ae\5\uffff\1"+
        "\u01bc\3\uffff\1\u01ca\1\uffff\1\u01e6\5\uffff\1\u01cf\3\uffff\1"+
        "\u00ca\7\uffff\1\u01f6\5\uffff\1\u01ee\5\uffff\1\u016a\5\uffff\1"+
        "\u011c\1\uffff\1\u0123\3\uffff\1\51\13\uffff\1\u0131\1\uffff\1\u0104"+
        "\3\uffff\1\u0111\4\uffff\1\u0142\4\uffff\1\157\17\uffff\1\u00af"+
        "\7\uffff\1\u00d0\1\u01e7\1\u01d7\2\uffff\1\u01cc\5\uffff\1\u00ce"+
        "\2\uffff\1\u00da\1\u01f5\7\uffff\1\u01ed\2\uffff\1\u01ff\12\uffff"+
        "\1\u0127\2\uffff\1\57\1\uffff\1\62\1\64\3\uffff\1\66\1\61\1\u0106"+
        "\3\uffff\1\u0113\4\uffff\1\u0168\1\uffff\1\u0166\2\uffff\1\u017d"+
        "\3\uffff\1\u018f\6\uffff\1\u01a4\6\uffff\1\u01c6\1\uffff\1\u01d6"+
        "\1\u00c1\1\u01d0\2\uffff\1\u00c8\1\uffff\1\u00c6\3\uffff\1\u01fa"+
        "\6\uffff\1\u020d\1\20\1\53\20\uffff\1\104\10\uffff\1\u008e\15\uffff"+
        "\1\u01ce\1\u01e2\1\uffff\1\u01e1\5\uffff\1\u00d5\3\uffff\1\u0118"+
        "\24\uffff\1\u0163\1\u0160\1\u0080\1\u017b\2\uffff\1\u0199\1\u019a"+
        "\3\uffff\1\u01b5\4\uffff\1\u01c7\6\uffff\1\u01fb\5\uffff\1\u0122"+
        "\1\u0125\14\uffff\1\u010b\6\uffff\1\u01a2\1\u01a3\1\uffff\1\u01c1"+
        "\2\uffff\1\u01c5\1\u01ea\3\uffff\1\u01f9\1\u00d6\1\u01f1\1\uffff"+
        "\1\u0119\3\uffff\1\u0120\1\u011e\10\uffff\1\u010d\1\u0146\1\u0147"+
        "\14\uffff\1\u0117\1\uffff\1\u0126\2\uffff\1\63\1\uffff\1\u0130\12"+
        "\uffff\1\u01c3\4\uffff\1\u0124\4\uffff\1\u010f\11\uffff\1\u01f4"+
        "\36\uffff\1\u0110\3\uffff\1\u017c\4\uffff\1\u01c0\7\uffff\1\u011d"+
        "\2\uffff\1\u010e\1\u0148\6\uffff\1\u01c2\11\uffff\1\u0133\4\uffff"+
        "\1\u01f2\2\uffff\1\u0206\1\u0207\5\uffff\1\u019d\13\uffff\1\u01f3"+
        "\1\uffff\1\u0208\4\uffff\1\u019e\1\uffff\1\u0205\3\uffff\1\u019c"+
        "\1\u019b\2\uffff\1\u0134\6\uffff\1\60\1\uffff\1\65";
    static final String DFA88_specialS =
        "\1\0\u0ba3\uffff}>";
    static final String[] DFA88_transitionS = {
            "\1\102\37\65\1\77\1\42\1\62\2\102\1\44\1\46\1\63\1\50\1\51\1"+
            "\47\1\52\1\64\1\2\1\37\1\1\1\67\11\70\1\36\1\61\1\33\1\53\1"+
            "\34\1\57\1\43\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
            "\31\1\15\1\16\1\17\1\20\1\21\1\76\1\22\1\23\1\24\1\25\1\26\1"+
            "\27\1\73\1\30\1\32\1\56\1\66\1\60\1\45\1\71\1\40\1\3\1\72\1"+
            "\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\31\1\15\1\16\1\74\1\20"+
            "\1\21\1\76\1\22\1\23\1\24\1\75\1\26\1\27\1\76\1\30\1\32\1\54"+
            "\1\35\1\55\1\41\1\102\40\101\u0210\102\120\100\u1d00\102\160"+
            "\100\u0120\102\u02d0\100\u00a0\102\u0700\100\u21c0\102\100\100"+
            "\ub1f0\102\20\100",
            "\1\103\4\uffff\1\104",
            "\1\104\2\uffff\12\107\4\uffff\1\106",
            "\1\123\1\117\1\120\1\uffff\1\124\5\uffff\1\115\1\uffff\1\116"+
            "\3\uffff\1\113\1\121\1\112\1\122\1\114\13\uffff\1\123\1\117"+
            "\1\120\1\uffff\1\124\5\uffff\1\115\1\uffff\1\116\3\uffff\1\113"+
            "\1\121\1\112\1\122\1\114",
            "\1\133\35\uffff\1\125\3\uffff\1\127\2\uffff\1\130\2\uffff\1"+
            "\131\2\uffff\1\126\6\uffff\1\132\13\uffff\1\125\3\uffff\1\127"+
            "\2\uffff\1\130\2\uffff\1\131\2\uffff\1\126\6\uffff\1\132",
            "\1\137\3\uffff\1\135\2\uffff\1\140\3\uffff\1\141\2\uffff\1"+
            "\134\2\uffff\1\142\2\uffff\1\136\3\uffff\1\143\7\uffff\1\137"+
            "\3\uffff\1\135\2\uffff\1\140\3\uffff\1\141\2\uffff\1\134\2\uffff"+
            "\1\142\2\uffff\1\136\3\uffff\1\143",
            "\1\151\1\uffff\1\152\1\uffff\1\144\3\uffff\1\150\5\uffff\1"+
            "\145\2\uffff\1\147\6\uffff\1\146\7\uffff\1\151\1\uffff\1\152"+
            "\1\uffff\1\144\3\uffff\1\150\5\uffff\1\145\2\uffff\1\147\6\uffff"+
            "\1\146",
            "\1\157\12\uffff\1\155\1\uffff\1\153\2\uffff\1\161\1\uffff\1"+
            "\160\2\uffff\1\156\1\uffff\1\154\10\uffff\1\157\12\uffff\1\155"+
            "\1\uffff\1\153\2\uffff\1\161\1\uffff\1\160\2\uffff\1\156\1\uffff"+
            "\1\154",
            "\1\170\3\uffff\1\163\3\uffff\1\164\2\uffff\1\167\2\uffff\1"+
            "\162\2\uffff\1\165\2\uffff\1\166\13\uffff\1\170\3\uffff\1\163"+
            "\3\uffff\1\164\2\uffff\1\167\2\uffff\1\162\2\uffff\1\165\2\uffff"+
            "\1\166",
            "\1\171\6\uffff\1\174\2\uffff\1\173\2\uffff\1\172\22\uffff\1"+
            "\171\6\uffff\1\174\2\uffff\1\173\2\uffff\1\172",
            "\1\175\7\uffff\1\177\5\uffff\1\176\21\uffff\1\175\7\uffff\1"+
            "\177\5\uffff\1\176",
            "\1\u0083\10\uffff\1\u0082\1\u0080\4\uffff\1\u0081\20\uffff"+
            "\1\u0083\10\uffff\1\u0082\1\u0080\4\uffff\1\u0081",
            "\1\u0084\37\uffff\1\u0084",
            "\1\u0087\3\uffff\1\u0085\3\uffff\1\u0088\4\uffff\1\u0089\1"+
            "\u0086\21\uffff\1\u0087\3\uffff\1\u0085\3\uffff\1\u0088\4\uffff"+
            "\1\u0089\1\u0086",
            "\1\u008c\3\uffff\1\u008b\3\uffff\1\u008d\5\uffff\1\u008a\5"+
            "\uffff\1\u008e\13\uffff\1\u008c\3\uffff\1\u008b\3\uffff\1\u008d"+
            "\5\uffff\1\u008a\5\uffff\1\u008e",
            "\1\133\31\uffff\1\u0091\1\uffff\1\u0092\1\uffff\1\u0093\11"+
            "\uffff\1\u008f\5\uffff\1\u0090\13\uffff\1\u0091\1\uffff\1\u0092"+
            "\1\uffff\1\u0093\11\uffff\1\u008f\5\uffff\1\u0090",
            "\1\u0099\1\u0094\2\uffff\1\u009d\5\uffff\1\u009c\1\uffff\1"+
            "\u0096\1\uffff\1\u009b\1\uffff\1\u0098\1\uffff\1\u0095\1\u009a"+
            "\1\u0097\13\uffff\1\u0099\1\u0094\2\uffff\1\u009d\5\uffff\1"+
            "\u009c\1\uffff\1\u0096\1\uffff\1\u009b\1\uffff\1\u0098\1\uffff"+
            "\1\u0095\1\u009a\1\u0097",
            "\1\u009e\3\uffff\1\u009f\3\uffff\1\u00a2\2\uffff\1\u00a1\2"+
            "\uffff\1\u00a4\2\uffff\1\u00a0\2\uffff\1\u00a3\13\uffff\1\u009e"+
            "\3\uffff\1\u009f\3\uffff\1\u00a2\2\uffff\1\u00a1\2\uffff\1\u00a4"+
            "\2\uffff\1\u00a0\2\uffff\1\u00a3",
            "\1\u00a7\3\uffff\1\u00a5\3\uffff\1\u00a8\5\uffff\1\u00a6\21"+
            "\uffff\1\u00a7\3\uffff\1\u00a5\3\uffff\1\u00a8\5\uffff\1\u00a6",
            "\1\u00ad\1\uffff\1\u00ae\1\uffff\1\u00ab\2\uffff\1\u00b4\1"+
            "\u00ac\3\uffff\1\u00b1\1\uffff\1\u00b2\1\u00b3\1\u00af\2\uffff"+
            "\1\u00aa\1\u00b0\3\uffff\1\u00a9\7\uffff\1\u00ad\1\uffff\1\u00ae"+
            "\1\uffff\1\u00ab\2\uffff\1\u00b4\1\u00ac\3\uffff\1\u00b1\1\uffff"+
            "\1\u00b2\1\u00b3\1\u00af\2\uffff\1\u00aa\1\u00b0\3\uffff\1\u00a9",
            "\1\u00b9\3\uffff\1\u00b6\2\uffff\1\u00ba\1\u00b8\5\uffff\1"+
            "\u00bb\2\uffff\1\u00b5\6\uffff\1\u00b7\7\uffff\1\u00b9\3\uffff"+
            "\1\u00b6\2\uffff\1\u00ba\1\u00b8\5\uffff\1\u00bb\2\uffff\1\u00b5"+
            "\6\uffff\1\u00b7",
            "\1\u00bd\47\uffff\1\u00be\1\uffff\1\u00bf\2\uffff\1\u00bc\32"+
            "\uffff\1\u00be\1\uffff\1\u00bf\2\uffff\1\u00bc",
            "\1\u00c0\7\uffff\1\u00c1\5\uffff\1\u00c2\21\uffff\1\u00c0\7"+
            "\uffff\1\u00c1\5\uffff\1\u00c2",
            "\1\u00c5\1\u00c4\5\uffff\1\u00c6\2\uffff\1\u00c3\25\uffff\1"+
            "\u00c5\1\u00c4\5\uffff\1\u00c6\2\uffff\1\u00c3",
            "\1\u00c7\37\uffff\1\u00c7",
            "\1\u00c8\3\uffff\1\u00c9\33\uffff\1\u00c8\3\uffff\1\u00c9",
            "\1\u00ca\37\uffff\1\u00ca",
            "\1\u00cc\1\u00cb",
            "\1\u00ce",
            "\1\u00d0",
            "\1\u00d2",
            "\1\u00d4\1\uffff\12\107",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\12\107",
            "",
            "",
            "",
            "",
            "\1\u00e5",
            "",
            "",
            "",
            "\41\133\1\uffff\u00dd\133",
            "",
            "\37\u00ed\140\uffff\40\u00ee",
            "",
            "",
            "",
            "\32\133\6\uffff\32\133",
            "\1\125\3\uffff\1\127\2\uffff\1\130\2\uffff\1\131\2\uffff\1"+
            "\126\6\uffff\1\132\13\uffff\1\125\3\uffff\1\127\2\uffff\1\130"+
            "\2\uffff\1\131\2\uffff\1\126\6\uffff\1\132",
            "\1\133",
            "\1\u0091\1\uffff\1\u0092\1\uffff\1\u0093\11\uffff\1\u008f\5"+
            "\uffff\1\u0090\13\uffff\1\u0091\1\uffff\1\u0092\1\uffff\1\u0093"+
            "\11\uffff\1\u008f\5\uffff\1\u0090",
            "\1\u00be\1\uffff\1\u00bf\2\uffff\1\u00bc\32\uffff\1\u00be\1"+
            "\uffff\1\u00bf\2\uffff\1\u00bc",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\12\111\7\uffff\16\111\1\u00f2\4\111\1\u00f3\6\111\4\uffff"+
            "\1\111\1\uffff\16\111\1\u00f2\4\111\1\u00f3\6\111",
            "\1\u00f4\14\uffff\1\u00f5\22\uffff\1\u00f4\14\uffff\1\u00f5",
            "\1\u00f6\37\uffff\1\u00f6",
            "\1\u00f8\7\uffff\1\u00f7\2\uffff\1\u00f9\24\uffff\1\u00f8\7"+
            "\uffff\1\u00f7\2\uffff\1\u00f9",
            "\1\u00fa\24\uffff\1\u00fb\12\uffff\1\u00fa\24\uffff\1\u00fb",
            "\1\u00fc\37\uffff\1\u00fc",
            "\1\u00fd\2\uffff\1\u00fe\10\uffff\1\u00ff\23\uffff\1\u00fd"+
            "\2\uffff\1\u00fe\10\uffff\1\u00ff",
            "\12\111\7\uffff\2\111\1\u0101\1\111\1\u0104\15\111\1\u0102"+
            "\5\111\1\u0103\1\111\4\uffff\1\111\1\uffff\2\111\1\u0101\1\111"+
            "\1\u0104\15\111\1\u0102\5\111\1\u0103\1\111",
            "\1\u0105\37\uffff\1\u0105",
            "\1\u0106\37\uffff\1\u0106",
            "\1\u0107\37\uffff\1\u0107",
            "\1\u010a\1\u0108\12\uffff\1\u010b\1\uffff\1\u0109\21\uffff"+
            "\1\u010a\1\u0108\12\uffff\1\u010b\1\uffff\1\u0109",
            "\1\u010c\37\uffff\1\u010c",
            "\1\u010e\6\uffff\1\u010d\30\uffff\1\u010e\6\uffff\1\u010d",
            "\1\u010f\37\uffff\1\u010f",
            "\1\u0110\4\uffff\1\u0111\32\uffff\1\u0110\4\uffff\1\u0111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0117\1\u0119\1\uffff\1\u011b\7\uffff\1\u0114\1\u0116\1"+
            "\u0115\3\uffff\1\u0113\2\uffff\1\u011a\1\u0118\12\uffff\1\u0117"+
            "\1\u0119\1\uffff\1\u011b\7\uffff\1\u0114\1\u0116\1\u0115\3\uffff"+
            "\1\u0113\2\uffff\1\u011a\1\u0118",
            "\1\u011c\37\uffff\1\u011c",
            "\1\u011e\12\uffff\1\u011f\4\uffff\1\u011d\17\uffff\1\u011e"+
            "\12\uffff\1\u011f\4\uffff\1\u011d",
            "\1\u0123\5\uffff\1\u0121\1\u0122\1\u0120\27\uffff\1\u0123\5"+
            "\uffff\1\u0121\1\u0122\1\u0120",
            "\1\u0124\3\uffff\1\u0125\33\uffff\1\u0124\3\uffff\1\u0125",
            "\1\u0126\15\uffff\1\u0127\21\uffff\1\u0126\15\uffff\1\u0127",
            "\1\u0129\11\uffff\1\u0128\25\uffff\1\u0129\11\uffff\1\u0128",
            "\1\u012a\37\uffff\1\u012a",
            "\1\u0132\1\uffff\1\u012d\2\uffff\1\u012b\1\u012f\4\uffff\1"+
            "\u0134\1\uffff\1\u012c\1\uffff\1\u0131\1\uffff\1\u012e\1\u0130"+
            "\1\u0133\14\uffff\1\u0132\1\uffff\1\u012d\2\uffff\1\u012b\1"+
            "\u012f\4\uffff\1\u0134\1\uffff\1\u012c\1\uffff\1\u0131\1\uffff"+
            "\1\u012e\1\u0130\1\u0133",
            "\1\u0136\7\uffff\1\u0135\27\uffff\1\u0136\7\uffff\1\u0135",
            "\1\u0137\37\uffff\1\u0137",
            "\1\u0138\37\uffff\1\u0138",
            "\1\u013a\21\uffff\1\u0139\15\uffff\1\u013a\21\uffff\1\u0139",
            "\1\u013b\4\uffff\1\u013c\32\uffff\1\u013b\4\uffff\1\u013c",
            "\1\u013d\37\uffff\1\u013d",
            "\1\u013e\37\uffff\1\u013e",
            "\1\u013f\1\uffff\1\u0140\3\uffff\1\u0142\6\uffff\1\u0141\3"+
            "\uffff\1\u0143\16\uffff\1\u013f\1\uffff\1\u0140\3\uffff\1\u0142"+
            "\6\uffff\1\u0141\3\uffff\1\u0143",
            "\1\u0144\15\uffff\1\u0145\21\uffff\1\u0144\15\uffff\1\u0145",
            "\1\u0146\37\uffff\1\u0146",
            "\1\u0147\37\uffff\1\u0147",
            "\1\u0148\37\uffff\1\u0148",
            "\1\u0149\37\uffff\1\u0149",
            "\1\u014c\5\uffff\1\u014a\2\uffff\1\u014b\26\uffff\1\u014c\5"+
            "\uffff\1\u014a\2\uffff\1\u014b",
            "\1\u014d\37\uffff\1\u014d",
            "\1\u0150\1\uffff\1\u014e\3\uffff\1\u0151\5\uffff\1\u014f\23"+
            "\uffff\1\u0150\1\uffff\1\u014e\3\uffff\1\u0151\5\uffff\1\u014f",
            "\1\u0153\11\uffff\1\u0152\25\uffff\1\u0153\11\uffff\1\u0152",
            "\1\u0154\1\uffff\1\u0156\4\uffff\1\u0155\30\uffff\1\u0154\1"+
            "\uffff\1\u0156\4\uffff\1\u0155",
            "\1\u0157\37\uffff\1\u0157",
            "\1\u0158\37\uffff\1\u0158",
            "\1\u015a\5\uffff\1\u0159\31\uffff\1\u015a\5\uffff\1\u0159",
            "\1\u015b\15\uffff\1\u015c\21\uffff\1\u015b\15\uffff\1\u015c",
            "\12\111\7\uffff\23\111\1\u015e\6\111\4\uffff\1\111\1\uffff"+
            "\23\111\1\u015e\6\111",
            "\1\u015f\37\uffff\1\u015f",
            "\1\u0160\7\uffff\1\u0161\27\uffff\1\u0160\7\uffff\1\u0161",
            "\1\u0162\10\uffff\1\u0163\26\uffff\1\u0162\10\uffff\1\u0163",
            "\1\u0164\37\uffff\1\u0164",
            "\12\111\7\uffff\2\111\1\u016b\1\u016a\4\111\1\u0166\4\111\1"+
            "\u016d\1\u0167\1\u016e\2\111\1\u016c\1\u0169\1\111\1\u0168\4"+
            "\111\4\uffff\1\111\1\uffff\2\111\1\u016b\1\u016a\4\111\1\u0166"+
            "\4\111\1\u016d\1\u0167\1\u016e\2\111\1\u016c\1\u0169\1\111\1"+
            "\u0168\4\111",
            "\12\111\7\uffff\16\111\1\u0170\13\111\4\uffff\1\111\1\uffff"+
            "\16\111\1\u0170\13\111",
            "\1\u0171\2\uffff\1\u0172\34\uffff\1\u0171\2\uffff\1\u0172",
            "\1\u0173\37\uffff\1\u0173",
            "\1\u0174\37\uffff\1\u0174",
            "\1\u0176\4\uffff\1\u0177\7\uffff\1\u0175\7\uffff\1\u0178\12"+
            "\uffff\1\u0176\4\uffff\1\u0177\7\uffff\1\u0175\7\uffff\1\u0178",
            "\1\u0179\3\uffff\1\u017c\6\uffff\1\u017b\10\uffff\1\u017a\13"+
            "\uffff\1\u0179\3\uffff\1\u017c\6\uffff\1\u017b\10\uffff\1\u017a",
            "\1\u017f\3\uffff\1\u0180\1\u017d\1\u017e\31\uffff\1\u017f\3"+
            "\uffff\1\u0180\1\u017d\1\u017e",
            "\1\u0181\37\uffff\1\u0181",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0184\11\uffff\1\u0185\3\uffff\1\u0183\21\uffff\1\u0184"+
            "\11\uffff\1\u0185\3\uffff\1\u0183",
            "\1\u0188\4\uffff\1\u0187\1\u0186\1\u0189\30\uffff\1\u0188\4"+
            "\uffff\1\u0187\1\u0186\1\u0189",
            "\1\u018a\3\uffff\1\u018b\3\uffff\1\u018c\27\uffff\1\u018a\3"+
            "\uffff\1\u018b\3\uffff\1\u018c",
            "\1\u018d\37\uffff\1\u018d",
            "\1\u018f\1\u018e\36\uffff\1\u018f\1\u018e",
            "\12\111\7\uffff\15\111\1\u0193\3\111\1\u0191\1\111\1\u0192"+
            "\6\111\4\uffff\1\111\1\uffff\15\111\1\u0193\3\111\1\u0191\1"+
            "\111\1\u0192\6\111",
            "\1\u0195\1\u0194\36\uffff\1\u0195\1\u0194",
            "\1\u0197\6\uffff\1\u0196\30\uffff\1\u0197\6\uffff\1\u0196",
            "\1\u0198\3\uffff\1\u0199\33\uffff\1\u0198\3\uffff\1\u0199",
            "\1\u019b\3\uffff\1\u019c\1\u019a\32\uffff\1\u019b\3\uffff\1"+
            "\u019c\1\u019a",
            "\1\u019d\37\uffff\1\u019d",
            "\1\u019e\37\uffff\1\u019e",
            "\12\111\7\uffff\13\111\1\u01a0\16\111\4\uffff\1\111\1\uffff"+
            "\13\111\1\u01a0\16\111",
            "\1\u01a1\37\uffff\1\u01a1",
            "\12\111\7\uffff\3\111\1\u01a3\26\111\4\uffff\1\111\1\uffff"+
            "\3\111\1\u01a3\26\111",
            "\1\u01a4\37\uffff\1\u01a4",
            "\1\u01a5\37\uffff\1\u01a5",
            "\1\u01a7\16\uffff\1\u01a6\20\uffff\1\u01a7\16\uffff\1\u01a6",
            "\1\u01a8\37\uffff\1\u01a8",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u01ae\1\u01ac\15\uffff\1\u01ab\1\u01aa\1\u01ad\16\uffff"+
            "\1\u01ae\1\u01ac\15\uffff\1\u01ab\1\u01aa\1\u01ad",
            "\1\u01af\37\uffff\1\u01af",
            "\1\u01b0\3\uffff\1\u01b1\5\uffff\1\u01b2\25\uffff\1\u01b0\3"+
            "\uffff\1\u01b1\5\uffff\1\u01b2",
            "\1\u01b5\17\uffff\1\u01b3\7\uffff\1\u01b4\27\uffff\1\u01b3"+
            "\7\uffff\1\u01b4",
            "\1\u01b6\37\uffff\1\u01b6",
            "\1\u01b7\37\uffff\1\u01b7",
            "\1\u01b9\3\uffff\1\u01b8\33\uffff\1\u01b9\3\uffff\1\u01b8",
            "\1\u01bc\1\uffff\1\u01c2\2\uffff\1\u01bf\1\u01ba\4\uffff\1"+
            "\u01bb\3\uffff\1\u01c1\2\uffff\1\u01bd\1\u01c0\1\uffff\1\u01be"+
            "\12\uffff\1\u01bc\1\uffff\1\u01c2\2\uffff\1\u01bf\1\u01ba\4"+
            "\uffff\1\u01bb\3\uffff\1\u01c1\2\uffff\1\u01bd\1\u01c0\1\uffff"+
            "\1\u01be",
            "\1\u01c4\10\uffff\1\u01c3\1\uffff\1\u01c5\24\uffff\1\u01c4"+
            "\10\uffff\1\u01c3\1\uffff\1\u01c5",
            "\1\u01c6\37\uffff\1\u01c6",
            "\1\u01c7\37\uffff\1\u01c7",
            "\1\u01c9\5\uffff\1\u01c8\31\uffff\1\u01c9\5\uffff\1\u01c8",
            "\1\u01ca\2\uffff\1\u01cc\15\uffff\1\u01cb\6\uffff\1\u01cd\7"+
            "\uffff\1\u01ca\2\uffff\1\u01cc\15\uffff\1\u01cb\6\uffff\1\u01cd",
            "\1\u01ce\1\uffff\1\u01d2\10\uffff\1\u01cf\1\uffff\1\u01d5\1"+
            "\uffff\1\u01d6\1\u01d3\1\u01d1\1\u01d4\1\u01d0\14\uffff\1\u01ce"+
            "\1\uffff\1\u01d2\10\uffff\1\u01cf\1\uffff\1\u01d5\1\uffff\1"+
            "\u01d6\1\u01d3\1\u01d1\1\u01d4\1\u01d0",
            "\1\u01d9\5\uffff\1\u01d7\14\uffff\1\u01d8\14\uffff\1\u01d9"+
            "\5\uffff\1\u01d7\14\uffff\1\u01d8",
            "\1\u01da\37\uffff\1\u01da",
            "\1\u01dc\6\uffff\1\u01db\6\uffff\1\u01dd\2\uffff\1\u01de\16"+
            "\uffff\1\u01dc\6\uffff\1\u01db\6\uffff\1\u01dd\2\uffff\1\u01de",
            "\1\u01df\5\uffff\1\u01e0\31\uffff\1\u01df\5\uffff\1\u01e0",
            "\1\u01e1\12\uffff\1\u01e2\24\uffff\1\u01e1\12\uffff\1\u01e2",
            "\1\u01e3\37\uffff\1\u01e3",
            "\1\u01e5\7\uffff\1\u01e4\27\uffff\1\u01e5\7\uffff\1\u01e4",
            "\1\u01e6\3\uffff\1\u01e7\33\uffff\1\u01e6\3\uffff\1\u01e7",
            "\1\u01e8\37\uffff\1\u01e8",
            "\1\u01e9\3\uffff\1\u01eb\3\uffff\1\u01ec\13\uffff\1\u01ea\13"+
            "\uffff\1\u01e9\3\uffff\1\u01eb\3\uffff\1\u01ec\13\uffff\1\u01ea",
            "\1\u01ed\37\uffff\1\u01ed",
            "\1\u01ee\37\uffff\1\u01ee",
            "\1\u01f0\7\uffff\1\u01ef\27\uffff\1\u01f0\7\uffff\1\u01ef",
            "\1\u01f1\37\uffff\1\u01f1",
            "\1\u01f2\37\uffff\1\u01f2",
            "\12\111\7\uffff\17\111\1\u01f4\12\111\4\uffff\1\111\1\uffff"+
            "\17\111\1\u01f4\12\111",
            "\1\u01f5\3\uffff\1\u01f6\3\uffff\1\u01f7\27\uffff\1\u01f5\3"+
            "\uffff\1\u01f6\3\uffff\1\u01f7",
            "\1\u01f8\4\uffff\1\133",
            "\1\u01ff\1\u01fe\1\u01fc\4\uffff\1\u01fb\1\uffff\1\u01f9\2"+
            "\uffff\1\u01fa\4\uffff\1\u01fd\16\uffff\1\u01ff\1\u01fe\1\u01fc"+
            "\4\uffff\1\u01fb\1\uffff\1\u01f9\2\uffff\1\u01fa\4\uffff\1\u01fd",
            "\1\u0200\13\uffff\1\u0201\23\uffff\1\u0200\13\uffff\1\u0201",
            "\1\u0203\5\uffff\1\u0202\31\uffff\1\u0203\5\uffff\1\u0202",
            "\1\u0204\37\uffff\1\u0204",
            "\1\u0205\37\uffff\1\u0205",
            "\1\u0206\37\uffff\1\u0206",
            "\1\u0209\11\uffff\1\u0207\5\uffff\1\u0208\17\uffff\1\u0209"+
            "\11\uffff\1\u0207\5\uffff\1\u0208",
            "\1\u020a\37\uffff\1\u020a",
            "\1\u020b\37\uffff\1\u020b",
            "\1\u020c\37\uffff\1\u020c",
            "\1\u020d\37\uffff\1\u020d",
            "\1\u020e\37\uffff\1\u020e",
            "\1\u020f\37\uffff\1\u020f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0210\1\u0211",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\37\u00ed\140\uffff\40\u00ee",
            "",
            "",
            "",
            "",
            "\1\u0212\37\uffff\1\u0212",
            "\1\u0213\37\uffff\1\u0213",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0215\37\uffff\1\u0215",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0217\37\uffff\1\u0217",
            "\12\111\7\uffff\16\111\1\u0219\13\111\4\uffff\1\111\1\uffff"+
            "\16\111\1\u0219\13\111",
            "\1\u021a\37\uffff\1\u021a",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u021d\37\uffff\1\u021d",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0220\37\uffff\1\u0220",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0223\3\uffff\1\u0222\33\uffff\1\u0223\3\uffff\1\u0222",
            "\1\u0224\37\uffff\1\u0224",
            "\1\u0225\37\uffff\1\u0225",
            "\1\u0227\6\uffff\1\u0226\30\uffff\1\u0227\6\uffff\1\u0226",
            "\12\111\7\uffff\16\111\1\u0229\13\111\4\uffff\1\111\1\uffff"+
            "\16\111\1\u0229\13\111",
            "\1\u022a\37\uffff\1\u022a",
            "\1\u022b\37\uffff\1\u022b",
            "\1\u022c\37\uffff\1\u022c",
            "\1\u022d\37\uffff\1\u022d",
            "\1\u022e\37\uffff\1\u022e",
            "\1\u022f\37\uffff\1\u022f",
            "\12\111\7\uffff\1\u0231\31\111\4\uffff\1\111\1\uffff\1\u0231"+
            "\31\111",
            "\1\u0232\37\uffff\1\u0232",
            "\1\u0233\37\uffff\1\u0233",
            "\1\u0234\37\uffff\1\u0234",
            "\1\u0235\37\uffff\1\u0235",
            "",
            "\1\u0236\37\uffff\1\u0236",
            "\1\u0237\10\uffff\1\u0238\26\uffff\1\u0237\10\uffff\1\u0238",
            "\1\u023b\11\uffff\1\u0239\4\uffff\1\u023a\1\u023c\1\uffff\1"+
            "\u023d\15\uffff\1\u023b\11\uffff\1\u0239\4\uffff\1\u023a\1\u023c"+
            "\1\uffff\1\u023d",
            "\1\u023e\37\uffff\1\u023e",
            "\1\u023f\37\uffff\1\u023f",
            "\1\u0240\37\uffff\1\u0240",
            "\1\u0241\37\uffff\1\u0241",
            "\1\u0242\37\uffff\1\u0242",
            "\1\u0243\37\uffff\1\u0243",
            "\1\u0244\37\uffff\1\u0244",
            "\1\u0245\1\u0246\36\uffff\1\u0245\1\u0246",
            "\1\u0247\37\uffff\1\u0247",
            "\1\u0248\37\uffff\1\u0248",
            "\1\u0249\37\uffff\1\u0249",
            "\1\u024a\37\uffff\1\u024a",
            "\1\u024c\1\uffff\1\u024b\16\uffff\1\u024d\16\uffff\1\u024c"+
            "\1\uffff\1\u024b\16\uffff\1\u024d",
            "\1\u024e\37\uffff\1\u024e",
            "\1\u024f\10\uffff\1\u0250\26\uffff\1\u024f\10\uffff\1\u0250",
            "\1\u0251\37\uffff\1\u0251",
            "\1\u0252\37\uffff\1\u0252",
            "\1\u0253\20\uffff\1\u0254\16\uffff\1\u0253\20\uffff\1\u0254",
            "\1\u0255\37\uffff\1\u0255",
            "\1\u0256\37\uffff\1\u0256",
            "\1\u0257\37\uffff\1\u0257",
            "\1\u0258\3\uffff\1\u0259\3\uffff\1\u025a\27\uffff\1\u0258\3"+
            "\uffff\1\u0259\3\uffff\1\u025a",
            "\1\u025b\37\uffff\1\u025b",
            "\12\111\7\uffff\10\111\1\u025e\2\111\1\u025d\16\111\4\uffff"+
            "\1\111\1\uffff\10\111\1\u025e\2\111\1\u025d\16\111",
            "\1\u025f\3\uffff\1\u0260\33\uffff\1\u025f\3\uffff\1\u0260",
            "\1\u0261\37\uffff\1\u0261",
            "\1\u0262\37\uffff\1\u0262",
            "\1\u0263\37\uffff\1\u0263",
            "\1\u0264\37\uffff\1\u0264",
            "\1\u0265\37\uffff\1\u0265",
            "\1\u0266\37\uffff\1\u0266",
            "\1\u0267\37\uffff\1\u0267",
            "\1\u0268\37\uffff\1\u0268",
            "\1\u0269\37\uffff\1\u0269",
            "\1\u026a\37\uffff\1\u026a",
            "\1\u026b\14\uffff\1\u026c\3\uffff\1\u026d\16\uffff\1\u026b"+
            "\14\uffff\1\u026c\3\uffff\1\u026d",
            "\1\u026e\37\uffff\1\u026e",
            "\1\u026f\3\uffff\1\u0270\33\uffff\1\u026f\3\uffff\1\u0270",
            "\12\111\7\uffff\22\111\1\u0272\7\111\4\uffff\1\111\1\uffff"+
            "\22\111\1\u0272\7\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0275\2\uffff\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff"+
            "\32\111",
            "\1\u0277\6\uffff\1\u0276\30\uffff\1\u0277\6\uffff\1\u0276",
            "\1\u0278\37\uffff\1\u0278",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u027a\1\u027b\36\uffff\1\u027a\1\u027b",
            "\1\u027c\14\uffff\1\u027d\22\uffff\1\u027c\14\uffff\1\u027d",
            "\1\u027e\37\uffff\1\u027e",
            "\1\u027f\37\uffff\1\u027f",
            "\1\u0280\37\uffff\1\u0280",
            "\1\u0281\37\uffff\1\u0281",
            "\1\u0282\37\uffff\1\u0282",
            "\1\u0283\37\uffff\1\u0283",
            "\12\111\7\uffff\4\111\1\u0285\16\111\1\u0286\6\111\4\uffff"+
            "\1\111\1\uffff\4\111\1\u0285\16\111\1\u0286\6\111",
            "\1\u0287\37\uffff\1\u0287",
            "\1\u0288\37\uffff\1\u0288",
            "\1\u0289\37\uffff\1\u0289",
            "\1\u028a\37\uffff\1\u028a",
            "\1\u028b\37\uffff\1\u028b",
            "\1\u028c\37\uffff\1\u028c",
            "\1\u028d\37\uffff\1\u028d",
            "\1\u028e\37\uffff\1\u028e",
            "\1\u028f\37\uffff\1\u028f",
            "\1\u0290\37\uffff\1\u0290",
            "\1\u0291\37\uffff\1\u0291",
            "\1\u0292\37\uffff\1\u0292",
            "\1\u0293\15\uffff\1\u0294\21\uffff\1\u0293\15\uffff\1\u0294",
            "\1\u0295\37\uffff\1\u0295",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0297\37\uffff\1\u0297",
            "\1\u0298\37\uffff\1\u0298",
            "\1\u0299\37\uffff\1\u0299",
            "",
            "\1\u029a\37\uffff\1\u029a",
            "\1\u029b\37\uffff\1\u029b",
            "\1\u029c\37\uffff\1\u029c",
            "\1\u029d\37\uffff\1\u029d",
            "\1\u029e\37\uffff\1\u029e",
            "\1\u029f\37\uffff\1\u029f",
            "\1\u02a0\37\uffff\1\u02a0",
            "",
            "\1\u02a1\37\uffff\1\u02a1",
            "\1\u02a2\37\uffff\1\u02a2",
            "\1\u02a3\37\uffff\1\u02a3",
            "\12\111\7\uffff\4\111\1\u02a5\11\111\1\u02a6\13\111\4\uffff"+
            "\1\111\1\uffff\4\111\1\u02a5\11\111\1\u02a6\13\111",
            "\1\u02a7\37\uffff\1\u02a7",
            "\1\u02a8\5\uffff\1\u02a9\31\uffff\1\u02a8\5\uffff\1\u02a9",
            "\1\u02ab\16\uffff\1\u02aa\20\uffff\1\u02ab\16\uffff\1\u02aa",
            "\1\u02ac\37\uffff\1\u02ac",
            "\1\u02ad\37\uffff\1\u02ad",
            "",
            "\1\u02ae\37\uffff\1\u02ae",
            "\1\u02af\37\uffff\1\u02af",
            "\1\u02b0\37\uffff\1\u02b0",
            "\1\u02b1\37\uffff\1\u02b1",
            "\1\u02b2\37\uffff\1\u02b2",
            "\12\111\7\uffff\6\111\1\u02b4\23\111\4\uffff\1\111\1\uffff"+
            "\6\111\1\u02b4\23\111",
            "\1\u02b5\37\uffff\1\u02b5",
            "\1\u02b6\37\uffff\1\u02b6",
            "\1\u02b7\37\uffff\1\u02b7",
            "\1\u02b8\37\uffff\1\u02b8",
            "\1\u02b9\37\uffff\1\u02b9",
            "\1\u02ba\37\uffff\1\u02ba",
            "\1\u02bb\37\uffff\1\u02bb",
            "\1\u02bc\37\uffff\1\u02bc",
            "\1\u02bd\37\uffff\1\u02bd",
            "\1\u02be\37\uffff\1\u02be",
            "\1\u02bf\37\uffff\1\u02bf",
            "\1\u02c0\37\uffff\1\u02c0",
            "",
            "\1\u02c1\37\uffff\1\u02c1",
            "\12\111\7\uffff\10\111\1\u02c4\13\111\1\u02c3\5\111\4\uffff"+
            "\1\111\1\uffff\10\111\1\u02c4\13\111\1\u02c3\5\111",
            "\1\u02c5\37\uffff\1\u02c5",
            "\1\u02c6\37\uffff\1\u02c6",
            "\1\u02c7\37\uffff\1\u02c7",
            "\1\u02c8\37\uffff\1\u02c8",
            "\1\u02c9\37\uffff\1\u02c9",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u02cb\37\uffff\1\u02cb",
            "\12\111\7\uffff\25\111\1\u02cd\4\111\4\uffff\1\111\1\uffff"+
            "\25\111\1\u02cd\4\111",
            "\12\111\7\uffff\24\111\1\u02cf\1\u02d0\4\111\4\uffff\1\111"+
            "\1\uffff\24\111\1\u02cf\1\u02d0\4\111",
            "\1\u02d1\37\uffff\1\u02d1",
            "\1\u02d2\37\uffff\1\u02d2",
            "",
            "\1\u02d3\37\uffff\1\u02d3",
            "\12\111\7\uffff\5\111\1\u02d5\24\111\4\uffff\1\111\1\uffff"+
            "\5\111\1\u02d5\24\111",
            "\1\u02d6\37\uffff\1\u02d6",
            "\1\u02d8\2\uffff\1\u02d7\34\uffff\1\u02d8\2\uffff\1\u02d7",
            "\1\u02d9\37\uffff\1\u02d9",
            "\1\u02da\13\uffff\1\u02db\23\uffff\1\u02da\13\uffff\1\u02db",
            "\1\u02dc\37\uffff\1\u02dc",
            "\1\u02dd\37\uffff\1\u02dd",
            "\1\u02de\37\uffff\1\u02de",
            "\1\u02df\37\uffff\1\u02df",
            "\1\u02e0\37\uffff\1\u02e0",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u02e2\37\uffff\1\u02e2",
            "\1\u02e3\37\uffff\1\u02e3",
            "",
            "\1\u02e4\37\uffff\1\u02e4",
            "\1\u02e5\37\uffff\1\u02e5",
            "",
            "\1\u02e6\3\uffff\1\u02e7\33\uffff\1\u02e6\3\uffff\1\u02e7",
            "\1\u02e8\37\uffff\1\u02e8",
            "\12\111\7\uffff\4\111\1\u02ea\12\111\1\u02eb\12\111\4\uffff"+
            "\1\111\1\uffff\4\111\1\u02ea\12\111\1\u02eb\12\111",
            "\1\u02ec\37\uffff\1\u02ec",
            "\1\u02ed\37\uffff\1\u02ed",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u02ef\37\uffff\1\u02ef",
            "\1\u02f0\22\uffff\1\u02f1\14\uffff\1\u02f0\22\uffff\1\u02f1",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u02f3\37\uffff\1\u02f3",
            "\1\u02f4\37\uffff\1\u02f4",
            "\1\u02f5\37\uffff\1\u02f5",
            "\1\u02f6\14\uffff\1\u02f7\2\uffff\1\u02f8\17\uffff\1\u02f6"+
            "\14\uffff\1\u02f7\2\uffff\1\u02f8",
            "\1\u02f9\1\uffff\1\u02fa\6\uffff\1\u02fb\26\uffff\1\u02f9\1"+
            "\uffff\1\u02fa\6\uffff\1\u02fb",
            "\1\u02fc\37\uffff\1\u02fc",
            "\1\u02fd\37\uffff\1\u02fd",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\23\111\1\u0300\6\111\4\uffff\1\111\1\uffff"+
            "\23\111\1\u0300\6\111",
            "\1\u0301\37\uffff\1\u0301",
            "\1\u0302\37\uffff\1\u0302",
            "\1\u0303\37\uffff\1\u0303",
            "\1\u0304\37\uffff\1\u0304",
            "\1\u0306\3\uffff\1\u0305\33\uffff\1\u0306\3\uffff\1\u0305",
            "\1\u0307\7\uffff\1\u0308\27\uffff\1\u0307\7\uffff\1\u0308",
            "\1\u0309\1\u030a\36\uffff\1\u0309\1\u030a",
            "\1\u030b\37\uffff\1\u030b",
            "\12\111\7\uffff\4\111\1\u030d\25\111\4\uffff\1\111\1\uffff"+
            "\4\111\1\u030d\25\111",
            "\1\u030e\37\uffff\1\u030e",
            "\1\u030f\37\uffff\1\u030f",
            "\1\u0310\37\uffff\1\u0310",
            "\1\u0311\37\uffff\1\u0311",
            "\1\u0312\6\uffff\1\u0313\30\uffff\1\u0312\6\uffff\1\u0313",
            "\12\111\7\uffff\22\111\1\u0316\7\111\4\uffff\1\u0315\1\uffff"+
            "\22\111\1\u0316\7\111",
            "\1\u0318\3\uffff\1\u0317\33\uffff\1\u0318\3\uffff\1\u0317",
            "\1\u0319\37\uffff\1\u0319",
            "\1\u031a\37\uffff\1\u031a",
            "\1\u031b\37\uffff\1\u031b",
            "\1\u031d\1\uffff\1\u031c\35\uffff\1\u031d\1\uffff\1\u031c",
            "\1\u031e\37\uffff\1\u031e",
            "\1\u031f\37\uffff\1\u031f",
            "\1\u0320\37\uffff\1\u0320",
            "\1\u0321\37\uffff\1\u0321",
            "\1\u0323\1\u0322\36\uffff\1\u0323\1\u0322",
            "\12\111\7\uffff\22\111\1\u0325\7\111\4\uffff\1\111\1\uffff"+
            "\22\111\1\u0325\7\111",
            "\1\u0327\14\uffff\1\u0326\22\uffff\1\u0327\14\uffff\1\u0326",
            "\1\u0328\4\uffff\1\u032a\1\u0329\31\uffff\1\u0328\4\uffff\1"+
            "\u032a\1\u0329",
            "\1\u032b\37\uffff\1\u032b",
            "\1\u032c\37\uffff\1\u032c",
            "\1\u032d\37\uffff\1\u032d",
            "\1\u032e\37\uffff\1\u032e",
            "\1\u032f\6\uffff\1\u0330\30\uffff\1\u032f\6\uffff\1\u0330",
            "\1\u0331\37\uffff\1\u0331",
            "\1\u0332\37\uffff\1\u0332",
            "\1\u0333\37\uffff\1\u0333",
            "\1\u0334\37\uffff\1\u0334",
            "\1\u0335\37\uffff\1\u0335",
            "\1\u0336\37\uffff\1\u0336",
            "\1\u0337\37\uffff\1\u0337",
            "\12\111\7\uffff\4\111\1\u033b\15\111\1\u0339\3\111\1\u033a"+
            "\3\111\4\uffff\1\111\1\uffff\4\111\1\u033b\15\111\1\u0339\3"+
            "\111\1\u033a\3\111",
            "\1\u033c\37\uffff\1\u033c",
            "\1\u033d\11\uffff\1\u033f\5\uffff\1\u033e\17\uffff\1\u033d"+
            "\11\uffff\1\u033f\5\uffff\1\u033e",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0341\37\uffff\1\u0341",
            "\1\u0342\37\uffff\1\u0342",
            "\1\u0343\37\uffff\1\u0343",
            "\1\u0344\37\uffff\1\u0344",
            "\1\u0345\37\uffff\1\u0345",
            "\1\u0346\37\uffff\1\u0346",
            "\1\u0348\4\uffff\1\u0347\32\uffff\1\u0348\4\uffff\1\u0347",
            "\1\u0349\37\uffff\1\u0349",
            "\1\u034a\37\uffff\1\u034a",
            "\1\u034b\5\uffff\1\u034c\31\uffff\1\u034b\5\uffff\1\u034c",
            "\1\u034d\37\uffff\1\u034d",
            "\1\u034e\37\uffff\1\u034e",
            "\1\u034f\37\uffff\1\u034f",
            "\1\u0350\37\uffff\1\u0350",
            "\1\u0351\37\uffff\1\u0351",
            "\1\u0352\37\uffff\1\u0352",
            "",
            "\1\u0353",
            "\1\u0354\37\uffff\1\u0354",
            "\1\u0355\37\uffff\1\u0355",
            "\1\u0356\37\uffff\1\u0356",
            "",
            "\1\u0357\37\uffff\1\u0357",
            "\1\u0358\3\uffff\1\u0359\33\uffff\1\u0358\3\uffff\1\u0359",
            "\1\u035b\1\uffff\1\u035a\35\uffff\1\u035b\1\uffff\1\u035a",
            "\1\u035d\11\uffff\1\u035c\25\uffff\1\u035d\11\uffff\1\u035c",
            "\1\u035e\37\uffff\1\u035e",
            "\1\u035f\37\uffff\1\u035f",
            "\1\u0360\37\uffff\1\u0360",
            "\1\u0361\37\uffff\1\u0361",
            "\1\u0362\37\uffff\1\u0362",
            "\1\u0363\25\uffff\1\u0365\5\uffff\1\u0364\3\uffff\1\u0363\25"+
            "\uffff\1\u0365",
            "\1\u0366\37\uffff\1\u0366",
            "\1\u0367\37\uffff\1\u0367",
            "\1\u0368\37\uffff\1\u0368",
            "\1\u0369\37\uffff\1\u0369",
            "\1\u036a\37\uffff\1\u036a",
            "\1\u036b\37\uffff\1\u036b",
            "\1\u036c\37\uffff\1\u036c",
            "\1\u036e\3\uffff\1\u036d\33\uffff\1\u036e\3\uffff\1\u036d",
            "\1\u036f\37\uffff\1\u036f",
            "\1\u0370\37\uffff\1\u0370",
            "\12\111\7\uffff\32\111\4\uffff\1\u0372\1\uffff\32\111",
            "\1\u0373\37\uffff\1\u0373",
            "\1\u0374\37\uffff\1\u0374",
            "",
            "",
            "\1\u0375\37\uffff\1\u0375",
            "\1\u0376\37\uffff\1\u0376",
            "",
            "\1\u0377\37\uffff\1\u0377",
            "",
            "\1\u0378\37\uffff\1\u0378",
            "",
            "\1\u0379\37\uffff\1\u0379",
            "\1\u037a\37\uffff\1\u037a",
            "",
            "",
            "\1\u037b\37\uffff\1\u037b",
            "",
            "",
            "\1\u037c\37\uffff\1\u037c",
            "",
            "\1\u037d\37\uffff\1\u037d",
            "\1\u037e\37\uffff\1\u037e",
            "\1\u037f\37\uffff\1\u037f",
            "\1\u0380\37\uffff\1\u0380",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0382\37\uffff\1\u0382",
            "",
            "\1\u0383\37\uffff\1\u0383",
            "\1\u0384\37\uffff\1\u0384",
            "\1\u0385\37\uffff\1\u0385",
            "\1\u0386\37\uffff\1\u0386",
            "\1\u0387\37\uffff\1\u0387",
            "\1\u0388\37\uffff\1\u0388",
            "\1\u0389\37\uffff\1\u0389",
            "",
            "\1\u038a\37\uffff\1\u038a",
            "\1\u038b\37\uffff\1\u038b",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u038d\37\uffff\1\u038d",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\4\111\1\u0390\25\111\4\uffff\1\111\1\uffff"+
            "\4\111\1\u0390\25\111",
            "\1\u0392\3\uffff\1\u0391\33\uffff\1\u0392\3\uffff\1\u0391",
            "\1\u0393\37\uffff\1\u0393",
            "\1\u0394\37\uffff\1\u0394",
            "\1\u0395\37\uffff\1\u0395",
            "\1\u0396\37\uffff\1\u0396",
            "\1\u0398\7\uffff\1\u0397\27\uffff\1\u0398\7\uffff\1\u0397",
            "\1\u0399\37\uffff\1\u0399",
            "\1\u039a\7\uffff\1\u039b\27\uffff\1\u039a\7\uffff\1\u039b",
            "\1\u039c\37\uffff\1\u039c",
            "\1\u039d\37\uffff\1\u039d",
            "\1\u039e\37\uffff\1\u039e",
            "\1\u039f\37\uffff\1\u039f",
            "\1\u03a0",
            "\12\111\7\uffff\10\111\1\u03a2\21\111\4\uffff\1\111\1\uffff"+
            "\10\111\1\u03a2\21\111",
            "\1\u03a3\37\uffff\1\u03a3",
            "\1\u03a4\37\uffff\1\u03a4",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u03a6",
            "\1\u03a7\37\uffff\1\u03a7",
            "\1\u03a8\37\uffff\1\u03a8",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u03aa\37\uffff\1\u03aa",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\4\111\1\u03ad\25\111\4\uffff\1\111\1\uffff"+
            "\4\111\1\u03ad\25\111",
            "\1\u03ae\37\uffff\1\u03ae",
            "\12\111\7\uffff\1\u03b0\31\111\4\uffff\1\u03b1\1\uffff\1\u03b0"+
            "\31\111",
            "\1\u03b2\37\uffff\1\u03b2",
            "\1\u03b3\37\uffff\1\u03b3",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u03b5\37\uffff\1\u03b5",
            "\1\u03b6\37\uffff\1\u03b6",
            "\1\u03b7\37\uffff\1\u03b7",
            "\1\u03b8\37\uffff\1\u03b8",
            "\1\u03b9\37\uffff\1\u03b9",
            "\1\u03ba\37\uffff\1\u03ba",
            "\1\u03bb\37\uffff\1\u03bb",
            "\1\u03bc\37\uffff\1\u03bc",
            "",
            "\1\u03bd\37\uffff\1\u03bd",
            "\1\u03be\37\uffff\1\u03be",
            "\1\u03bf\37\uffff\1\u03bf",
            "\1\u03c0\37\uffff\1\u03c0",
            "\1\u03c1\37\uffff\1\u03c1",
            "\12\111\7\uffff\21\111\1\u03c3\10\111\4\uffff\1\111\1\uffff"+
            "\21\111\1\u03c3\10\111",
            "\1\u03c4\37\uffff\1\u03c4",
            "\1\u03c5\37\uffff\1\u03c5",
            "\1\u03c6\37\uffff\1\u03c6",
            "\1\u03c7\37\uffff\1\u03c7",
            "\1\u03c8\37\uffff\1\u03c8",
            "\1\u03c9\37\uffff\1\u03c9",
            "\1\u03ca\37\uffff\1\u03ca",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u03cc\37\uffff\1\u03cc",
            "\1\u03cd\12\uffff\1\u03ce\24\uffff\1\u03cd\12\uffff\1\u03ce",
            "\1\u03cf\37\uffff\1\u03cf",
            "\1\u03d0\37\uffff\1\u03d0",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\23\111\1\u03d3\6\111\4\uffff\1\111\1\uffff"+
            "\23\111\1\u03d3\6\111",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "",
            "",
            "\1\u03d5\37\uffff\1\u03d5",
            "\1\u03d6\37\uffff\1\u03d6",
            "\12\111\7\uffff\24\111\1\u03d8\5\111\4\uffff\1\111\1\uffff"+
            "\24\111\1\u03d8\5\111",
            "",
            "\1\u03d9\37\uffff\1\u03d9",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u03db\37\uffff\1\u03db",
            "\1\u03dc\37\uffff\1\u03dc",
            "\1\u03dd\37\uffff\1\u03dd",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u03df\37\uffff\1\u03df",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u03e1\37\uffff\1\u03e1",
            "\1\u03e2\37\uffff\1\u03e2",
            "",
            "\1\u03e3\37\uffff\1\u03e3",
            "\1\u03e4\37\uffff\1\u03e4",
            "\1\u03e5\37\uffff\1\u03e5",
            "\1\u03e6\37\uffff\1\u03e6",
            "\1\u03e7\37\uffff\1\u03e7",
            "\1\u03e8\37\uffff\1\u03e8",
            "\1\u03e9\37\uffff\1\u03e9",
            "\1\u03ea\37\uffff\1\u03ea",
            "\1\u03eb\37\uffff\1\u03eb",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u03ef\37\uffff\1\u03ef",
            "\1\u03f0\37\uffff\1\u03f0",
            "\1\u03f1\37\uffff\1\u03f1",
            "\1\u03f2\37\uffff\1\u03f2",
            "\1\u03f3\37\uffff\1\u03f3",
            "",
            "\1\u03f4\37\uffff\1\u03f4",
            "\1\u03f5\37\uffff\1\u03f5",
            "\1\u03f6\37\uffff\1\u03f6",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u03f8\37\uffff\1\u03f8",
            "\1\u03f9\37\uffff\1\u03f9",
            "\1\u03fa\37\uffff\1\u03fa",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\22\111\1\u03fd\7\111\4\uffff\1\111\1\uffff"+
            "\22\111\1\u03fd\7\111",
            "\1\u03fe\37\uffff\1\u03fe",
            "\1\u03ff\37\uffff\1\u03ff",
            "\1\u0400\37\uffff\1\u0400",
            "\1\u0401\37\uffff\1\u0401",
            "",
            "\1\u0403\12\uffff\1\u0402\24\uffff\1\u0403\12\uffff\1\u0402",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0405\37\uffff\1\u0405",
            "\1\u0406\37\uffff\1\u0406",
            "\1\u0407\37\uffff\1\u0407",
            "\1\u0408\37\uffff\1\u0408",
            "\1\u040a\3\uffff\1\u0409\33\uffff\1\u040a\3\uffff\1\u0409",
            "\1\u040b\37\uffff\1\u040b",
            "\1\u040c\37\uffff\1\u040c",
            "\1\u040d\37\uffff\1\u040d",
            "\1\u040e\37\uffff\1\u040e",
            "\1\u040f\37\uffff\1\u040f",
            "\1\u0410\37\uffff\1\u0410",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0412\37\uffff\1\u0412",
            "\1\u0413\37\uffff\1\u0413",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0415\37\uffff\1\u0415",
            "\1\u0416\7\uffff\1\u0417\27\uffff\1\u0416\7\uffff\1\u0417",
            "\1\u0418\37\uffff\1\u0418",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u041a\37\uffff\1\u041a",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u041c\37\uffff\1\u041c",
            "\1\u041d\37\uffff\1\u041d",
            "\1\u041e\37\uffff\1\u041e",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0421\37\uffff\1\u0421",
            "\1\u0422\37\uffff\1\u0422",
            "\1\u0423\37\uffff\1\u0423",
            "\1\u0424\37\uffff\1\u0424",
            "\1\u0425\37\uffff\1\u0425",
            "\1\u0426\37\uffff\1\u0426",
            "\1\u0427\37\uffff\1\u0427",
            "",
            "\1\u0428\37\uffff\1\u0428",
            "",
            "\1\u0429\37\uffff\1\u0429",
            "",
            "\1\u042a\37\uffff\1\u042a",
            "\1\u042b\37\uffff\1\u042b",
            "\1\u042c\37\uffff\1\u042c",
            "\1\u042d\37\uffff\1\u042d",
            "\1\u042e\37\uffff\1\u042e",
            "",
            "\1\u042f\37\uffff\1\u042f",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0431\37\uffff\1\u0431",
            "\1\u0432\37\uffff\1\u0432",
            "\12\111\7\uffff\1\u0434\7\111\1\u0436\11\111\1\u0435\7\111"+
            "\4\uffff\1\111\1\uffff\1\u0434\7\111\1\u0436\11\111\1\u0435"+
            "\7\111",
            "\1\u0437\37\uffff\1\u0437",
            "\1\u0438\37\uffff\1\u0438",
            "\12\111\7\uffff\22\111\1\u043a\7\111\4\uffff\1\111\1\uffff"+
            "\22\111\1\u043a\7\111",
            "\1\u043b\37\uffff\1\u043b",
            "\1\u043c\37\uffff\1\u043c",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u043e\37\uffff\1\u043e",
            "",
            "\1\u043f\37\uffff\1\u043f",
            "\1\u0440\37\uffff\1\u0440",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\13\111\1\u0443\5\111\1\u0444\10\111\4\uffff"+
            "\1\111\1\uffff\13\111\1\u0443\5\111\1\u0444\10\111",
            "\1\u0445\37\uffff\1\u0445",
            "\1\u0446\37\uffff\1\u0446",
            "\1\u0447\37\uffff\1\u0447",
            "",
            "\1\u0448\37\uffff\1\u0448",
            "\1\u0449\37\uffff\1\u0449",
            "\1\u044a\37\uffff\1\u044a",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u044c\37\uffff\1\u044c",
            "\1\u044d\37\uffff\1\u044d",
            "\1\u044e\37\uffff\1\u044e",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0450\37\uffff\1\u0450",
            "\1\u0451\37\uffff\1\u0451",
            "\1\u0452\3\uffff\1\u0453\33\uffff\1\u0452\3\uffff\1\u0453",
            "\1\u0454\37\uffff\1\u0454",
            "\1\u0455\37\uffff\1\u0455",
            "\1\u0456\37\uffff\1\u0456",
            "\1\u0457\37\uffff\1\u0457",
            "\1\u0458\37\uffff\1\u0458",
            "\1\u0459\37\uffff\1\u0459",
            "\1\u045a\37\uffff\1\u045a",
            "",
            "",
            "\1\u045b\37\uffff\1\u045b",
            "\1\u045c\37\uffff\1\u045c",
            "\1\u045d\37\uffff\1\u045d",
            "\1\u045e\37\uffff\1\u045e",
            "\1\u045f",
            "\1\u0460\37\uffff\1\u0460",
            "\1\u0461\37\uffff\1\u0461",
            "\12\111\7\uffff\22\111\1\u0463\7\111\4\uffff\1\111\1\uffff"+
            "\22\111\1\u0463\7\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0466\20\uffff\1\u0465\16\uffff\1\u0466\20\uffff\1\u0465",
            "\1\u0467\37\uffff\1\u0467",
            "\1\u0468\37\uffff\1\u0468",
            "",
            "\1\u0469\37\uffff\1\u0469",
            "\1\u046a\37\uffff\1\u046a",
            "\1\u046b\37\uffff\1\u046b",
            "\1\u046c\37\uffff\1\u046c",
            "\1\u046d\37\uffff\1\u046d",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u046f\22\uffff\1\u0470\14\uffff\1\u046f\22\uffff\1\u0470",
            "",
            "\1\u0471\12\uffff\1\u0472\24\uffff\1\u0471\12\uffff\1\u0472",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0475\37\uffff\1\u0475",
            "\1\u0476\37\uffff\1\u0476",
            "\1\u0477\37\uffff\1\u0477",
            "\1\u0478\37\uffff\1\u0478",
            "\1\u047a\3\uffff\1\u0479\33\uffff\1\u047a\3\uffff\1\u0479",
            "\1\u047b\37\uffff\1\u047b",
            "\1\u047c\37\uffff\1\u047c",
            "\1\u047d\37\uffff\1\u047d",
            "\1\u047e\37\uffff\1\u047e",
            "\1\u047f\37\uffff\1\u047f",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0481\37\uffff\1\u0481",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0483\37\uffff\1\u0483",
            "\1\u0484\37\uffff\1\u0484",
            "\1\u0485\37\uffff\1\u0485",
            "\1\u0486\37\uffff\1\u0486",
            "\1\u0487\37\uffff\1\u0487",
            "\1\u0488\37\uffff\1\u0488",
            "\1\u0489\37\uffff\1\u0489",
            "\1\u048a\37\uffff\1\u048a",
            "\1\u048b\37\uffff\1\u048b",
            "\1\u048c\37\uffff\1\u048c",
            "\1\u048d\37\uffff\1\u048d",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\4\111\1\u0490\25\111\4\uffff\1\111\1\uffff"+
            "\4\111\1\u0490\25\111",
            "\1\u0491\37\uffff\1\u0491",
            "\1\u0492\37\uffff\1\u0492",
            "\1\u0493\37\uffff\1\u0493",
            "\1\u0494\37\uffff\1\u0494",
            "\1\u0495\37\uffff\1\u0495",
            "",
            "\1\u0496\37\uffff\1\u0496",
            "\1\u0497\37\uffff\1\u0497",
            "\1\u0498\37\uffff\1\u0498",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u049a\37\uffff\1\u049a",
            "\1\u049b\37\uffff\1\u049b",
            "\1\u049c\37\uffff\1\u049c",
            "",
            "\1\u049d\37\uffff\1\u049d",
            "\1\u049e\37\uffff\1\u049e",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u04a0\37\uffff\1\u04a0",
            "\1\u04a1\37\uffff\1\u04a1",
            "\1\u04a2\37\uffff\1\u04a2",
            "\1\u04a3\37\uffff\1\u04a3",
            "\1\u04a4\37\uffff\1\u04a4",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u04a6\37\uffff\1\u04a6",
            "\1\u04a7\37\uffff\1\u04a7",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u04a9\37\uffff\1\u04a9",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\22\111\1\u04ac\6\111\1\u04ad\4\uffff\1\111"+
            "\1\uffff\22\111\1\u04ac\6\111\1\u04ad",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u04af\37\uffff\1\u04af",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u04b1\37\uffff\1\u04b1",
            "\1\u04b2\37\uffff\1\u04b2",
            "\12\111\7\uffff\32\111\4\uffff\1\u04b4\1\uffff\32\111",
            "\1\u04b5\37\uffff\1\u04b5",
            "\1\u04b6\37\uffff\1\u04b6",
            "\1\u04b7\37\uffff\1\u04b7",
            "\1\u04b8\37\uffff\1\u04b8",
            "\1\u04b9\37\uffff\1\u04b9",
            "\1\u04ba\37\uffff\1\u04ba",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u04bc\37\uffff\1\u04bc",
            "\1\u04bd\37\uffff\1\u04bd",
            "\1\u04be\37\uffff\1\u04be",
            "\1\u04bf\37\uffff\1\u04bf",
            "\1\u04c0\37\uffff\1\u04c0",
            "\1\u04c1\37\uffff\1\u04c1",
            "\1\u04c2\37\uffff\1\u04c2",
            "\1\u04c3\2\uffff\1\u04c4\34\uffff\1\u04c3\2\uffff\1\u04c4",
            "\1\u04c5\37\uffff\1\u04c5",
            "\1\u04c6\37\uffff\1\u04c6",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u04c8\37\uffff\1\u04c8",
            "\1\u04c9\37\uffff\1\u04c9",
            "\1\u04ca\37\uffff\1\u04ca",
            "\12\111\7\uffff\10\111\1\u04cd\5\111\1\u04cc\13\111\4\uffff"+
            "\1\111\1\uffff\10\111\1\u04cd\5\111\1\u04cc\13\111",
            "\1\u04ce\37\uffff\1\u04ce",
            "\1\u04cf\37\uffff\1\u04cf",
            "\12\111\7\uffff\4\111\1\u04d1\25\111\4\uffff\1\111\1\uffff"+
            "\4\111\1\u04d1\25\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u04d5\6\uffff\1\u04d4\30\uffff\1\u04d5\6\uffff\1\u04d4",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u04d8\37\uffff\1\u04d8",
            "\1\u04d9\37\uffff\1\u04d9",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u04dc\37\uffff\1\u04dc",
            "\1\u04dd\37\uffff\1\u04dd",
            "\1\u04de\37\uffff\1\u04de",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u04e0\37\uffff\1\u04e0",
            "\1\u04e1\37\uffff\1\u04e1",
            "\1\u04e2\37\uffff\1\u04e2",
            "\1\u04e3\37\uffff\1\u04e3",
            "",
            "\1\u04e4\37\uffff\1\u04e4",
            "\1\u04e5\37\uffff\1\u04e5",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u04e8\37\uffff\1\u04e8",
            "\1\u04e9\37\uffff\1\u04e9",
            "\1\u04ea\37\uffff\1\u04ea",
            "\1\u04eb\37\uffff\1\u04eb",
            "\1\u04ec\37\uffff\1\u04ec",
            "\1\u04ed\37\uffff\1\u04ed",
            "",
            "\1\u04ee\37\uffff\1\u04ee",
            "",
            "",
            "\1\u04ef\37\uffff\1\u04ef",
            "\1\u04f0\37\uffff\1\u04f0",
            "\1\u04f1\37\uffff\1\u04f1",
            "\1\u04f2\37\uffff\1\u04f2",
            "\1\u04f3\37\uffff\1\u04f3",
            "\12\111\7\uffff\21\111\1\u04f5\10\111\4\uffff\1\111\1\uffff"+
            "\21\111\1\u04f5\10\111",
            "\1\u04f6\37\uffff\1\u04f6",
            "\1\u04f7\37\uffff\1\u04f7",
            "\1\u04f8\37\uffff\1\u04f8",
            "\1\u04f9\37\uffff\1\u04f9",
            "\1\u04fa\37\uffff\1\u04fa",
            "\1\u04fb\37\uffff\1\u04fb",
            "\1\u04fc\37\uffff\1\u04fc",
            "\1\u04fd",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0500\37\uffff\1\u0500",
            "",
            "\1\u0501\37\uffff\1\u0501",
            "\1\u0502\37\uffff\1\u0502",
            "\1\u0503\37\uffff\1\u0503",
            "",
            "\1\u0504\37\uffff\1\u0504",
            "\1\u0505\37\uffff\1\u0505",
            "\1\u0506\37\uffff\1\u0506",
            "",
            "\1\u0507\37\uffff\1\u0507",
            "",
            "",
            "\1\u0508\37\uffff\1\u0508",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u050a\37\uffff\1\u050a",
            "\1\u050b\37\uffff\1\u050b",
            "\12\111\7\uffff\4\111\1\u050d\25\111\4\uffff\1\111\1\uffff"+
            "\4\111\1\u050d\25\111",
            "\1\u050e",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0511\37\uffff\1\u0511",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0513\37\uffff\1\u0513",
            "\1\u0514\37\uffff\1\u0514",
            "\1\u0515\37\uffff\1\u0515",
            "\1\u0516",
            "\1\u0517\37\uffff\1\u0517",
            "\1\u0518\37\uffff\1\u0518",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u051a\37\uffff\1\u051a",
            "\1\u051b\37\uffff\1\u051b",
            "",
            "\1\u051c\37\uffff\1\u051c",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u051e\37\uffff\1\u051e",
            "\1\u051f\37\uffff\1\u051f",
            "\1\u0520\37\uffff\1\u0520",
            "\1\u0521\37\uffff\1\u0521",
            "\1\u0522\37\uffff\1\u0522",
            "\1\u0523\37\uffff\1\u0523",
            "",
            "\1\u0524\37\uffff\1\u0524",
            "\1\u0525\37\uffff\1\u0525",
            "\1\u0526\37\uffff\1\u0526",
            "\1\u0527\37\uffff\1\u0527",
            "\1\u0528\37\uffff\1\u0528",
            "",
            "",
            "\1\u0529\37\uffff\1\u0529",
            "",
            "\1\u052a\37\uffff\1\u052a",
            "\1\u052b\37\uffff\1\u052b",
            "",
            "\1\u052c\37\uffff\1\u052c",
            "\1\u052d\37\uffff\1\u052d",
            "",
            "\1\u052e\37\uffff\1\u052e",
            "\1\u052f\37\uffff\1\u052f",
            "\1\u0530\37\uffff\1\u0530",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0532\37\uffff\1\u0532",
            "\1\u0533\37\uffff\1\u0533",
            "\1\u0534\37\uffff\1\u0534",
            "\1\u0535\37\uffff\1\u0535",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0537\37\uffff\1\u0537",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u053b\37\uffff\1\u053b",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "",
            "",
            "\1\u053d\37\uffff\1\u053d",
            "\1\u053e\37\uffff\1\u053e",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0542\37\uffff\1\u0542",
            "\12\111\7\uffff\4\111\1\u0544\25\111\4\uffff\1\111\1\uffff"+
            "\4\111\1\u0544\25\111",
            "\12\111\7\uffff\10\111\1\u0546\21\111\4\uffff\1\111\1\uffff"+
            "\10\111\1\u0546\21\111",
            "",
            "\1\u0547\37\uffff\1\u0547",
            "\1\u0548\37\uffff\1\u0548",
            "\1\u0549\37\uffff\1\u0549",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u054b\37\uffff\1\u054b",
            "\1\u054c\37\uffff\1\u054c",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u054e\37\uffff\1\u054e",
            "\1\u0550\14\uffff\1\u0551\2\uffff\1\u054f\17\uffff\1\u0550"+
            "\14\uffff\1\u0551\2\uffff\1\u054f",
            "\1\u0552\37\uffff\1\u0552",
            "",
            "\1\u0553\37\uffff\1\u0553",
            "\1\u0554\37\uffff\1\u0554",
            "\1\u0555\37\uffff\1\u0555",
            "\1\u0556\37\uffff\1\u0556",
            "\1\u0557\37\uffff\1\u0557",
            "\1\u0558\37\uffff\1\u0558",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u055b\37\uffff\1\u055b",
            "\1\u055c\37\uffff\1\u055c",
            "\1\u055d\37\uffff\1\u055d",
            "\1\u055e\37\uffff\1\u055e",
            "",
            "\1\u055f\37\uffff\1\u055f",
            "\1\u0560\37\uffff\1\u0560",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\23\111\1\u0563\6\111\4\uffff\1\111\1\uffff"+
            "\23\111\1\u0563\6\111",
            "\1\u0564\37\uffff\1\u0564",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0566\37\uffff\1\u0566",
            "",
            "\1\u0567\37\uffff\1\u0567",
            "\1\u0568\37\uffff\1\u0568",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "",
            "\1\u056a\37\uffff\1\u056a",
            "\1\u056b\37\uffff\1\u056b",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u056d\37\uffff\1\u056d",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u056f\37\uffff\1\u056f",
            "\1\u0570\37\uffff\1\u0570",
            "\12\111\7\uffff\4\111\1\u0572\25\111\4\uffff\1\111\1\uffff"+
            "\4\111\1\u0572\25\111",
            "\1\u0573\37\uffff\1\u0573",
            "\1\u0574\37\uffff\1\u0574",
            "\1\u0575\37\uffff\1\u0575",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0577\37\uffff\1\u0577",
            "\1\u0578\37\uffff\1\u0578",
            "\1\u0579\37\uffff\1\u0579",
            "",
            "\1\u057a\37\uffff\1\u057a",
            "\1\u057b\37\uffff\1\u057b",
            "",
            "\1\u057c\37\uffff\1\u057c",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u057e\37\uffff\1\u057e",
            "\1\u057f\37\uffff\1\u057f",
            "\1\u0580\37\uffff\1\u0580",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\u0583\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0585\37\uffff\1\u0585",
            "\1\u0586\13\uffff\1\u0587\23\uffff\1\u0586",
            "\1\u0588\37\uffff\1\u0588",
            "",
            "",
            "\1\u0589\37\uffff\1\u0589",
            "\1\u058a\37\uffff\1\u058a",
            "\12\111\7\uffff\10\111\1\u058c\21\111\4\uffff\1\111\1\uffff"+
            "\10\111\1\u058c\21\111",
            "\1\u058d\37\uffff\1\u058d",
            "\1\u058e\37\uffff\1\u058e",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0590\37\uffff\1\u0590",
            "\1\u0591\37\uffff\1\u0591",
            "",
            "\1\u0592\37\uffff\1\u0592",
            "\1\u0593\37\uffff\1\u0593",
            "\1\u0595\22\uffff\1\u0594\14\uffff\1\u0595\22\uffff\1\u0594",
            "",
            "\1\u0596\37\uffff\1\u0596",
            "\1\u0597\37\uffff\1\u0597",
            "\1\u0598\37\uffff\1\u0598",
            "\1\u0599\37\uffff\1\u0599",
            "\1\u059a\37\uffff\1\u059a",
            "\1\u059b\37\uffff\1\u059b",
            "\1\u059c\37\uffff\1\u059c",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u059e\37\uffff\1\u059e",
            "\1\u059f\37\uffff\1\u059f",
            "\1\u05a0\37\uffff\1\u05a0",
            "\1\u05a1\37\uffff\1\u05a1",
            "\1\u05a2\37\uffff\1\u05a2",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u05a4\37\uffff\1\u05a4",
            "\1\u05a6\1\uffff\1\u05a7\5\uffff\1\u05a9\10\uffff\1\u05a8\1"+
            "\u05a5\15\uffff\1\u05a6\1\uffff\1\u05a7\5\uffff\1\u05a9\10\uffff"+
            "\1\u05a8\1\u05a5",
            "\1\u05aa\37\uffff\1\u05aa",
            "\1\u05ab\37\uffff\1\u05ab",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u05ad\37\uffff\1\u05ad",
            "\1\u05ae\37\uffff\1\u05ae",
            "\1\u05af\37\uffff\1\u05af",
            "\1\u05b0\37\uffff\1\u05b0",
            "\1\u05b1\37\uffff\1\u05b1",
            "\1\u05b2\37\uffff\1\u05b2",
            "\1\u05b3\37\uffff\1\u05b3",
            "\1\u05b4\37\uffff\1\u05b4",
            "\1\u05b5\37\uffff\1\u05b5",
            "",
            "\1\u05b6\37\uffff\1\u05b6",
            "\1\u05b7\37\uffff\1\u05b7",
            "\1\u05b8\37\uffff\1\u05b8",
            "\1\u05b9\37\uffff\1\u05b9",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u05bc\37\uffff\1\u05bc",
            "\1\u05bd\37\uffff\1\u05bd",
            "\1\u05be\37\uffff\1\u05be",
            "\12\111\7\uffff\14\111\1\u05c0\15\111\4\uffff\1\111\1\uffff"+
            "\14\111\1\u05c0\15\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u05c2\37\uffff\1\u05c2",
            "\1\u05c3\37\uffff\1\u05c3",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u05c5\37\uffff\1\u05c5",
            "",
            "\1\u05c6\37\uffff\1\u05c6",
            "",
            "\1\u05c7\37\uffff\1\u05c7",
            "\1\u05c8\37\uffff\1\u05c8",
            "\1\u05c9\37\uffff\1\u05c9",
            "\1\u05ca\37\uffff\1\u05ca",
            "\1\u05cb\37\uffff\1\u05cb",
            "\1\u05cc\37\uffff\1\u05cc",
            "\1\u05cd\37\uffff\1\u05cd",
            "\1\u05ce\37\uffff\1\u05ce",
            "\1\u05cf\37\uffff\1\u05cf",
            "\1\u05d0\37\uffff\1\u05d0",
            "\1\u05d1\37\uffff\1\u05d1",
            "",
            "",
            "\1\u05d2\37\uffff\1\u05d2",
            "\1\u05d3\37\uffff\1\u05d3",
            "\1\u05d4\37\uffff\1\u05d4",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\u05d7\1\uffff\32\111",
            "\1\u05d8\37\uffff\1\u05d8",
            "\1\u05d9\37\uffff\1\u05d9",
            "\1\u05da\37\uffff\1\u05da",
            "\1\u05db\37\uffff\1\u05db",
            "",
            "\1\u05dc\37\uffff\1\u05dc",
            "\1\u05dd\37\uffff\1\u05dd",
            "\1\u05de\37\uffff\1\u05de",
            "\1\u05df\37\uffff\1\u05df",
            "\1\u05e0\37\uffff\1\u05e0",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u05e2\37\uffff\1\u05e2",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u05e5\4\uffff\1\u05e6\5\uffff\1\u05e4\24\uffff\1\u05e5\4"+
            "\uffff\1\u05e6\5\uffff\1\u05e4",
            "\1\u05e7\37\uffff\1\u05e7",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u05e9\37\uffff\1\u05e9",
            "",
            "\1\u05ea\37\uffff\1\u05ea",
            "",
            "",
            "\1\u05eb\37\uffff\1\u05eb",
            "\1\u05ec\37\uffff\1\u05ec",
            "",
            "\12\111\7\uffff\22\111\1\u05ef\7\111\4\uffff\1\u05ee\1\uffff"+
            "\22\111\1\u05ef\7\111",
            "",
            "\1\u05f0\37\uffff\1\u05f0",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u05f2\37\uffff\1\u05f2",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u05f4\37\uffff\1\u05f4",
            "\1\u05f5\37\uffff\1\u05f5",
            "\1\u05f6\37\uffff\1\u05f6",
            "\1\u05f7\37\uffff\1\u05f7",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u05fa\37\uffff\1\u05fa",
            "\1\u05fb\37\uffff\1\u05fb",
            "\1\u05fc\37\uffff\1\u05fc",
            "\1\u05fd\37\uffff\1\u05fd",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u05ff\37\uffff\1\u05ff",
            "\1\u0600\37\uffff\1\u0600",
            "\1\u0601\37\uffff\1\u0601",
            "\1\u0602\37\uffff\1\u0602",
            "\12\111\7\uffff\22\111\1\u0604\7\111\4\uffff\1\111\1\uffff"+
            "\22\111\1\u0604\7\111",
            "",
            "\1\u0605\37\uffff\1\u0605",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0607\37\uffff\1\u0607",
            "",
            "\1\u0608\37\uffff\1\u0608",
            "\1\u0609\37\uffff\1\u0609",
            "\1\u060a",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u060c\37\uffff\1\u060c",
            "",
            "",
            "\1\u060d\37\uffff\1\u060d",
            "\1\u060e\37\uffff\1\u060e",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0610\37\uffff\1\u0610",
            "",
            "",
            "\1\u0611\37\uffff\1\u0611",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0614\37\uffff\1\u0614",
            "\1\u0615\37\uffff\1\u0615",
            "\1\u0616\37\uffff\1\u0616",
            "\1\u0617\37\uffff\1\u0617",
            "\1\u0618\37\uffff\1\u0618",
            "\1\u0619\37\uffff\1\u0619",
            "",
            "",
            "\1\u061a\37\uffff\1\u061a",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u061c\37\uffff\1\u061c",
            "\1\u061d\37\uffff\1\u061d",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0620\37\uffff\1\u0620",
            "\1\u0621\37\uffff\1\u0621",
            "\1\u0622\37\uffff\1\u0622",
            "\1\u0624\3\uffff\1\u0623\33\uffff\1\u0624\3\uffff\1\u0623",
            "\12\111\7\uffff\32\111\4\uffff\1\u0626\1\uffff\32\111",
            "\1\u0627\37\uffff\1\u0627",
            "",
            "\1\u0628\23\uffff\1\u0629\13\uffff\1\u0628\23\uffff\1\u0629",
            "\1\u062a\37\uffff\1\u062a",
            "\1\u062b\37\uffff\1\u062b",
            "\1\u062c\37\uffff\1\u062c",
            "\1\u062d\37\uffff\1\u062d",
            "\1\u062e\37\uffff\1\u062e",
            "\12\111\7\uffff\23\111\1\u0630\6\111\4\uffff\1\111\1\uffff"+
            "\23\111\1\u0630\6\111",
            "\1\u0631\37\uffff\1\u0631",
            "\1\u0633\2\uffff\1\u0632\34\uffff\1\u0633\2\uffff\1\u0632",
            "",
            "",
            "\1\u0634\37\uffff\1\u0634",
            "\1\u0635\37\uffff\1\u0635",
            "\1\u0636\37\uffff\1\u0636",
            "\12\111\7\uffff\32\111\4\uffff\1\u0638\1\uffff\32\111",
            "\1\u0639\37\uffff\1\u0639",
            "\1\u063a\37\uffff\1\u063a",
            "\1\u063b\37\uffff\1\u063b",
            "\1\u063c\37\uffff\1\u063c",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u063e\37\uffff\1\u063e",
            "\1\u063f\37\uffff\1\u063f",
            "",
            "\1\u0640\37\uffff\1\u0640",
            "\1\u0641\37\uffff\1\u0641",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0643\37\uffff\1\u0643",
            "\1\u0644\3\uffff\1\u0645\33\uffff\1\u0644\3\uffff\1\u0645",
            "\1\u0647\15\uffff\1\u0646\21\uffff\1\u0647\15\uffff\1\u0646",
            "\1\u0648\37\uffff\1\u0648",
            "\1\u0649\37\uffff\1\u0649",
            "\1\u064a\37\uffff\1\u064a",
            "",
            "\1\u064b\37\uffff\1\u064b",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u064e\15\uffff\1\u064d\21\uffff\1\u064e\15\uffff\1\u064d",
            "",
            "\1\u064f\37\uffff\1\u064f",
            "\1\u0650\37\uffff\1\u0650",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\u0653\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0655\37\uffff\1\u0655",
            "\1\u0656\37\uffff\1\u0656",
            "\1\u0657\37\uffff\1\u0657",
            "\1\u0658\37\uffff\1\u0658",
            "\1\u0659\37\uffff\1\u0659",
            "\1\u065a\37\uffff\1\u065a",
            "\1\u065b\37\uffff\1\u065b",
            "\1\u065d\3\uffff\1\u065c\33\uffff\1\u065d\3\uffff\1\u065c",
            "\12\111\7\uffff\10\111\1\u065f\21\111\4\uffff\1\111\1\uffff"+
            "\10\111\1\u065f\21\111",
            "\1\u0660\37\uffff\1\u0660",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\1\u0663\31\111\4\uffff\1\111\1\uffff\1\u0663"+
            "\31\111",
            "\1\u0664\37\uffff\1\u0664",
            "\1\u0665\37\uffff\1\u0665",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0668\37\uffff\1\u0668",
            "\1\u0669\37\uffff\1\u0669",
            "",
            "\1\u066a\37\uffff\1\u066a",
            "",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u066d\37\uffff\1\u066d",
            "",
            "",
            "",
            "\1\u066f\7\uffff\1\u066e\27\uffff\1\u066f\7\uffff\1\u066e",
            "",
            "\1\u0670\37\uffff\1\u0670",
            "",
            "\1\u0671\37\uffff\1\u0671",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0673\37\uffff\1\u0673",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0675\37\uffff\1\u0675",
            "\1\u0676\37\uffff\1\u0676",
            "",
            "\1\u0677\37\uffff\1\u0677",
            "\1\u0678\37\uffff\1\u0678",
            "\1\u0679\37\uffff\1\u0679",
            "\1\u067a\37\uffff\1\u067a",
            "\1\u067b\37\uffff\1\u067b",
            "\1\u067c\37\uffff\1\u067c",
            "\1\u067d\37\uffff\1\u067d",
            "\1\u067e\37\uffff\1\u067e",
            "\1\u0680\20\uffff\1\u067f\16\uffff\1\u0680\20\uffff\1\u067f",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0682\37\uffff\1\u0682",
            "",
            "",
            "\1\u0683\37\uffff\1\u0683",
            "\1\u0684\37\uffff\1\u0684",
            "\1\u0685\37\uffff\1\u0685",
            "\1\u0686\37\uffff\1\u0686",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0688\37\uffff\1\u0688",
            "",
            "",
            "\1\u0689\37\uffff\1\u0689",
            "\1\u068a\37\uffff\1\u068a",
            "",
            "\1\u068b\37\uffff\1\u068b",
            "\1\u068c\37\uffff\1\u068c",
            "\1\u068d\37\uffff\1\u068d",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u068f\37\uffff\1\u068f",
            "",
            "\1\u0690\37\uffff\1\u0690",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0693\37\uffff\1\u0693",
            "\1\u0694\37\uffff\1\u0694",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0696\37\uffff\1\u0696",
            "",
            "\1\u0697\37\uffff\1\u0697",
            "\1\u0698\37\uffff\1\u0698",
            "\1\u0699\37\uffff\1\u0699",
            "\1\u069a\37\uffff\1\u069a",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u069c\37\uffff\1\u069c",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u069e\37\uffff\1\u069e",
            "\1\u069f\37\uffff\1\u069f",
            "",
            "",
            "\1\u06a0\37\uffff\1\u06a0",
            "",
            "\1\u06a1\37\uffff\1\u06a1",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u06a3\37\uffff\1\u06a3",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u06a6\10\uffff\1\u06a5\26\uffff\1\u06a6\10\uffff\1\u06a5",
            "\1\u06a7\37\uffff\1\u06a7",
            "",
            "\1\u06a8\37\uffff\1\u06a8",
            "\1\u06a9\37\uffff\1\u06a9",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\22\111\1\u06ad\7\111\4\uffff\1\111\1\uffff"+
            "\22\111\1\u06ad\7\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u06af\37\uffff\1\u06af",
            "\1\u06b0\37\uffff\1\u06b0",
            "\1\u06b1\37\uffff\1\u06b1",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u06b3\37\uffff\1\u06b3",
            "\1\u06b4\37\uffff\1\u06b4",
            "\1\u06b5\37\uffff\1\u06b5",
            "\1\u06b6\37\uffff\1\u06b6",
            "\1\u06b7\37\uffff\1\u06b7",
            "\1\u06b8\37\uffff\1\u06b8",
            "",
            "\1\u06b9\37\uffff\1\u06b9",
            "\1\u06ba\37\uffff\1\u06ba",
            "\1\u06bb\37\uffff\1\u06bb",
            "\1\u06bc\37\uffff\1\u06bc",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u06be\37\uffff\1\u06be",
            "\1\u06bf\13\uffff\1\u06c0\1\u06c1\22\uffff\1\u06bf\13\uffff"+
            "\1\u06c0\1\u06c1",
            "\1\u06c2\37\uffff\1\u06c2",
            "\1\u06c3\37\uffff\1\u06c3",
            "\1\u06c4",
            "\1\u06c5\37\uffff\1\u06c5",
            "\1\u06c6\37\uffff\1\u06c6",
            "\1\u06c7\37\uffff\1\u06c7",
            "",
            "\1\u06c8\37\uffff\1\u06c8",
            "\1\u06c9\37\uffff\1\u06c9",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u06cc\37\uffff\1\u06cc",
            "\12\111\7\uffff\4\111\1\u06cf\15\111\1\u06ce\7\111\4\uffff"+
            "\1\111\1\uffff\4\111\1\u06cf\15\111\1\u06ce\7\111",
            "\1\u06d0\37\uffff\1\u06d0",
            "\1\u06d1\37\uffff\1\u06d1",
            "\1\u06d2\37\uffff\1\u06d2",
            "\1\u06d3\37\uffff\1\u06d3",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u06d5\37\uffff\1\u06d5",
            "\1\u06d6\37\uffff\1\u06d6",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\u06d8\1\uffff\32\111",
            "\1\u06d9\37\uffff\1\u06d9",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u06db\37\uffff\1\u06db",
            "",
            "\1\u06dc\37\uffff\1\u06dc",
            "\1\u06dd",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u06e0",
            "\1\u06e1\37\uffff\1\u06e1",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u06e3\37\uffff\1\u06e3",
            "\1\u06e4\37\uffff\1\u06e4",
            "\1\u06e5\37\uffff\1\u06e5",
            "\1\u06e6\37\uffff\1\u06e6",
            "\1\u06e7\37\uffff\1\u06e7",
            "\1\u06e8\37\uffff\1\u06e8",
            "\1\u06e9\37\uffff\1\u06e9",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u06ec\37\uffff\1\u06ec",
            "\12\111\7\uffff\32\111\4\uffff\1\u06ee\1\uffff\32\111",
            "",
            "",
            "\1\u06f1\12\uffff\1\u06ef\4\uffff\1\u06f0\17\uffff\1\u06f1"+
            "\12\uffff\1\u06ef\4\uffff\1\u06f0",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u06f3\37\uffff\1\u06f3",
            "\1\u06f4\37\uffff\1\u06f4",
            "\1\u06f5\37\uffff\1\u06f5",
            "\1\u06f6\37\uffff\1\u06f6",
            "\1\u06f7\37\uffff\1\u06f7",
            "\1\u06f8\37\uffff\1\u06f8",
            "\1\u06f9\37\uffff\1\u06f9",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u06fb\37\uffff\1\u06fb",
            "",
            "\1\u06fc\37\uffff\1\u06fc",
            "\1\u06fd\37\uffff\1\u06fd",
            "\1\u06fe\37\uffff\1\u06fe",
            "\1\u06ff\37\uffff\1\u06ff",
            "",
            "\1\u0700\37\uffff\1\u0700",
            "\1\u0701\37\uffff\1\u0701",
            "\1\u0702\37\uffff\1\u0702",
            "\1\u0703\37\uffff\1\u0703",
            "",
            "\1\u0704\37\uffff\1\u0704",
            "\1\u0705\37\uffff\1\u0705",
            "\1\u0706\37\uffff\1\u0706",
            "",
            "\1\u0707\37\uffff\1\u0707",
            "",
            "\1\u0708\37\uffff\1\u0708",
            "\1\u0709\37\uffff\1\u0709",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "",
            "\1\u070c\37\uffff\1\u070c",
            "\1\u070d\37\uffff\1\u070d",
            "\1\u070e\37\uffff\1\u070e",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0710\37\uffff\1\u0710",
            "\1\u0711\37\uffff\1\u0711",
            "\1\u0712\37\uffff\1\u0712",
            "\1\u0713\37\uffff\1\u0713",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0715\37\uffff\1\u0715",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0717\37\uffff\1\u0717",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0719\37\uffff\1\u0719",
            "",
            "\1\u071a\37\uffff\1\u071a",
            "\1\u071b\37\uffff\1\u071b",
            "\1\u071c\37\uffff\1\u071c",
            "",
            "\1\u071d\37\uffff\1\u071d",
            "\1\u071e\37\uffff\1\u071e",
            "",
            "",
            "\1\u071f\37\uffff\1\u071f",
            "\1\u0720\37\uffff\1\u0720",
            "\1\u0721\37\uffff\1\u0721",
            "\1\u0722\37\uffff\1\u0722",
            "\1\u0723\37\uffff\1\u0723",
            "\1\u0724\37\uffff\1\u0724",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0726\37\uffff\1\u0726",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0729\37\uffff\1\u0729",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u072b\37\uffff\1\u072b",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u072d\37\uffff\1\u072d",
            "\12\111\7\uffff\10\111\1\u072f\21\111\4\uffff\1\111\1\uffff"+
            "\10\111\1\u072f\21\111",
            "\1\u0730\37\uffff\1\u0730",
            "\1\u0731\37\uffff\1\u0731",
            "\1\u0732\37\uffff\1\u0732",
            "\1\u0733\37\uffff\1\u0733",
            "\1\u0734\37\uffff\1\u0734",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0736",
            "",
            "\1\u0737\37\uffff\1\u0737",
            "\1\u0738\37\uffff\1\u0738",
            "\1\u0739\37\uffff\1\u0739",
            "\1\u073a\37\uffff\1\u073a",
            "\1\u073b\37\uffff\1\u073b",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\u073e\1\uffff\32\111",
            "",
            "\1\u073f\37\uffff\1\u073f",
            "\1\u0740\37\uffff\1\u0740",
            "\12\111\7\uffff\32\111\4\uffff\1\u0742\1\uffff\32\111",
            "\1\u0743\37\uffff\1\u0743",
            "\12\111\7\uffff\3\111\1\u0745\26\111\4\uffff\1\111\1\uffff"+
            "\3\111\1\u0745\26\111",
            "",
            "\1\u0746\37\uffff\1\u0746",
            "\1\u0747\37\uffff\1\u0747",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0749\37\uffff\1\u0749",
            "",
            "\12\111\7\uffff\22\111\1\u074b\7\111\4\uffff\1\111\1\uffff"+
            "\22\111\1\u074b\7\111",
            "\1\u074c\37\uffff\1\u074c",
            "\1\u074d\37\uffff\1\u074d",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0750\37\uffff\1\u0750",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0754\37\uffff\1\u0754",
            "\1\u0755\37\uffff\1\u0755",
            "\1\u0756\37\uffff\1\u0756",
            "\1\u0757\37\uffff\1\u0757",
            "",
            "",
            "\1\u0758\37\uffff\1\u0758",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\u075a\1\uffff\32\111",
            "\1\u075b\37\uffff\1\u075b",
            "\1\u075c\37\uffff\1\u075c",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u075e\37\uffff\1\u075e",
            "\1\u075f\37\uffff\1\u075f",
            "\1\u0760\37\uffff\1\u0760",
            "\1\u0761\37\uffff\1\u0761",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0763\37\uffff\1\u0763",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "",
            "\1\u0765\37\uffff\1\u0765",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u076a\37\uffff\1\u076a",
            "",
            "",
            "\1\u076b\37\uffff\1\u076b",
            "\1\u076c\37\uffff\1\u076c",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u076f\37\uffff\1\u076f",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0771\37\uffff\1\u0771",
            "\1\u0772\37\uffff\1\u0772",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0774\37\uffff\1\u0774",
            "\1\u0775\37\uffff\1\u0775",
            "\1\u0776\37\uffff\1\u0776",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0778\37\uffff\1\u0778",
            "\1\u0779\37\uffff\1\u0779",
            "\1\u077a\37\uffff\1\u077a",
            "\1\u077b\37\uffff\1\u077b",
            "\1\u077c\37\uffff\1\u077c",
            "",
            "\1\u077d\37\uffff\1\u077d",
            "\1\u077e\37\uffff\1\u077e",
            "\1\u077f\37\uffff\1\u077f",
            "\1\u0780\37\uffff\1\u0780",
            "\1\u0781\37\uffff\1\u0781",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0783\37\uffff\1\u0783",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0787\37\uffff\1\u0787",
            "",
            "\1\u0788\37\uffff\1\u0788",
            "\1\u0789",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u078b\37\uffff\1\u078b",
            "",
            "\1\u078c\37\uffff\1\u078c",
            "\1\u078d\37\uffff\1\u078d",
            "\1\u078e\37\uffff\1\u078e",
            "\1\u078f\37\uffff\1\u078f",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0791\37\uffff\1\u0791",
            "",
            "\1\u0792\37\uffff\1\u0792",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0794\37\uffff\1\u0794",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0796\37\uffff\1\u0796",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0798\37\uffff\1\u0798",
            "\1\u0799\37\uffff\1\u0799",
            "\1\u079a\37\uffff\1\u079a",
            "\1\u079b\37\uffff\1\u079b",
            "",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u079d\37\uffff\1\u079d",
            "\1\u079e\37\uffff\1\u079e",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u07a0\25\uffff\1\u07a1\11\uffff\1\u07a0",
            "\1\u07a2\37\uffff\1\u07a2",
            "\1\u07a3\37\uffff\1\u07a3",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u07a5\37\uffff\1\u07a5",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u07a7\37\uffff\1\u07a7",
            "\1\u07a8\37\uffff\1\u07a8",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u07ab\37\uffff\1\u07ab",
            "\1\u07ac\37\uffff\1\u07ac",
            "\1\u07ae\1\u07ad\36\uffff\1\u07ae\1\u07ad",
            "\1\u07af\37\uffff\1\u07af",
            "\1\u07b0\37\uffff\1\u07b0",
            "\1\u07b1\37\uffff\1\u07b1",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u07b3\37\uffff\1\u07b3",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u07b5\37\uffff\1\u07b5",
            "\1\u07b6\37\uffff\1\u07b6",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "",
            "\1\u07b8\37\uffff\1\u07b8",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u07ba\37\uffff\1\u07ba",
            "\1\u07bb\37\uffff\1\u07bb",
            "\1\u07bc\37\uffff\1\u07bc",
            "\12\111\7\uffff\32\111\4\uffff\1\u07be\1\uffff\32\111",
            "\1\u07bf\37\uffff\1\u07bf",
            "",
            "\1\u07c0\37\uffff\1\u07c0",
            "\1\u07c1\37\uffff\1\u07c1",
            "",
            "\1\u07c2\37\uffff\1\u07c2",
            "\1\u07c3\37\uffff\1\u07c3",
            "",
            "\1\u07c4\37\uffff\1\u07c4",
            "\1\u07c5\37\uffff\1\u07c5",
            "\1\u07c6\2\uffff\1\u07c7\34\uffff\1\u07c6\2\uffff\1\u07c7",
            "",
            "",
            "\1\u07c8\37\uffff\1\u07c8",
            "\1\u07c9\37\uffff\1\u07c9",
            "",
            "\1\u07ca\37\uffff\1\u07ca",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u07cc\37\uffff\1\u07cc",
            "\12\111\7\uffff\32\111\4\uffff\1\u07ce\1\uffff\32\111",
            "\1\u07cf\37\uffff\1\u07cf",
            "\1\u07d0\37\uffff\1\u07d0",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "",
            "\1\u07d2\37\uffff\1\u07d2",
            "",
            "\1\u07d3\37\uffff\1\u07d3",
            "\1\u07d4\37\uffff\1\u07d4",
            "\1\u07d5\37\uffff\1\u07d5",
            "\1\u07d6\37\uffff\1\u07d6",
            "",
            "\1\u07d7\37\uffff\1\u07d7",
            "\1\u07d8\37\uffff\1\u07d8",
            "\1\u07d9\37\uffff\1\u07d9",
            "\1\u07da\37\uffff\1\u07da",
            "\1\u07db\37\uffff\1\u07db",
            "\1\u07dc\37\uffff\1\u07dc",
            "\1\u07dd\37\uffff\1\u07dd",
            "",
            "\1\u07de\37\uffff\1\u07de",
            "\1\u07df\37\uffff\1\u07df",
            "\1\u07e0\37\uffff\1\u07e0",
            "\1\u07e1\37\uffff\1\u07e1",
            "\1\u07e2\37\uffff\1\u07e2",
            "\12\111\7\uffff\32\111\4\uffff\1\u07e4\1\uffff\32\111",
            "\1\u07e5\37\uffff\1\u07e5",
            "\1\u07e6\37\uffff\1\u07e6",
            "\1\u07e7\37\uffff\1\u07e7",
            "\1\u07e8\37\uffff\1\u07e8",
            "\1\u07e9\37\uffff\1\u07e9",
            "\1\u07ea\37\uffff\1\u07ea",
            "\1\u07eb\37\uffff\1\u07eb",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "",
            "\1\u07ee\37\uffff\1\u07ee",
            "\1\u07ef\37\uffff\1\u07ef",
            "\1\u07f0\37\uffff\1\u07f0",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u07f3\37\uffff\1\u07f3",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u07f5\37\uffff\1\u07f5",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u07f7\37\uffff\1\u07f7",
            "\1\u07f8\37\uffff\1\u07f8",
            "\1\u07f9\37\uffff\1\u07f9",
            "\1\u07fa\37\uffff\1\u07fa",
            "\1\u07fb\37\uffff\1\u07fb",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u07fd\37\uffff\1\u07fd",
            "\1\u07fe\37\uffff\1\u07fe",
            "\1\u07ff\37\uffff\1\u07ff",
            "\1\u0800\37\uffff\1\u0800",
            "\1\u0801\37\uffff\1\u0801",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0803\37\uffff\1\u0803",
            "",
            "",
            "\1\u0804\37\uffff\1\u0804",
            "",
            "\1\u0805\37\uffff\1\u0805",
            "",
            "\1\u0806\37\uffff\1\u0806",
            "",
            "\1\u0807\37\uffff\1\u0807",
            "\1\u0808\37\uffff\1\u0808",
            "\1\u0809\37\uffff\1\u0809",
            "\1\u080a\37\uffff\1\u080a",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u080d\37\uffff\1\u080d",
            "\1\u080e\37\uffff\1\u080e",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0810\37\uffff\1\u0810",
            "\1\u0811\37\uffff\1\u0811",
            "\1\u0812\37\uffff\1\u0812",
            "",
            "",
            "\1\u0816\1\u0813\13\uffff\1\u0818\1\uffff\1\u0814\1\uffff\1"+
            "\u0815\1\u0817\15\uffff\1\u0816\1\u0813\13\uffff\1\u0818\1\uffff"+
            "\1\u0814\1\uffff\1\u0815\1\u0817",
            "\1\u0819\37\uffff\1\u0819",
            "\1\u081a\37\uffff\1\u081a",
            "",
            "\1\u081b\37\uffff\1\u081b",
            "\1\u081c\37\uffff\1\u081c",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u081e\37\uffff\1\u081e",
            "\1\u081f\37\uffff\1\u081f",
            "",
            "\1\u0820\37\uffff\1\u0820",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0822\37\uffff\1\u0822",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "",
            "\1\u0824\37\uffff\1\u0824",
            "",
            "",
            "",
            "\1\u0825\37\uffff\1\u0825",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0827\37\uffff\1\u0827",
            "\1\u0828\37\uffff\1\u0828",
            "\1\u0829\37\uffff\1\u0829",
            "",
            "\1\u082a\37\uffff\1\u082a",
            "\1\u082b\37\uffff\1\u082b",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u082e\37\uffff\1\u082e",
            "\1\u082f",
            "\1\u0830\37\uffff\1\u0830",
            "",
            "\1\u0831\37\uffff\1\u0831",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "",
            "",
            "",
            "\1\u0833\37\uffff\1\u0833",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0835\37\uffff\1\u0835",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0837\37\uffff\1\u0837",
            "\1\u0838\37\uffff\1\u0838",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u083a\37\uffff\1\u083a",
            "\1\u083b\37\uffff\1\u083b",
            "",
            "\1\u083c\37\uffff\1\u083c",
            "\1\u083d\37\uffff\1\u083d",
            "\1\u083e\37\uffff\1\u083e",
            "\1\u083f\37\uffff\1\u083f",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0841\37\uffff\1\u0841",
            "\1\u0842\37\uffff\1\u0842",
            "\1\u0843\37\uffff\1\u0843",
            "\1\u0844\37\uffff\1\u0844",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0846\37\uffff\1\u0846",
            "",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u084a\2\uffff\1\u084b\4\uffff\1\u0849\27\uffff\1\u084a\2"+
            "\uffff\1\u084b\4\uffff\1\u0849",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u084f\37\uffff\1\u084f",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0853\37\uffff\1\u0853",
            "",
            "\1\u0854\37\uffff\1\u0854",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0856\37\uffff\1\u0856",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0858\37\uffff\1\u0858",
            "",
            "\1\u0859\37\uffff\1\u0859",
            "\1\u085a\37\uffff\1\u085a",
            "",
            "\1\u085b\37\uffff\1\u085b",
            "\1\u085c\37\uffff\1\u085c",
            "\1\u085d\37\uffff\1\u085d",
            "\1\u085e\37\uffff\1\u085e",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0860\37\uffff\1\u0860",
            "\1\u0861\37\uffff\1\u0861",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0863\37\uffff\1\u0863",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0868\1\u0867\36\uffff\1\u0868\1\u0867",
            "\1\u0869\37\uffff\1\u0869",
            "",
            "\1\u086a\37\uffff\1\u086a",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u086d\3\uffff\1\u086e\33\uffff\1\u086d\3\uffff\1\u086e",
            "",
            "\1\u086f",
            "\1\u0870\37\uffff\1\u0870",
            "\1\u0871\37\uffff\1\u0871",
            "",
            "\1\u0874\12\uffff\1\u0873\4\uffff\1\u0872\17\uffff\1\u0874"+
            "\12\uffff\1\u0873\4\uffff\1\u0872",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0876\37\uffff\1\u0876",
            "\1\u0877\37\uffff\1\u0877",
            "\1\u0878\37\uffff\1\u0878",
            "\1\u0879\37\uffff\1\u0879",
            "\1\u087a\37\uffff\1\u087a",
            "\1\u087b\37\uffff\1\u087b",
            "\1\u087c\37\uffff\1\u087c",
            "\1\u087d\37\uffff\1\u087d",
            "\1\u087e\37\uffff\1\u087e",
            "\1\u087f\37\uffff\1\u087f",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0882\37\uffff\1\u0882",
            "\1\u0883\37\uffff\1\u0883",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0885\37\uffff\1\u0885",
            "\1\u0886\37\uffff\1\u0886",
            "\1\u0887\37\uffff\1\u0887",
            "\1\u0888\37\uffff\1\u0888",
            "\1\u0889\37\uffff\1\u0889",
            "\12\111\7\uffff\32\111\4\uffff\1\u088b\1\uffff\32\111",
            "\1\u088c\37\uffff\1\u088c",
            "\1\u088d\37\uffff\1\u088d",
            "\1\u088e",
            "\1\u088f\37\uffff\1\u088f",
            "\1\u0890\37\uffff\1\u0890",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\23\111\1\u0893\6\111\4\uffff\1\u0894\1\uffff"+
            "\23\111\1\u0893\6\111",
            "\1\u0895\3\uffff\1\u0896\33\uffff\1\u0895\3\uffff\1\u0896",
            "\1\u0897\37\uffff\1\u0897",
            "\1\u0898\37\uffff\1\u0898",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u089b\12\uffff\1\u089a\4\uffff\1\u089c\17\uffff\1\u089b"+
            "\12\uffff\1\u089a\4\uffff\1\u089c",
            "\1\u089d\37\uffff\1\u089d",
            "\1\u089e\37\uffff\1\u089e",
            "\1\u089f",
            "\1\u08a0\37\uffff\1\u08a0",
            "\1\u08a1\37\uffff\1\u08a1",
            "\1\u08a2\37\uffff\1\u08a2",
            "\1\u08a3\37\uffff\1\u08a3",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u08a5\37\uffff\1\u08a5",
            "\1\u08a6\37\uffff\1\u08a6",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u08a9\37\uffff\1\u08a9",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u08ac\37\uffff\1\u08ac",
            "\12\111\7\uffff\22\111\1\u08ae\7\111\4\uffff\1\111\1\uffff"+
            "\22\111\1\u08ae\7\111",
            "",
            "\1\u08af\37\uffff\1\u08af",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u08b1\37\uffff\1\u08b1",
            "\1\u08b2\37\uffff\1\u08b2",
            "\1\u08b3\37\uffff\1\u08b3",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u08b5\37\uffff\1\u08b5",
            "\12\111\7\uffff\32\111\4\uffff\1\u08b7\1\uffff\32\111",
            "\1\u08b8\37\uffff\1\u08b8",
            "\1\u08b9\37\uffff\1\u08b9",
            "\1\u08ba\37\uffff\1\u08ba",
            "\1\u08bb\37\uffff\1\u08bb",
            "\12\111\7\uffff\32\111\4\uffff\1\u08bd\1\uffff\32\111",
            "",
            "",
            "\1\u08be\37\uffff\1\u08be",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u08c0\37\uffff\1\u08c0",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u08c2\37\uffff\1\u08c2",
            "\1\u08c3\3\uffff\1\u08c4\33\uffff\1\u08c3\3\uffff\1\u08c4",
            "\1\u08c5\37\uffff\1\u08c5",
            "\1\u08c6\10\uffff\1\u08c7\26\uffff\1\u08c6\10\uffff\1\u08c7",
            "\1\u08c8\37\uffff\1\u08c8",
            "\1\u08c9\37\uffff\1\u08c9",
            "\1\u08ca\37\uffff\1\u08ca",
            "\1\u08cb\37\uffff\1\u08cb",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u08cd\37\uffff\1\u08cd",
            "\1\u08ce\37\uffff\1\u08ce",
            "",
            "\12\111\7\uffff\10\111\1\u08d1\11\111\1\u08d2\7\111\4\uffff"+
            "\1\u08d0\1\uffff\10\111\1\u08d1\11\111\1\u08d2\7\111",
            "\1\u08d3\37\uffff\1\u08d3",
            "\1\u08d4\37\uffff\1\u08d4",
            "",
            "\1\u08d5\37\uffff\1\u08d5",
            "",
            "\1\u08d6\37\uffff\1\u08d6",
            "\1\u08d7\37\uffff\1\u08d7",
            "",
            "\1\u08d8\37\uffff\1\u08d8",
            "\1\u08d9\37\uffff\1\u08d9",
            "\1\u08da\37\uffff\1\u08da",
            "\1\u08db\37\uffff\1\u08db",
            "\1\u08dc\37\uffff\1\u08dc",
            "",
            "",
            "\1\u08dd\37\uffff\1\u08dd",
            "\1\u08de\37\uffff\1\u08de",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u08e5\37\uffff\1\u08e5",
            "\12\111\7\uffff\10\111\1\u08e7\21\111\4\uffff\1\111\1\uffff"+
            "\10\111\1\u08e7\21\111",
            "\12\111\7\uffff\32\111\4\uffff\1\u08e9\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u08ec\37\uffff\1\u08ec",
            "",
            "\1\u08ed\37\uffff\1\u08ed",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u08f0\37\uffff\1\u08f0",
            "",
            "\12\111\7\uffff\22\111\1\u08f2\7\111\4\uffff\1\111\1\uffff"+
            "\22\111\1\u08f2\7\111",
            "",
            "",
            "\1\u08f3\37\uffff\1\u08f3",
            "\1\u08f4\37\uffff\1\u08f4",
            "\1\u08f5\37\uffff\1\u08f5",
            "",
            "",
            "",
            "\12\111\7\uffff\3\111\1\u08f7\26\111\4\uffff\1\111\1\uffff"+
            "\3\111\1\u08f7\26\111",
            "",
            "",
            "",
            "\1\u08f8\37\uffff\1\u08f8",
            "\1\u08f9\37\uffff\1\u08f9",
            "",
            "\1\u08fa\37\uffff\1\u08fa",
            "",
            "\1\u08fb\37\uffff\1\u08fb",
            "\12\111\7\uffff\32\111\4\uffff\1\u08fd\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u08ff\37\uffff\1\u08ff",
            "\1\u0900\37\uffff\1\u0900",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0903\37\uffff\1\u0903",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0905\37\uffff\1\u0905",
            "",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0908\37\uffff\1\u0908",
            "\1\u0909\37\uffff\1\u0909",
            "",
            "",
            "\1\u090a\37\uffff\1\u090a",
            "\1\u090b\37\uffff\1\u090b",
            "\1\u090c\10\uffff\1\u090d\2\uffff\1\u090e\3\uffff\1\u090f\17"+
            "\uffff\1\u090c\10\uffff\1\u090d\2\uffff\1\u090e\3\uffff\1\u090f",
            "\1\u0910\37\uffff\1\u0910",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0912\37\uffff\1\u0912",
            "\1\u0913\37\uffff\1\u0913",
            "\1\u0914\37\uffff\1\u0914",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0916\37\uffff\1\u0916",
            "\1\u0917\37\uffff\1\u0917",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u091b\37\uffff\1\u091b",
            "\1\u091c\37\uffff\1\u091c",
            "\1\u091d\37\uffff\1\u091d",
            "\1\u091e\37\uffff\1\u091e",
            "",
            "",
            "\1\u091f\37\uffff\1\u091f",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0922\37\uffff\1\u0922",
            "\1\u0923\37\uffff\1\u0923",
            "\1\u0924\37\uffff\1\u0924",
            "\1\u0925\37\uffff\1\u0925",
            "",
            "\1\u0926\37\uffff\1\u0926",
            "\1\u0927\37\uffff\1\u0927",
            "\1\u0928\37\uffff\1\u0928",
            "\1\u0929\37\uffff\1\u0929",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u092b\37\uffff\1\u092b",
            "",
            "",
            "\1\u092c\37\uffff\1\u092c",
            "\1\u092d\37\uffff\1\u092d",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u092f\37\uffff\1\u092f",
            "\1\u0930\37\uffff\1\u0930",
            "\12\111\7\uffff\22\111\1\u0932\7\111\4\uffff\1\111\1\uffff"+
            "\22\111\1\u0932\7\111",
            "",
            "\1\u0933\37\uffff\1\u0933",
            "\1\u0934\37\uffff\1\u0934",
            "\1\u0935\37\uffff\1\u0935",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0938\4\uffff\1\u0939\32\uffff\1\u0938\4\uffff\1\u0939",
            "\1\u093a\37\uffff\1\u093a",
            "\1\u093b\37\uffff\1\u093b",
            "\1\u093c",
            "\1\u093d\37\uffff\1\u093d",
            "",
            "\1\u093e\37\uffff\1\u093e",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "",
            "\1\u0940\37\uffff\1\u0940",
            "",
            "",
            "\1\u0941\37\uffff\1\u0941",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0946\37\uffff\1\u0946",
            "",
            "\1\u0947\37\uffff\1\u0947",
            "",
            "\1\u094a\12\uffff\1\u0948\4\uffff\1\u0949\17\uffff\1\u094a"+
            "\12\uffff\1\u0948\4\uffff\1\u0949",
            "\1\u094b\37\uffff\1\u094b",
            "\12\111\7\uffff\32\111\4\uffff\1\u094d\1\uffff\32\111",
            "\12\111\7\uffff\22\111\1\u094f\7\111\4\uffff\1\u0950\1\uffff"+
            "\22\111\1\u094f\7\111",
            "\1\u0951\37\uffff\1\u0951",
            "",
            "\1\u0952\37\uffff\1\u0952",
            "\1\u0953\37\uffff\1\u0953",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0956\37\uffff\1\u0956",
            "\1\u0957\37\uffff\1\u0957",
            "\1\u0958\37\uffff\1\u0958",
            "\1\u0959\37\uffff\1\u0959",
            "\1\u095a\37\uffff\1\u095a",
            "\1\u095b\37\uffff\1\u095b",
            "\1\u095c\37\uffff\1\u095c",
            "\1\u095d\37\uffff\1\u095d",
            "\1\u095e\37\uffff\1\u095e",
            "",
            "\1\u095f\37\uffff\1\u095f",
            "\1\u0960\37\uffff\1\u0960",
            "",
            "\1\u0962\6\uffff\1\u0961\30\uffff\1\u0962\6\uffff\1\u0961",
            "\1\u0963\37\uffff\1\u0963",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0965\37\uffff\1\u0965",
            "\1\u0966\37\uffff\1\u0966",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u096b\37\uffff\1\u096b",
            "\1\u096c\37\uffff\1\u096c",
            "\1\u096d\37\uffff\1\u096d",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u096f\37\uffff\1\u096f",
            "\1\u0970\37\uffff\1\u0970",
            "",
            "",
            "",
            "",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0972\37\uffff\1\u0972",
            "",
            "\1\u0973\37\uffff\1\u0973",
            "",
            "",
            "\1\u0974\37\uffff\1\u0974",
            "\1\u0975\37\uffff\1\u0975",
            "",
            "",
            "\1\u0976\37\uffff\1\u0976",
            "",
            "\1\u0977\37\uffff\1\u0977",
            "\1\u0978\37\uffff\1\u0978",
            "\1\u0979\37\uffff\1\u0979",
            "\1\u097a\37\uffff\1\u097a",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u097c\37\uffff\1\u097c",
            "\1\u097d\37\uffff\1\u097d",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0981\1\u0982\1\u0983\3\uffff\1\u0980\31\uffff\1\u0981\1"+
            "\u0982\1\u0983\3\uffff\1\u0980",
            "",
            "\1\u0984",
            "\1\u0985\37\uffff\1\u0985",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0989\37\uffff\1\u0989",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u098b\37\uffff\1\u098b",
            "\1\u098c\37\uffff\1\u098c",
            "\1\u098d\37\uffff\1\u098d",
            "\1\u098e\37\uffff\1\u098e",
            "\1\u098f\37\uffff\1\u098f",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0991\37\uffff\1\u0991",
            "\1\u0992\37\uffff\1\u0992",
            "\1\u0993\37\uffff\1\u0993",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0995\37\uffff\1\u0995",
            "",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0997\37\uffff\1\u0997",
            "\1\u0998\37\uffff\1\u0998",
            "\1\u0999\37\uffff\1\u0999",
            "\1\u099a\37\uffff\1\u099a",
            "",
            "",
            "\1\u099b\37\uffff\1\u099b",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u099d\37\uffff\1\u099d",
            "\1\u099e\37\uffff\1\u099e",
            "\1\u099f\37\uffff\1\u099f",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u09a1\37\uffff\1\u09a1",
            "\1\u09a2\37\uffff\1\u09a2",
            "",
            "\1\u09a3\37\uffff\1\u09a3",
            "\1\u09a4\37\uffff\1\u09a4",
            "\1\u09a5\37\uffff\1\u09a5",
            "",
            "\1\u09a6\37\uffff\1\u09a6",
            "\1\u09a7\37\uffff\1\u09a7",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u09a9\37\uffff\1\u09a9",
            "\1\u09aa\37\uffff\1\u09aa",
            "\1\u09ab\37\uffff\1\u09ab",
            "",
            "",
            "\1\u09ac\37\uffff\1\u09ac",
            "\1\u09ad\37\uffff\1\u09ad",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u09af\37\uffff\1\u09af",
            "\1\u09b0\37\uffff\1\u09b0",
            "\1\u09b1\37\uffff\1\u09b1",
            "\1\u09b2\37\uffff\1\u09b2",
            "",
            "\1\u09b3\37\uffff\1\u09b3",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "",
            "",
            "",
            "\1\u09b5\37\uffff\1\u09b5",
            "\1\u09b6\37\uffff\1\u09b6",
            "\1\u09b7\37\uffff\1\u09b7",
            "\1\u09b8\37\uffff\1\u09b8",
            "\1\u09b9\37\uffff\1\u09b9",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u09bb\37\uffff\1\u09bb",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u09be\12\uffff\1\u09bd\4\uffff\1\u09bf\17\uffff\1\u09be"+
            "\12\uffff\1\u09bd\4\uffff\1\u09bf",
            "\12\111\7\uffff\22\111\1\u09c1\7\111\4\uffff\1\111\1\uffff"+
            "\22\111\1\u09c1\7\111",
            "\1\u09c2\37\uffff\1\u09c2",
            "\1\u09c3\37\uffff\1\u09c3",
            "",
            "",
            "\1\u09c4\37\uffff\1\u09c4",
            "\1\u09c5\37\uffff\1\u09c5",
            "\1\u09c6\37\uffff\1\u09c6",
            "\1\u09c7\37\uffff\1\u09c7",
            "\1\u09c8\37\uffff\1\u09c8",
            "\1\u09c9\37\uffff\1\u09c9",
            "\1\u09ca\37\uffff\1\u09ca",
            "\1\u09cb\37\uffff\1\u09cb",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u09cd\37\uffff\1\u09cd",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u09cf\37\uffff\1\u09cf",
            "\1\u09d0\37\uffff\1\u09d0",
            "\1\u09d1\37\uffff\1\u09d1",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u09d3\37\uffff\1\u09d3",
            "",
            "",
            "",
            "",
            "\1\u09d4\37\uffff\1\u09d4",
            "\1\u09d5\37\uffff\1\u09d5",
            "\1\u09d6\37\uffff\1\u09d6",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u09d8\37\uffff\1\u09d8",
            "",
            "\1\u09d9\37\uffff\1\u09d9",
            "\1\u09da\37\uffff\1\u09da",
            "\1\u09db\37\uffff\1\u09db",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u09dd\37\uffff\1\u09dd",
            "\1\u09de\37\uffff\1\u09de",
            "\1\u09df\37\uffff\1\u09df",
            "\1\u09e0\37\uffff\1\u09e0",
            "\1\u09e1\37\uffff\1\u09e1",
            "",
            "\1\u09e2\37\uffff\1\u09e2",
            "\1\u09e3\37\uffff\1\u09e3",
            "",
            "",
            "\1\u09e4\37\uffff\1\u09e4",
            "\1\u09e5\37\uffff\1\u09e5",
            "\1\u09e6\37\uffff\1\u09e6",
            "\1\u09e7\37\uffff\1\u09e7",
            "\1\u09e8\1\u09e9\36\uffff\1\u09e8\1\u09e9",
            "\1\u09ea\37\uffff\1\u09ea",
            "",
            "",
            "",
            "\1\u09eb\37\uffff\1\u09eb",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u09ed\37\uffff\1\u09ed",
            "\1\u09ee\37\uffff\1\u09ee",
            "\1\u09ef\37\uffff\1\u09ef",
            "\1\u09f0\37\uffff\1\u09f0",
            "",
            "\1\u09f1\37\uffff\1\u09f1",
            "\1\u09f2\37\uffff\1\u09f2",
            "\1\u09f3\37\uffff\1\u09f3",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u09f7\37\uffff\1\u09f7",
            "\1\u09f8\37\uffff\1\u09f8",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u09fa\37\uffff\1\u09fa",
            "\1\u09fb\37\uffff\1\u09fb",
            "\1\u09fc\37\uffff\1\u09fc",
            "",
            "\1\u09fd\37\uffff\1\u09fd",
            "\1\u09fe\37\uffff\1\u09fe",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0a00\37\uffff\1\u0a00",
            "\1\u0a01\37\uffff\1\u0a01",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\22\111\1\u0a05\7\111\4\uffff\1\u0a04\1\uffff"+
            "\22\111\1\u0a05\7\111",
            "",
            "\1\u0a06\37\uffff\1\u0a06",
            "\1\u0a07\37\uffff\1\u0a07",
            "\1\u0a08\37\uffff\1\u0a08",
            "\1\u0a09\37\uffff\1\u0a09",
            "\1\u0a0a\37\uffff\1\u0a0a",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0a0c\37\uffff\1\u0a0c",
            "\1\u0a0d\37\uffff\1\u0a0d",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0a0f\37\uffff\1\u0a0f",
            "",
            "\1\u0a10\37\uffff\1\u0a10",
            "\1\u0a11\37\uffff\1\u0a11",
            "\1\u0a12\37\uffff\1\u0a12",
            "\1\u0a13\37\uffff\1\u0a13",
            "\1\u0a14\37\uffff\1\u0a14",
            "",
            "\1\u0a15\37\uffff\1\u0a15",
            "",
            "\1\u0a16\37\uffff\1\u0a16",
            "\1\u0a17\37\uffff\1\u0a17",
            "\1\u0a18\37\uffff\1\u0a18",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0a1a\37\uffff\1\u0a1a",
            "\1\u0a1b\37\uffff\1\u0a1b",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0a1d\37\uffff\1\u0a1d",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\22\111\1\u0a20\7\111\4\uffff\1\111\1\uffff"+
            "\22\111\1\u0a20\7\111",
            "\1\u0a21\37\uffff\1\u0a21",
            "\1\u0a22\37\uffff\1\u0a22",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0a26\37\uffff\1\u0a26",
            "\1\u0a27\37\uffff\1\u0a27",
            "\1\u0a28\37\uffff\1\u0a28",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0a2a\37\uffff\1\u0a2a",
            "\1\u0a2b\37\uffff\1\u0a2b",
            "\1\u0a2c\37\uffff\1\u0a2c",
            "",
            "\1\u0a2d\37\uffff\1\u0a2d",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0a2f\37\uffff\1\u0a2f",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0a31\37\uffff\1\u0a31",
            "\1\u0a32\37\uffff\1\u0a32",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0a34\37\uffff\1\u0a34",
            "\1\u0a35\37\uffff\1\u0a35",
            "\1\u0a36\37\uffff\1\u0a36",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0a38\37\uffff\1\u0a38",
            "\1\u0a39\37\uffff\1\u0a39",
            "\1\u0a3a\37\uffff\1\u0a3a",
            "\1\u0a3b\37\uffff\1\u0a3b",
            "\1\u0a3c\37\uffff\1\u0a3c",
            "\1\u0a3d\37\uffff\1\u0a3d",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0a3f\37\uffff\1\u0a3f",
            "",
            "\1\u0a40\37\uffff\1\u0a40",
            "\1\u0a41\37\uffff\1\u0a41",
            "\1\u0a42\37\uffff\1\u0a42",
            "\1\u0a43\37\uffff\1\u0a43",
            "\1\u0a44\37\uffff\1\u0a44",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0a46\37\uffff\1\u0a46",
            "",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0a4a\37\uffff\1\u0a4a",
            "\1\u0a4b\37\uffff\1\u0a4b",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0a4d\37\uffff\1\u0a4d",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0a4f\37\uffff\1\u0a4f",
            "",
            "",
            "\1\u0a50\37\uffff\1\u0a50",
            "\1\u0a51",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0a53\37\uffff\1\u0a53",
            "\1\u0a54\37\uffff\1\u0a54",
            "\1\u0a55\37\uffff\1\u0a55",
            "\1\u0a56\37\uffff\1\u0a56",
            "",
            "\1\u0a57\37\uffff\1\u0a57",
            "\1\u0a58",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0a5c\37\uffff\1\u0a5c",
            "\1\u0a5d\37\uffff\1\u0a5d",
            "\1\u0a5e\37\uffff\1\u0a5e",
            "\1\u0a5f\37\uffff\1\u0a5f",
            "\1\u0a60\37\uffff\1\u0a60",
            "\1\u0a61\37\uffff\1\u0a61",
            "\1\u0a62\37\uffff\1\u0a62",
            "",
            "\1\u0a63\37\uffff\1\u0a63",
            "\1\u0a64\37\uffff\1\u0a64",
            "",
            "\1\u0a65\37\uffff\1\u0a65",
            "",
            "",
            "\1\u0a66\37\uffff\1\u0a66",
            "\1\u0a67\37\uffff\1\u0a67",
            "\1\u0a68\37\uffff\1\u0a68",
            "",
            "",
            "",
            "\1\u0a69",
            "\1\u0a6a\37\uffff\1\u0a6a",
            "\1\u0a6b\37\uffff\1\u0a6b",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0a6d\37\uffff\1\u0a6d",
            "\1\u0a6e\37\uffff\1\u0a6e",
            "\1\u0a6f\37\uffff\1\u0a6f",
            "",
            "\1\u0a70\37\uffff\1\u0a70",
            "",
            "\1\u0a71\37\uffff\1\u0a71",
            "\1\u0a72\37\uffff\1\u0a72",
            "",
            "\1\u0a73\37\uffff\1\u0a73",
            "\1\u0a74",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0a76\37\uffff\1\u0a76",
            "\1\u0a77\37\uffff\1\u0a77",
            "\1\u0a78\37\uffff\1\u0a78",
            "\1\u0a79\37\uffff\1\u0a79",
            "\1\u0a7a\37\uffff\1\u0a7a",
            "\1\u0a7b\37\uffff\1\u0a7b",
            "",
            "\1\u0a7c\37\uffff\1\u0a7c",
            "\1\u0a7d\37\uffff\1\u0a7d",
            "\1\u0a7e\37\uffff\1\u0a7e",
            "\1\u0a7f\37\uffff\1\u0a7f",
            "\1\u0a80\37\uffff\1\u0a80",
            "\1\u0a81\37\uffff\1\u0a81",
            "",
            "\1\u0a82\37\uffff\1\u0a82",
            "",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0a85\37\uffff\1\u0a85",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0a87\37\uffff\1\u0a87",
            "\1\u0a88\16\uffff\1\u0a89\20\uffff\1\u0a88\16\uffff\1\u0a89",
            "",
            "\1\u0a8a\37\uffff\1\u0a8a",
            "\1\u0a8b\37\uffff\1\u0a8b",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0a8d\37\uffff\1\u0a8d",
            "\1\u0a8e\37\uffff\1\u0a8e",
            "\1\u0a8f\37\uffff\1\u0a8f",
            "",
            "",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0a91\37\uffff\1\u0a91",
            "\1\u0a92\37\uffff\1\u0a92",
            "\1\u0a93\37\uffff\1\u0a93",
            "\1\u0a94\37\uffff\1\u0a94",
            "\1\u0a95\37\uffff\1\u0a95",
            "\1\u0a96\37\uffff\1\u0a96",
            "\1\u0a97\37\uffff\1\u0a97",
            "\1\u0a98\37\uffff\1\u0a98",
            "\1\u0a99\37\uffff\1\u0a99",
            "\1\u0a9a\37\uffff\1\u0a9a",
            "\1\u0a9b\37\uffff\1\u0a9b",
            "\1\u0a9c\37\uffff\1\u0a9c",
            "\1\u0a9d\12\uffff\1\u0a9e\4\uffff\1\u0a9f\17\uffff\1\u0a9d"+
            "\12\uffff\1\u0a9e\4\uffff\1\u0a9f",
            "\1\u0aa0\37\uffff\1\u0aa0",
            "\1\u0aa1\37\uffff\1\u0aa1",
            "",
            "\1\u0aa2\37\uffff\1\u0aa2",
            "\1\u0aa3\37\uffff\1\u0aa3",
            "\1\u0aa4\37\uffff\1\u0aa4",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0aa9\37\uffff\1\u0aa9",
            "",
            "\1\u0aaa\37\uffff\1\u0aaa",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0aad\37\uffff\1\u0aad",
            "\1\u0aae\37\uffff\1\u0aae",
            "\1\u0aaf\37\uffff\1\u0aaf",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0ab1\37\uffff\1\u0ab1",
            "\1\u0ab2\37\uffff\1\u0ab2",
            "\1\u0ab3",
            "\1\u0ab4\37\uffff\1\u0ab4",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0ab6\37\uffff\1\u0ab6",
            "",
            "",
            "\1\u0ab7\37\uffff\1\u0ab7",
            "",
            "\1\u0ab8\37\uffff\1\u0ab8",
            "\1\u0ab9\37\uffff\1\u0ab9",
            "\1\u0aba\37\uffff\1\u0aba",
            "\1\u0abb\37\uffff\1\u0abb",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0abd\37\uffff\1\u0abd",
            "\1\u0abe\37\uffff\1\u0abe",
            "\1\u0abf\37\uffff\1\u0abf",
            "",
            "\1\u0ac0\37\uffff\1\u0ac0",
            "\1\u0ac1\37\uffff\1\u0ac1",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0ac4\37\uffff\1\u0ac4",
            "\1\u0ac5\37\uffff\1\u0ac5",
            "\1\u0ac6\37\uffff\1\u0ac6",
            "\1\u0ac7\37\uffff\1\u0ac7",
            "\1\u0ac8",
            "\1\u0ac9\37\uffff\1\u0ac9",
            "\1\u0aca\37\uffff\1\u0aca",
            "\1\u0acb\37\uffff\1\u0acb",
            "\1\u0acc\37\uffff\1\u0acc",
            "\1\u0acd\37\uffff\1\u0acd",
            "\1\u0ace\37\uffff\1\u0ace",
            "\1\u0acf\37\uffff\1\u0acf",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0ad1\37\uffff\1\u0ad1",
            "\1\u0ad2\37\uffff\1\u0ad2",
            "\1\u0ad3\37\uffff\1\u0ad3",
            "",
            "",
            "",
            "",
            "\1\u0ad4\37\uffff\1\u0ad4",
            "\1\u0ad5\37\uffff\1\u0ad5",
            "",
            "",
            "\1\u0ad6\37\uffff\1\u0ad6",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0ad9\37\uffff\1\u0ad9",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0adb\37\uffff\1\u0adb",
            "\1\u0adc\37\uffff\1\u0adc",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0adf\37\uffff\1\u0adf",
            "\1\u0ae0\37\uffff\1\u0ae0",
            "\1\u0ae1\37\uffff\1\u0ae1",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0ae5\37\uffff\1\u0ae5",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0ae7\37\uffff\1\u0ae7",
            "",
            "",
            "\1\u0ae8\37\uffff\1\u0ae8",
            "\1\u0ae9\37\uffff\1\u0ae9",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\u0aec\1\uffff\32\111",
            "\1\u0aed\37\uffff\1\u0aed",
            "\1\u0aee\37\uffff\1\u0aee",
            "\1\u0aef\37\uffff\1\u0aef",
            "\1\u0af0\37\uffff\1\u0af0",
            "\1\u0af1\37\uffff\1\u0af1",
            "\1\u0af2\37\uffff\1\u0af2",
            "\1\u0af3\37\uffff\1\u0af3",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\u0af7\1\uffff\32\111",
            "\1\u0af8\37\uffff\1\u0af8",
            "\1\u0af9\37\uffff\1\u0af9",
            "\1\u0afa\37\uffff\1\u0afa",
            "\1\u0afb\37\uffff\1\u0afb",
            "",
            "",
            "\1\u0afc\37\uffff\1\u0afc",
            "",
            "\1\u0afd\37\uffff\1\u0afd",
            "\1\u0afe\37\uffff\1\u0afe",
            "",
            "",
            "\1\u0aff\37\uffff\1\u0aff",
            "\1\u0b00\37\uffff\1\u0b00",
            "\1\u0b01\37\uffff\1\u0b01",
            "",
            "",
            "",
            "\1\u0b02\37\uffff\1\u0b02",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0b04\37\uffff\1\u0b04",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "",
            "\1\u0b06\37\uffff\1\u0b06",
            "\1\u0b07\37\uffff\1\u0b07",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0b09",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0b0b\37\uffff\1\u0b0b",
            "\1\u0b0c\37\uffff\1\u0b0c",
            "\1\u0b0d\37\uffff\1\u0b0d",
            "",
            "",
            "",
            "\1\u0b0e\37\uffff\1\u0b0e",
            "\1\u0b0f",
            "\1\u0b10\37\uffff\1\u0b10",
            "\1\u0b11\37\uffff\1\u0b11",
            "\1\u0b12",
            "\1\u0b13\37\uffff\1\u0b13",
            "\1\u0b14\37\uffff\1\u0b14",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0b16\37\uffff\1\u0b16",
            "\1\u0b17\37\uffff\1\u0b17",
            "\1\u0b18\37\uffff\1\u0b18",
            "\1\u0b19",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0b1b\37\uffff\1\u0b1b",
            "\1\u0b1c\37\uffff\1\u0b1c",
            "",
            "\1\u0b1d\37\uffff\1\u0b1d",
            "",
            "\1\u0b1e\37\uffff\1\u0b1e",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0b20\37\uffff\1\u0b20",
            "\1\u0b21\37\uffff\1\u0b21",
            "\1\u0b23\14\uffff\1\u0b22\22\uffff\1\u0b23\14\uffff\1\u0b22",
            "\1\u0b24\37\uffff\1\u0b24",
            "\1\u0b25",
            "\1\u0b26\37\uffff\1\u0b26",
            "\1\u0b27\37\uffff\1\u0b27",
            "\1\u0b28\37\uffff\1\u0b28",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0b2a\37\uffff\1\u0b2a",
            "\1\u0b2b\37\uffff\1\u0b2b",
            "\1\u0b2c\12\uffff\1\u0b2d\4\uffff\1\u0b2e\17\uffff\1\u0b2c"+
            "\12\uffff\1\u0b2d\4\uffff\1\u0b2e",
            "",
            "\1\u0b2f\37\uffff\1\u0b2f",
            "\1\u0b30\37\uffff\1\u0b30",
            "\1\u0b31\37\uffff\1\u0b31",
            "\1\u0b32\37\uffff\1\u0b32",
            "",
            "\1\u0b33\37\uffff\1\u0b33",
            "\1\u0b34\37\uffff\1\u0b34",
            "\1\u0b35\37\uffff\1\u0b35",
            "\1\u0b36\37\uffff\1\u0b36",
            "\1\u0b37\37\uffff\1\u0b37",
            "\1\u0b38\12\uffff\1\u0b39\4\uffff\1\u0b3a\17\uffff\1\u0b38"+
            "\12\uffff\1\u0b39\4\uffff\1\u0b3a",
            "\1\u0b3b\37\uffff\1\u0b3b",
            "\1\u0b3c\37\uffff\1\u0b3c",
            "\1\u0b3d\37\uffff\1\u0b3d",
            "",
            "\1\u0b3e\37\uffff\1\u0b3e",
            "\1\u0b3f",
            "\1\u0b40\15\uffff\1\u0b41\21\uffff\1\u0b40\15\uffff\1\u0b41",
            "\1\u0b42\37\uffff\1\u0b42",
            "\1\u0b43\37\uffff\1\u0b43",
            "\1\u0b44\37\uffff\1\u0b44",
            "\1\u0b45\37\uffff\1\u0b45",
            "\1\u0b46\37\uffff\1\u0b46",
            "\1\u0b47\37\uffff\1\u0b47",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0b49\37\uffff\1\u0b49",
            "\1\u0b4a\37\uffff\1\u0b4a",
            "\1\u0b4b\37\uffff\1\u0b4b",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0b4d\37\uffff\1\u0b4d",
            "\1\u0b4e\37\uffff\1\u0b4e",
            "\1\u0b4f\37\uffff\1\u0b4f",
            "\1\u0b50\37\uffff\1\u0b50",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0b52\37\uffff\1\u0b52",
            "\1\u0b53\37\uffff\1\u0b53",
            "\1\u0b54\37\uffff\1\u0b54",
            "\1\u0b55\37\uffff\1\u0b55",
            "\1\u0b56\37\uffff\1\u0b56",
            "\1\u0b57\37\uffff\1\u0b57",
            "\1\u0b58\37\uffff\1\u0b58",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0b5a\37\uffff\1\u0b5a",
            "\1\u0b5b\37\uffff\1\u0b5b",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0b5e\37\uffff\1\u0b5e",
            "\1\u0b5f\37\uffff\1\u0b5f",
            "",
            "\1\u0b60\37\uffff\1\u0b60",
            "\1\u0b61\37\uffff\1\u0b61",
            "\1\u0b62\37\uffff\1\u0b62",
            "\1\u0b63\37\uffff\1\u0b63",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0b65\37\uffff\1\u0b65",
            "\1\u0b66\37\uffff\1\u0b66",
            "\1\u0b67\37\uffff\1\u0b67",
            "\1\u0b68\37\uffff\1\u0b68",
            "\1\u0b69\37\uffff\1\u0b69",
            "\1\u0b6a\37\uffff\1\u0b6a",
            "",
            "\1\u0b6b\37\uffff\1\u0b6b",
            "\1\u0b6c\37\uffff\1\u0b6c",
            "",
            "",
            "\1\u0b6d\37\uffff\1\u0b6d",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0b6f\37\uffff\1\u0b6f",
            "\1\u0b70\37\uffff\1\u0b70",
            "\1\u0b71\37\uffff\1\u0b71",
            "\1\u0b72\37\uffff\1\u0b72",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0b74\37\uffff\1\u0b74",
            "\1\u0b75\37\uffff\1\u0b75",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0b78\37\uffff\1\u0b78",
            "\1\u0b79\37\uffff\1\u0b79",
            "\1\u0b7a",
            "\1\u0b7b\37\uffff\1\u0b7b",
            "",
            "\1\u0b7c\37\uffff\1\u0b7c",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0b7e\37\uffff\1\u0b7e",
            "\1\u0b7f\37\uffff\1\u0b7f",
            "",
            "\1\u0b80\37\uffff\1\u0b80",
            "\1\u0b81\37\uffff\1\u0b81",
            "",
            "",
            "\1\u0b82\37\uffff\1\u0b82",
            "\1\u0b83\37\uffff\1\u0b83",
            "\1\u0b84\37\uffff\1\u0b84",
            "\1\u0b85\37\uffff\1\u0b85",
            "\1\u0b86\37\uffff\1\u0b86",
            "",
            "\1\u0b87\37\uffff\1\u0b87",
            "\1\u0b88\37\uffff\1\u0b88",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0b8a\37\uffff\1\u0b8a",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0b8c",
            "\1\u0b8d\37\uffff\1\u0b8d",
            "\1\u0b8e\37\uffff\1\u0b8e",
            "\1\u0b8f\37\uffff\1\u0b8f",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0b91\37\uffff\1\u0b91",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0b93\37\uffff\1\u0b93",
            "\1\u0b94\37\uffff\1\u0b94",
            "\1\u0b95\37\uffff\1\u0b95",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "\1\u0b98\37\uffff\1\u0b98",
            "\1\u0b99",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "",
            "",
            "\1\u0b9b\37\uffff\1\u0b9b",
            "\1\u0b9c\37\uffff\1\u0b9c",
            "",
            "\1\u0b9d\37\uffff\1\u0b9d",
            "\1\u0b9e\37\uffff\1\u0b9e",
            "\1\u0b9f\37\uffff\1\u0b9f",
            "\1\u0ba0\37\uffff\1\u0ba0",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            "\1\u0ba2\37\uffff\1\u0ba2",
            "",
            "\12\111\7\uffff\32\111\4\uffff\1\111\1\uffff\32\111",
            ""
    };

    static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_eotS);
    static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_eofS);
    static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_minS);
    static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_maxS);
    static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_acceptS);
    static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_specialS);
    static final short[][] DFA88_transition;

    static {
        int numStates = DFA88_transitionS.length;
        DFA88_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA88_transition[i] = DFA.unpackEncodedString(DFA88_transitionS[i]);
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;
        }
        public String getDescription() {
            return "1:1: Tokens : ( COMMENT | LINE_COMMENT | ADD | ALLOCATE | ALL | ALTER | AND | ANY | ARE | ARRAY | ASENSITIVE | ASYMMETRIC | AS | ATOMIC | AT | AUTHORIZATION | BEGIN | BETWEEN | BIGINT | BINARY | BLOB | BOOLEAN | BOTH | BY | CALLED | CALL | CASCADED | CASE | CAST | CHARACTER | CHAR | CHECK | CLOB | CLOSE | COLLATE | COLUMN | COMMIT | CONNECTION | CONNECT | CONSTRAINT | CONSTRUCTOR | CONTINUE | CORRESPONDING | CREATE | CROSS | CUBE | CURRENT_DATE | CURRENT_DEFAULT_TRANSFORM_GROUP | CURRENT_PATH | CURRENT_ROLE | CURRENT_TIMESTAMP | CURRENT_TIME | CURRENT_TRANSFORM_GROUP_FOR_TYPE | CURRENT_USER | CURRENT | CURSOR | CYCLE | DATE | DAY | DEALLOCATE | DECIMAL | DECLARE | DEC | DEFAULT | DELETE | DEREF | DESCRIBE | DETERMINISTIC | DISCONNECT | DISTINCT | DOUBLE | DROP | DYNAMIC | EACH | ELEMENT | ELSE | END_EXEC | END | ESCAPE | EXCEPT | EXECUTE | EXEC | EXISTS | EXIT | EXTERNAL | FALSE | FETCH | FILTER | FOREIGN | FOR | FREE | FROM | FULL | FUNCTION | GENERATED | GET | GLOBAL | GRANT | GROUPING | GROUP | HANDLER | HAVING | HOLD | HOUR | IDENTITY | IMMEDIATE | INDICATOR | INNER | INOUT | INPUT | INSENSITIVE | INSERT | INTEGER | INTERSECT | INTERVAL | INTO | INT | IN | ISOLATION | IS | JOIN | LANGUAGE | LARGE | LATERAL | LEADING | LEFT | LIKE | LOCALTIMESTAMP | LOCALTIME | LOCAL | MATCH | MEMBER | MERGE | METHOD | MINUTE | MODIFIES | MODULE | MONTH | MULTISET | NATIONAL | NATURAL | NCHAR_VARYING | NCHAR | NCLOB | NEW | NONE | NOTFOUND | NOT | NO | NULL | NUMERIC | OF | OLD | ONLY | ON | OPEN | ORDER | OR | OUTER | OUTPUT | OUT | OVERLAPS | OVER | PARAMETER | PARTITION | PRECISION | PREPARE | PRIMARY | PROCEDURE | RANGE | READS | REAL | RECURSIVE | REFERENCES | REFERENCING | REF | RELEASE | RETURNS | RETURN | REVOKE | RIGHT | ROLLBACK | ROLLUP | ROWS | ROW | SAVEPOINT | SCOPE | SCROLL | SEARCH | SECOND | SELECT | SENSITIVE | SESSION_USER | SET | SIMILAR | SMALLINT | SOME | SPECIFICTYPE | SPECIFIC | SQLEXCEPTION | SQLSTATE | SQLWARNING | SQL | START | STATIC | SUBMULTISET | SYMMETRIC | SYSTEM_USER | SYSTEM | TABLE | THEN | TIMESTAMP | TIMEZONE_HOUR | TIMEZONE_MINUTE | TIME | TO | TRAILING | TRANSLATION | TREAT | TRIGGER | TRUE | UNDO | UNION | UNIQUE | UNKNOWN | UNNEST | UPDATE | USER | USING | VALUES | VALUE | VARCHAR | VARYING | WHENEVER | WHEN | WHERE | WINDOW | WITH | WITHIN | WITHOUT | YEAR | ABS | ABSOLUTE | ACTION | ADA | ADMIN | AFTER | ALWAYS | ASC | ASSERTION | ASSIGNMENT | ATTRIBUTE | ATTRIBUTES | AUTO | AVG | BEFORE | BERNOULLI | BIN | BREADTH | CARDINALITY | CASCADE | CATALOG_NAME | CATALOG | CEILING | CEIL | CHAIN | CHARACTERISTICS | CHARACTERS | CHARACTER_LENGTH | CHARACTER_SET_CATALOG | CHARACTER_SET_NAME | CHARACTER_SET_SCHEMA | CHAR_LENGTH | CHECKED | CLASS_ORIGIN | COALESCE | COBOL | CODE_UNITS | COLLATION_CATALOG | COLLATION_NAME | COLLATION_SCHEMA | COLLATION | COLLECT | COLUMN_NAME | COMMAND_FUNCTION_CODE | COMMAND_FUNCTION | COMMITTED | CONDITION_NUMBER | CONDITION | CONNECTION_NAME | CONSTRAINTS | CONSTRAINT_CATALOG | CONSTRAINT_NAME | CONSTRAINT_SCHEMA | CONSTRUCTORS | CONST | CONTAINS | CONVERT | CORR | COUNT | COVAR_POP | COVAR_SAMP | CUME_DIST | CURRENT_COLLATION | CURSOR_NAME | DATA | DATETIME_INTERVAL_CODE | DATETIME_INTERVAL_PRECISION | DAYS | DCL | DEFAULTS | DEFERRABLE | DEFERRED | DEFINED | DEFINER | DEGREE | DENSE_RANK | DEPTH | DERIVED | DESCRIPTOR | DESC | DIAGNOSTICS | DISPATCH | DISPLAY | DOMAIN | DOUBLE_PRECISION | DYNAMIC_FUNCTION | DYNAMIC_FUNCTION_CODE | EQUALS | EVERY | EXCEPTION | EXCLUDE | EXCLUDING | EXP | EXTERN | EXTRACT | FINAL | FIRST | FIXED | FLOAT | FLOOR | FOLLOWING | FORTRAN | FOUND | FUSION | GENERAL | GOTO | GO | GRANTED | HIERARCHY | HOURS | IMPLEMENTATION | INCLUDING | INCREMENT | INDICATOR_TYPE | INITIALLY | INSTANCE | INSTANTIABLE | INTERFACES | INTERSECTION | INVOKER | KEY_MEMBER | KEY_TYPE | KEY | KIND | LAST | LENGTH | LEN | LEVEL | LOGICAL | LONG | LN | LOCATOR | LOWER | MAP | MATCHED | MAXVALUE | MAX | MESSAGE_LENGTH | MESSAGE_OCTET_LENGTH | MESSAGE_TEXT | MINVALUE | MIN | MOD | MORE | MUMPS | NAMES | NAME | NESTING | NEXT | NORMALIZED | NORMALIZE | NULLABLE | NULLIF | NULLS | NUMBER | OBJECT | OCTETS | OCTET_LENGTH | OPTION | OPTIONS | ORDERING | ORDINALITY | OTHERS | OVERLAY | OVERRIDING | PACKED | PAD | PARAMETER_MODE | PARAMETER_NAME | PARAMETER_ORDINAL_POSITION | PARAMETER_SPECIFIC_CATALOG | PARAMETER_SPECIFIC_NAME | PARAMETER_SPECIFIC_SCHEMA | PARTIAL | PASCAL | PATH | PERCENTILE_CONT | PERCENTILE_DISC | PERCENT_RANK | PICTURE | PIC | PLACING | PLI | POSITION | POWER | PRECEDING | PRESERVE | PRIOR | PRIVILEGES | PUBLIC | RANK | READ | REGR_AVGX | REGR_AVGY | REGR_COUNT | REGR_INTERCEPT | REGR_R2 | REGR_SLOPE | REGR_SXX | REGR_SXY | REGR_SYY | RELATIVE | REPEATABLE | RESTART | RESTRICT | RESULT | RETURNED_CARDINALITY | RETURNED_LENGTH | RETURNED_OCTET_LENGTH | RETURNED_SQLSTATE | ROLE | ROUTINE_CATALOG | ROUTINE_NAME | ROUTINE_SCHEMA | ROUTINE | ROW_COUNT | ROW_NUMBER | SCALE | SCHEMA_NAME | SCHEMA | SCOPE_CATALOG | SCOPE_NAME | SCOPE_SCHEMA | SECTION | SECURITY | SELF | SEPARATE | SEQUENCE | SERIALIZABLE | SERVER_NAME | SESSION | SETS | SHORT | SIGNED | SIGN | SIMPLE | SIZE | SOURCE | SPACE | SPECIFIC_NAME | SQLSTATE_TYPE | SQRT | STATEMENT | STATE | STDDEV_POP | STDDEV_SAMP | STRUCTURE | STYLE | SUBCLASS_ORIGIN | SUBSTRING | SUM | TABLESAMPLE | TABLE_NAME | TEMPORARY | TIES | TOP_LEVEL_COUNT | TRANSACTIONS_COMMITTED | TRANSACTIONS_ROLLED_BACK | TRANSACTION_ACTIVE | TRANSACTION | TRANSFORMS | TRANSFORM | TRANSLATE | TRIGGER_CATALOG | TRIGGER_NAME | TRIGGER_SCHEMA | TRIM | TYPE | UNBOUNDED | UNCOMMITTED | UNDER | UNNAMED | UNSIGNED | UPPER | USAGE | USER_DEFINED_TYPE_CATALOG | USER_DEFINED_TYPE_CODE | USER_DEFINED_TYPE_NAME | USER_DEFINED_TYPE_SCHEMA | VAR_POP | VAR_SAMP | VIEW | VOLATILE | WIDTH_BUCKET | WORK | WRITE | ZONE | Not_Equals_Operator | Greater_Or_Equals_Operator | Less_Or_Equals_Operator | Concatenation_Operator | Right_Arrow | Double_Colon | Double_Period | Back_Quote | Tilde | Exclamation | AT_Sign | Percent | Circumflex | Ampersand | Asterisk | Left_Paren | Right_Paren | Plus_Sign | Minus_Sign | Equals_Operator | Left_Brace | Right_Brace | Left_Bracket | Left_Bracket_Trigraph | Right_Bracket | Right_Bracket_Trigraph | Vertical_Bar | Colon | Semicolon | Double_Quote | Quote | Less_Than_Operator | Greater_Than_Operator | Comma | Period | Question_Mark | Slash | Unicode_Forbidden_Identifier_Characters | Escape_Character | Number | String_Literal | Regular_Identifier | Unicode_Identifier | Space | White_Space | BAD );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            IntStream input = _input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA88_0 = input.LA(1);

                        s = -1;
                        if ( (LA88_0=='/') ) {s = 1;}

                        else if ( (LA88_0=='-') ) {s = 2;}

                        else if ( (LA88_0=='A'||LA88_0=='a') ) {s = 3;}

                        else if ( (LA88_0=='B') ) {s = 4;}

                        else if ( (LA88_0=='C'||LA88_0=='c') ) {s = 5;}

                        else if ( (LA88_0=='D'||LA88_0=='d') ) {s = 6;}

                        else if ( (LA88_0=='E'||LA88_0=='e') ) {s = 7;}

                        else if ( (LA88_0=='F'||LA88_0=='f') ) {s = 8;}

                        else if ( (LA88_0=='G'||LA88_0=='g') ) {s = 9;}

                        else if ( (LA88_0=='H'||LA88_0=='h') ) {s = 10;}

                        else if ( (LA88_0=='I'||LA88_0=='i') ) {s = 11;}

                        else if ( (LA88_0=='J'||LA88_0=='j') ) {s = 12;}

                        else if ( (LA88_0=='L'||LA88_0=='l') ) {s = 13;}

                        else if ( (LA88_0=='M'||LA88_0=='m') ) {s = 14;}

                        else if ( (LA88_0=='N') ) {s = 15;}

                        else if ( (LA88_0=='O'||LA88_0=='o') ) {s = 16;}

                        else if ( (LA88_0=='P'||LA88_0=='p') ) {s = 17;}

                        else if ( (LA88_0=='R'||LA88_0=='r') ) {s = 18;}

                        else if ( (LA88_0=='S'||LA88_0=='s') ) {s = 19;}

                        else if ( (LA88_0=='T'||LA88_0=='t') ) {s = 20;}

                        else if ( (LA88_0=='U') ) {s = 21;}

                        else if ( (LA88_0=='V'||LA88_0=='v') ) {s = 22;}

                        else if ( (LA88_0=='W'||LA88_0=='w') ) {s = 23;}

                        else if ( (LA88_0=='Y'||LA88_0=='y') ) {s = 24;}

                        else if ( (LA88_0=='K'||LA88_0=='k') ) {s = 25;}

                        else if ( (LA88_0=='Z'||LA88_0=='z') ) {s = 26;}

                        else if ( (LA88_0=='<') ) {s = 27;}

                        else if ( (LA88_0=='>') ) {s = 28;}

                        else if ( (LA88_0=='|') ) {s = 29;}

                        else if ( (LA88_0==':') ) {s = 30;}

                        else if ( (LA88_0=='.') ) {s = 31;}

                        else if ( (LA88_0=='`') ) {s = 32;}

                        else if ( (LA88_0=='~') ) {s = 33;}

                        else if ( (LA88_0=='!') ) {s = 34;}

                        else if ( (LA88_0=='@') ) {s = 35;}

                        else if ( (LA88_0=='%') ) {s = 36;}

                        else if ( (LA88_0=='^') ) {s = 37;}

                        else if ( (LA88_0=='&') ) {s = 38;}

                        else if ( (LA88_0=='*') ) {s = 39;}

                        else if ( (LA88_0=='(') ) {s = 40;}

                        else if ( (LA88_0==')') ) {s = 41;}

                        else if ( (LA88_0=='+') ) {s = 42;}

                        else if ( (LA88_0=='=') ) {s = 43;}

                        else if ( (LA88_0=='{') ) {s = 44;}

                        else if ( (LA88_0=='}') ) {s = 45;}

                        else if ( (LA88_0=='[') ) {s = 46;}

                        else if ( (LA88_0=='?') ) {s = 47;}

                        else if ( (LA88_0==']') ) {s = 48;}

                        else if ( (LA88_0==';') ) {s = 49;}

                        else if ( (LA88_0=='\"') ) {s = 50;}

                        else if ( (LA88_0=='\'') ) {s = 51;}

                        else if ( (LA88_0==',') ) {s = 52;}

                        else if ( ((LA88_0>='\u0001' && LA88_0<='\u001F')) ) {s = 53;}

                        else if ( (LA88_0=='\\') ) {s = 54;}

                        else if ( (LA88_0=='0') ) {s = 55;}

                        else if ( ((LA88_0>='1' && LA88_0<='9')) ) {s = 56;}

                        else if ( (LA88_0=='_') ) {s = 57;}

                        else if ( (LA88_0=='b') ) {s = 58;}

                        else if ( (LA88_0=='X') ) {s = 59;}

                        else if ( (LA88_0=='n') ) {s = 60;}

                        else if ( (LA88_0=='u') ) {s = 61;}

                        else if ( (LA88_0=='Q'||LA88_0=='q'||LA88_0=='x') ) {s = 62;}

                        else if ( (LA88_0==' ') ) {s = 63;}

                        else if ( ((LA88_0>='\u02B0' && LA88_0<='\u02FF')||(LA88_0>='\u2000' && LA88_0<='\u206F')||(LA88_0>='\u2190' && LA88_0<='\u245F')||(LA88_0>='\u2500' && LA88_0<='\u2BFF')||(LA88_0>='\u4DC0' && LA88_0<='\u4DFF')||(LA88_0>='\uFFF0' && LA88_0<='\uFFFF')) ) {s = 64;}

                        else if ( ((LA88_0>='\u0080' && LA88_0<='\u009F')) ) {s = 65;}

                        else if ( (LA88_0=='\u0000'||(LA88_0>='#' && LA88_0<='$')||LA88_0=='\u007F'||(LA88_0>='\u00A0' && LA88_0<='\u02AF')||(LA88_0>='\u0300' && LA88_0<='\u1FFF')||(LA88_0>='\u2070' && LA88_0<='\u218F')||(LA88_0>='\u2460' && LA88_0<='\u24FF')||(LA88_0>='\u2C00' && LA88_0<='\u4DBF')||(LA88_0>='\u4E00' && LA88_0<='\uFFEF')) ) {s = 66;}

                        if ( s>=0 ) return s;
                        break;
            }
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 88, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

}